name: Validate PR
on:
  workflow_call:

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  TESTING_SQL_SERVER_ADDR: "mysql://root:password@localhost/db0"
  RUST_BACKTRACE: 1
  # 20 MiB stack
  RUST_MIN_STACK: 20971520

jobs:
  proto:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-2019]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 80
    steps:
      - uses: mirromutth/mysql-action@v1.1
        if: startsWith(matrix.os, 'ubuntu')
        with:
          mysql version: '8.0'
          mysql database: 'db0'
          mysql root password: password
#      - uses: ankane/setup-mysql@v1
#        with:
#          database: db0
#      - uses: ankane/setup-postgres@v1
#        with:
#          postgres-version: 14
      - name: Install LLVM and Clang
        if: startsWith(matrix.os, 'windows')
        uses: KyleMayes/install-llvm-action@v1.5.1
        with:
          version: "13.0"
          directory: ${{ runner.temp }}/llvm

      - name: Set LIBCLANG_PATH
        if: startsWith(matrix.os, 'windows')
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV

      - name: Install OpenSSL
        if: startsWith(matrix.os, 'windows')
        run: choco install openssl --limit-output

      - name: Set OPENSSL_ROOT_DIR
        if: startsWith(matrix.os, 'windows')
        run: echo "OPENSSL_ROOT_DIR=C:/Program Files/OpenSSL-Win64" >> $env:GITHUB_ENV

      - name: Set OPENSSL_ROOT_DIR
        if: startsWith(matrix.os, 'macos')
        run: echo "OPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1" >> $GITHUB_ENV
        
      - uses: actions/checkout@v2
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v1
      - name: Run user library + SQL backend
        if: startsWith(matrix.os, 'ubuntu')
        run: cargo test --package hyxe_user --features enterprise
#      - run: cargo install --locked cargo-deny && cargo deny init && cargo deny check advisories bans sources
      - run: cargo test --package ez_pqcrypto
      - run: cargo test --package hyxe_crypt
      - run: cargo test --package hyxe_fs
      - run: cargo clean
      - run: cargo test --package hyxe_net --features=single-threaded,localhost-testing -- --test-threads=1
      - run: cargo clean
      - run: cargo test --package hyxe_net --features=multi-threaded,localhost-testing -- --test-threads=1
      - uses: actions/github-script@v2
        if: failure()
        with:
          script: |
            const { owner, repo } = context.repo
            console.log('Cancelling ...');
            const run_id = "${{ github.run_id }}";
            await github.actions.cancelWorkflowRun({ owner, repo, run_id });
            return 'stop'
          result-encoding: string
  nat:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-2019 ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - name: Install LLVM and Clang
        if: startsWith(matrix.os, 'windows')
        uses: KyleMayes/install-llvm-action@v1.5.1
        with:
          version: "13.0"
          directory: ${{ runner.temp }}/llvm

      - name: Set LIBCLANG_PATH
        if: startsWith(matrix.os, 'windows')
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV

      - name: Install OpenSSL
        if: startsWith(matrix.os, 'windows')
        run: choco install openssl --limit-output

      - name: Set OPENSSL_ROOT_DIR
        if: startsWith(matrix.os, 'windows')
        run: echo "OPENSSL_ROOT_DIR=C:/Program Files/OpenSSL-Win64" >> $env:GITHUB_ENV

      - name: Set OPENSSL_ROOT_DIR
        if: startsWith(matrix.os, 'macos')
        run: echo "OPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1" >> $GITHUB_ENV

      - uses: actions/checkout@v2
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v1

      - run: cargo test --package netbeam
      - run: cargo test --package hyxe_wire
      - uses: actions/github-script@v2
        if: failure()
        with:
          script: |
            const { owner, repo } = context.repo
            console.log('Cancelling ...');
            const run_id = "${{ github.run_id }}";
            await github.actions.cancelWorkflowRun({ owner, repo, run_id });
            return 'stop'
          result-encoding: string
  lusna_sdk:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-2019 ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 100
    steps:
      - name: Install LLVM and Clang
        if: startsWith(matrix.os, 'windows')
        uses: KyleMayes/install-llvm-action@v1.5.1
        with:
          version: "13.0"
          directory: ${{ runner.temp }}/llvm

      - name: Set LIBCLANG_PATH
        if: startsWith(matrix.os, 'windows')
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV

      - name: Install OpenSSL
        if: startsWith(matrix.os, 'windows')
        run: choco install openssl --limit-output

      - name: Set OPENSSL_ROOT_DIR
        if: startsWith(matrix.os, 'windows')
        run: echo "OPENSSL_ROOT_DIR=C:/Program Files/OpenSSL-Win64" >> $env:GITHUB_ENV

      - name: Set OPENSSL_ROOT_DIR
        if: startsWith(matrix.os, 'macos')
        run: echo "OPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1" >> $GITHUB_ENV

      - uses: actions/checkout@v2
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v1

      - run: cargo test --package lusna_sdk --features=localhost-testing -- --test-threads=1
      - run: cargo clean
      - run: cargo test --release --package lusna_sdk --features=localhost-testing -- --test-threads=1
      - uses: actions/github-script@v2
        if: failure()
        with:
          script: |
            const { owner, repo } = context.repo
            console.log('Cancelling ...');
            const run_id = "${{ github.run_id }}";
            await github.actions.cancelWorkflowRun({ owner, repo, run_id });
            return 'stop'
          result-encoding: string
  coverage:
    runs-on: ubuntu-latest
    timeout-minutes: 80
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        with:
          args: '--timeout 3600 --packages lusna_sdk --features=localhost-testing -- --test-threads=1'
      - uses: codecov/codecov-action@v1.0.2
        with:
          token: ${{secrets.CODECOV_TOKEN}}
      - name: Archive code coverage results
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage-report
          path: cobertura.xml
      - uses: actions/github-script@v2
        if: failure()
        with:
          script: |
            const { owner, repo } = context.repo
            console.log('Cancelling ...');
            const run_id = "${{ github.run_id }}";
            await github.actions.cancelWorkflowRun({ owner, repo, run_id });
            return 'stop'
          result-encoding: string
#  scanning:
#    name: GitGuardian scan
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#        with:
#          fetch-depth: 0 # fetch all history so multiple commits can be scanned
#      - name: GitGuardian scan
#        uses: GitGuardian/gg-shield-action@master
#        env:
#          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
#          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
#          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
#          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
#          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}