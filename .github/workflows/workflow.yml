name: Validate PR
on:
  workflow_call:

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  # 40 MiB stack
  RUST_MIN_STACK: 40971520
  RUST_LOG: "lusna=warn"

jobs:
  core_libs:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 80
    steps:
      - uses: shogo82148/actions-setup-mysql@v1
        if: startsWith(matrix.os, 'ubuntu')
        with:
          mysql-version: '8.0'
          root-password: 'password'
      - name: Setup Postgres database (1)
        if: startsWith(matrix.os, 'ubuntu')
        uses: Daniel-Marynicz/postgresql-action@master
        with:
          postgres_image_tag: latest
          app_user: nologik
          app_user_password: password
          app_db: hyxewave hyxewave2
      - name: Add mysql databases
        if: startsWith(matrix.os, 'ubuntu')
        run: mysql -uroot -h127.0.0.1 -ppassword -e 'CREATE DATABASE hyxewave; CREATE DATABASE hyxewave2;'
      - name: Augment connection size for psql
        if: startsWith(matrix.os, 'ubuntu')
        run:  psql -c 'ALTER SYSTEM SET max_connections TO 1000' postgresql://postgres:postgres@localhost/hyxewave && psql -c 'ALTER SYSTEM SET max_connections TO 1000' postgresql://postgres:postgres@localhost/hyxewave2
      - name: Add sqlite databases
        if: startsWith(matrix.os, 'ubuntu')
        run: touch /home/runner/hyxewave.db && touch /home/runner/hyxewave2.db
      - name: Start Redis
        if: startsWith(matrix.os, 'ubuntu')
        uses: supercharge/redis-github-action@1.4.0
        with:
          redis-version: 4
          redis-port: 6379
      - uses: Avarok-Cybersecurity/gh-actions-deps@master
      - name: Run holistic user library + SQL backend
        if: startsWith(matrix.os, 'ubuntu')
        env:
          TESTING_SQL_SERVER_ADDR_SERVER: "mysql://root:password@localhost/hyxewave,postgres://nologik:password@localhost/hyxewave,sqlite://file:/home/runner/hyxewave.db,redis://127.0.0.1:6379/1"
          TESTING_SQL_SERVER_ADDR_CLIENT: "mysql://root:password@localhost/hyxewave2,postgres://nologik:password@localhost/hyxewave2,sqlite://file:/home/runner/hyxewave2.db,redis://127.0.0.1:6379/2"
        run: cargo nextest run --package hyxe_user --features sql,redis,localhost-testing
      - name: Run minimal user library + SQL backend
        if: startsWith(matrix.os, 'windows') || startsWith(matrix.os, 'macos')
        env:
          SKIP_EXT_BACKENDS: "true"
        run: cargo nextest run --package hyxe_user --features localhost-testing
      - run: cargo nextest run --package ez_pqcrypto --package hyxe_crypt
      - run: cargo nextest run --features=localhost-testing,multi-threaded --package hyxe_net
        env:
          RUST_LOG: lusna=trace
      - uses: actions/github-script@v6
        if: failure()
        with:
          script: |
            const { owner, repo } = context.repo
            console.log('Cancelling ...');
            const run_id = "${{ github.run_id }}";
            await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id });
            return 'stop'
          result-encoding: string

  nat:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
      - uses: Avarok-Cybersecurity/gh-actions-deps@master
      - run: cargo nextest run --package netbeam
      - run: cargo nextest run --package hyxe_wire --features=localhost-testing
      - uses: actions/github-script@v6
        if: failure()
        with:
          script: |
            const { owner, repo } = context.repo
            console.log('Cancelling ...');
            const run_id = "${{ github.run_id }}";
            await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id });
            return 'stop'
          result-encoding: string

  lusna_sdk:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 50
    steps:
      - uses: Avarok-Cybersecurity/gh-actions-deps@master
      - name: Single-threaded testing
        run: cargo nextest run --package lusna_sdk --features=localhost-testing,localhost-testing-loopback-only
      - name: Multi-threaded testing
        if: startsWith(matrix.os, 'ubuntu')
        run: cargo nextest run --package lusna_sdk --features=multi-threaded,localhost-testing,localhost-testing-loopback-only
      - uses: actions/github-script@v6
        if: failure()
        with:
          script: |
            const { owner, repo } = context.repo
            console.log('Cancelling ...');
            const run_id = "${{ github.run_id }}";
            await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id });
            return 'stop'
          result-encoding: string

  lusna_sdk_release:
    strategy:
      matrix:
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 50
    steps:
      - uses: Avarok-Cybersecurity/gh-actions-deps@master
      - name: Single-threaded testing
        run: cargo nextest run --package lusna_sdk --features=localhost-testing,localhost-testing-loopback-only --release
      - name: Multi-threaded testing
        run: cargo nextest run --package lusna_sdk --features=multi-threaded,localhost-testing,localhost-testing-loopback-only --release
      - uses: actions/github-script@v6
        if: failure()
        with:
          script: |
            const { owner, repo } = context.repo
            console.log('Cancelling ...');
            const run_id = "${{ github.run_id }}";
            await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id });
            return 'stop'
          result-encoding: string

  misc_checks:
    name: miscellaneous
    runs-on: ubuntu-latest
    steps:
      - uses: Avarok-Cybersecurity/gh-actions-deps@master
#      - name: Install Valgrind
#        run: |
#          sudo apt-get update -y
#          sudo apt-get install -y valgrind
#      # Compile tests
#      - name: cargo build secmem_bytes_test
#        run: cargo build --bin secmem_bytes_test
      # Run with valgrind
#      - name: Run valgrind secmem_bytes
#        run: valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all ./target/debug/secmem_bytes_test
#      - name: cargo build secmem_string_test
#        run: cargo build --bin secmem_string_test
      # Run with valgrind
#      - name: Run valgrind secmem_string
#        run: valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all ./target/debug/secmem_string_test
      - run: cargo check --package lusna_sdk --release --features=webrtc,sql,redis,multi-threaded
      - run: cargo install --locked cargo-deny && cargo deny check all
#      - name: cargo build pq_kems
#        run: cargo build --bin pq_kems_test
#      # Run with valgrind
#      - name: Run valgrind pq_kems
#        run: valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all ./target/debug/pq_kems_test
      - uses: actions/github-script@v6
        if: failure()
        with:
          script: |
            const { owner, repo } = context.repo
            console.log('Cancelling ...');
            const run_id = "${{ github.run_id }}";
            await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id });
            return 'stop'
          result-encoding: string
#  features_check:
#    name: check features
#    runs-on: ubuntu-latest
#    steps:
#      - uses: Avarok-Cybersecurity/gh-actions-deps@master
#      - name: Install features checker
#        run: cargo install cargo-all-features
#      - name: Check all feature combinations
#        run: cargo check-all-features --package lusna_sdk
#      - uses: actions/github-script@v6
#        if: failure()
#        with:
#          script: |
#            const { owner, repo } = context.repo
#            console.log('Cancelling ...');
#            const run_id = "${{ github.run_id }}";
#            await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id });
#            return 'stop'
#          result-encoding: string
  coverage:
    runs-on: macos-latest
    timeout-minutes: 80
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        run: rustup toolchain install stable --component llvm-tools-preview
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - uses: Swatinem/rust-cache@v1
      - name: Run llvm-cov nextest
        env:
          SKIP_EXT_BACKENDS: "true"
        run: cargo llvm-cov nextest --features=filesystem,localhost-testing,multi-threaded --package lusna_sdk,hyxe_user,hyxe_crypt,ez_pqcrypto,hyxe_wire,netbeam,async_ip --lcov --output-path ${HOME}/lcov.info
      - uses: codecov/codecov-action@master
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ env.GITHUB_WORKSPACE }}/lcov.info
      - name: Commit codecov report to branch
        run: |
          git config --global user.name "tbraun96"
          git config --global user.email "thomas.braun@avarok.net"
          git fetch
          git checkout coverage_files
          mv ${HOME}/lcov.info ${GITHUB_WORKSPACE}/lcov-${GITHUB_HEAD_REF}.info
          git add ${GITHUB_WORKSPACE}/lcov-${GITHUB_HEAD_REF}.info
          git commit -m "add coverage report"
      - name: Push codecov to branch
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
#          branch: ${{ github.head_ref }}
          branch: coverage_files
          force: true
      - uses: actions/github-script@v6
        if: failure()
        with:
          script: |
            const { owner, repo } = context.repo
            console.log('Cancelling ...');
            const run_id = "${{ github.run_id }}";
            await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id });
            return 'stop'
          result-encoding: string
 # scanning:
 #   name: GitGuardian scan
 #   runs-on: ubuntu-latest
 #   steps:
 #     - name: Checkout
 #       uses: actions/checkout@v2
 #       with:
 #         fetch-depth: 0 # fetch all history so multiple commits can be scanned
 #     - name: GitGuardian scan
 #       uses: GitGuardian/ggshield-action@master
 #       env:
 #         GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
 #         GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
 #         GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
 #         GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
 #         GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
 #     - uses: actions/github-script@v6
 #       if: failure()
 #       with:
 #         script: |
 #           const { owner, repo } = context.repo
 #           console.log('Cancelling ...');
 #           const run_id = "${{ github.run_id }}";
 #           await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id });
 #           return 'stop'
 #         result-encoding: string
