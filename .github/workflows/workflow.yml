name: Validate PR
on:
  workflow_call:

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  # 40 MiB stack
  RUST_MIN_STACK: 40971520
  RUST_LOG: "lusna"

jobs:
  core_libs:
    env:
      TESTING_SQL_SERVER_ADDR_SERVER: "mysql://root:password@localhost/hyxewave,postgres://nologik:password@localhost/hyxewave,sqlite://file:/home/runner/hyxewave.db,redis://127.0.0.1:6379/1"
      TESTING_SQL_SERVER_ADDR_CLIENT: "mysql://root:password@localhost/hyxewave2,postgres://nologik:password@localhost/hyxewave2,sqlite://file:/home/runner/hyxewave2.db,redis://127.0.0.1:6379/2"
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-2019]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 80
    steps:
      - uses: shogo82148/actions-setup-mysql@v1
        if: startsWith(matrix.os, 'ubuntu')
        with:
          mysql-version: '8.0'
          root-password: 'password'
      - name: Setup Postgres database (1)
        if: startsWith(matrix.os, 'ubuntu')
        uses: Daniel-Marynicz/postgresql-action@master
        with:
          postgres_image_tag: latest
          app_user: nologik
          app_user_password: password
          app_db: hyxewave hyxewave2
      - name: Add mysql databases
        if: startsWith(matrix.os, 'ubuntu')
        run: mysql -uroot -h127.0.0.1 -ppassword -e 'CREATE DATABASE hyxewave; CREATE DATABASE hyxewave2;'
      - name: Augment connection size for psql
        if: startsWith(matrix.os, 'ubuntu')
        run:  psql -c 'ALTER SYSTEM SET max_connections TO 1000' postgresql://postgres:postgres@localhost/hyxewave && psql -c 'ALTER SYSTEM SET max_connections TO 1000' postgresql://postgres:postgres@localhost/hyxewave2
      - name: Add sqlite databases
        if: startsWith(matrix.os, 'ubuntu')
        run: touch /home/runner/hyxewave.db && touch /home/runner/hyxewave2.db
      - name: Start Redis
        if: startsWith(matrix.os, 'ubuntu')
        uses: supercharge/redis-github-action@1.4.0
        with:
          redis-version: 4
          redis-port: 6379
      - uses: Avarok-Cybersecurity/gh-actions-deps@alpha04
      - name: Run user library + SQL backend
        if: startsWith(matrix.os, 'ubuntu')
        run: cargo test --package hyxe_user --features sql,redis,localhost-testing -- --test-threads=1
      #      - run: cargo install --locked cargo-deny && cargo deny init && cargo deny check advisories bans sources
      - run: cargo test --features=localhost-testing --package ez_pqcrypto --package hyxe_crypt --package hyxe_net
      - uses: actions/github-script@v6
        if: failure()
        with:
          script: |
            const { owner, repo } = context.repo
            console.log('Cancelling ...');
            const run_id = "${{ github.run_id }}";
            await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id });
            return 'stop'
          result-encoding: string

  nat:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-2019 ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
      - uses: Avarok-Cybersecurity/gh-actions-deps@alpha04
      - run: cargo test --package netbeam
      - run: cargo test --package hyxe_wire --features=localhost-testing -- --test-threads=1
      - uses: actions/github-script@v6
        if: failure()
        with:
          script: |
            const { owner, repo } = context.repo
            console.log('Cancelling ...');
            const run_id = "${{ github.run_id }}";
            await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id });
            return 'stop'
          result-encoding: string

  lusna_sdk:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-2019 ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 50
    steps:
      - uses: Avarok-Cybersecurity/gh-actions-deps@alpha04
      - name: Single-threaded testing
        run: cargo test --package lusna_sdk --features=single-threaded,localhost-testing -- --test-threads=1
      - name: Multi-threaded testing
        if: startsWith(matrix.os, 'ubuntu')
        run: cargo test --package lusna_sdk --features=multi-threaded,localhost-testing -- --test-threads=1
      - uses: actions/github-script@v6
        if: failure()
        with:
          script: |
            const { owner, repo } = context.repo
            console.log('Cancelling ...');
            const run_id = "${{ github.run_id }}";
            await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id });
            return 'stop'
          result-encoding: string
  valgrind_and_checks:
    name: valgrind secmem
    runs-on: ubuntu-latest
    steps:
      - uses: Avarok-Cybersecurity/gh-actions-deps@alpha04
      - name: Install Valgrind
        run: |
          sudo apt-get update -y
          sudo apt-get install -y valgrind
      # Compile tests
      - name: cargo build secmem_bytes_test
        run: cargo build --bin secmem_bytes_test
      # Run with valgrind
      - name: Run valgrind secmem_bytes
        run: valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all ./target/debug/secmem_bytes_test
      - name: cargo build secmem_string_test
        run: cargo build --bin secmem_string_test
      # Run with valgrind
      - name: Run valgrind secmem_string
        run: valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all ./target/debug/secmem_string_test
      - run: cargo check --package lusna_sdk --release --features=webrtc
#      - name: cargo build pq_kems
#        run: cargo build --bin pq_kems_test
#      # Run with valgrind
#      - name: Run valgrind pq_kems
#        run: valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all ./target/debug/pq_kems_test
      - uses: actions/github-script@v6
        if: failure()
        with:
          script: |
            const { owner, repo } = context.repo
            console.log('Cancelling ...');
            const run_id = "${{ github.run_id }}";
            await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id });
            return 'stop'
          result-encoding: string
  cargo_deny_and_coverage:
    env:
      TESTING_SQL_SERVER_ADDR_SERVER: "mysql://root:password@localhost/hyxewave,postgres://nologik:password@localhost/hyxewave,sqlite://file:/home/runner/hyxewave.db,redis://127.0.0.1:6379/1"
      TESTING_SQL_SERVER_ADDR_CLIENT: "mysql://root:password@localhost/hyxewave2,postgres://nologik:password@localhost/hyxewave2,sqlite://file:/home/runner/hyxewave2.db,redis://127.0.0.1:6379/2"
    runs-on: ubuntu-latest
    timeout-minutes: 80
    steps:
      - uses: Avarok-Cybersecurity/gh-actions-deps@alpha04
      - run: cargo install --locked cargo-deny && cargo deny check all
      - uses: shogo82148/actions-setup-mysql@v1
        with:
          mysql-version: '8.0'
          root-password: 'password'
      - name: Setup Postgres database (1)
        uses: Daniel-Marynicz/postgresql-action@master
        with:
          postgres_image_tag: latest
          app_user: nologik
          app_user_password: password
          app_db: hyxewave hyxewave2
      - name: Add mysql databases
        run: mysql -uroot -h127.0.0.1 -ppassword -e 'CREATE DATABASE hyxewave; CREATE DATABASE hyxewave2;'
      - name: Augment connection size for psql
        run:  psql -c 'ALTER SYSTEM SET max_connections TO 1000' postgresql://postgres:postgres@localhost/hyxewave && psql -c 'ALTER SYSTEM SET max_connections TO 1000' postgresql://postgres:postgres@localhost/hyxewave2
      - name: Add sqlite databases
        run: touch /home/runner/hyxewave.db && touch /home/runner/hyxewave2.db
      - name: Start Redis
        uses: supercharge/redis-github-action@1.4.0
        with:
          redis-version: 4
          redis-port: 6379
      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        with:
          args: '--timeout 3600 --packages lusna_sdk,hyxe_user,hyxe_crypt,ez_pqcrypto,hyxe_wire --features=redis,sql,localhost-testing -- --test-threads=1 --skip stress_test --skip argon_autotuner'
      - uses: codecov/codecov-action@master
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: cobertura.xml
      - uses: actions/github-script@v6
        if: failure()
        with:
          script: |
            const { owner, repo } = context.repo
            console.log('Cancelling ...');
            const run_id = "${{ github.run_id }}";
            await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id });
            return 'stop'
          result-encoding: string
 # scanning:
 #   name: GitGuardian scan
 #   runs-on: ubuntu-latest
 #   steps:
 #     - name: Checkout
 #       uses: actions/checkout@v2
 #       with:
 #         fetch-depth: 0 # fetch all history so multiple commits can be scanned
 #     - name: GitGuardian scan
 #       uses: GitGuardian/ggshield-action@master
 #       env:
 #         GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
 #         GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
 #         GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
 #         GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
 #         GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
 #     - uses: actions/github-script@v6
 #       if: failure()
 #       with:
 #         script: |
 #           const { owner, repo } = context.repo
 #           console.log('Cancelling ...');
 #           const run_id = "${{ github.run_id }}";
 #           await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id });
 #           return 'stop'
 #         result-encoding: string