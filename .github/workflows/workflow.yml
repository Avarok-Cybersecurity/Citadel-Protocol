name: Validate PR
on:
  workflow_call:

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  TESTING_SQL_SERVER_ADDR_SERVER: "mysql://root:password@localhost/hyxewave,postgres://nologik:password@localhost/hyxewave"
  TESTING_SQL_SERVER_ADDR_CLIENT: "mysql://root:password@localhost/hyxewave2,postgres://nologik:password@localhost/hyxewave2"
  RUST_BACKTRACE: full
  # 20 MiB stack
  RUST_MIN_STACK: 20971520

jobs:
  core_libs:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-2019]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 80
    steps:
      - uses: mirromutth/mysql-action@v1.1
        if: startsWith(matrix.os, 'ubuntu')
        with:
          mysql version: '8.0'
          mysql database: 'hyxewave'
          mysql root password: password
      - name: add mysql database
        run: mysql -u root -p password -e "CREATE DATABASE hyxewave2;"
      - name: Setup Postgres database (1)
        uses: Daniel-Marynicz/postgresql-action@master
        with:
          postgres_image_tag: latest
          app_user: nologik
          app_user_password: password
          app_db: hyxewave hyxewave2
      - uses: Avarok-Cybersecurity/gh-actions-deps@alpha04
      - name: Run user library + SQL backend
        if: startsWith(matrix.os, 'ubuntu')
        run: cargo test --package hyxe_user --features enterprise
      #      - run: cargo install --locked cargo-deny && cargo deny init && cargo deny check advisories bans sources
      - run: cargo test --package ez_pqcrypto
      - run: cargo test --package hyxe_crypt
      - run: cargo test --package hyxe_fs
      - uses: actions/github-script@v2
        if: failure()
        with:
          script: |
            const { owner, repo } = context.repo
            console.log('Cancelling ...');
            const run_id = "${{ github.run_id }}";
            await github.actions.cancelWorkflowRun({ owner, repo, run_id });
            return 'stop'
          result-encoding: string

  proto:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-2019]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 80
    steps:
      - uses: Avarok-Cybersecurity/gh-actions-deps@alpha04
      - run: cargo test --package hyxe_net --features=single-threaded,localhost-testing -- --test-threads=1
      - run: cargo test --package hyxe_net --features=multi-threaded,localhost-testing -- --test-threads=1
      - uses: actions/github-script@v2
        if: failure()
        with:
          script: |
            const { owner, repo } = context.repo
            console.log('Cancelling ...');
            const run_id = "${{ github.run_id }}";
            await github.actions.cancelWorkflowRun({ owner, repo, run_id });
            return 'stop'
          result-encoding: string

  nat:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-2019 ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - uses: Avarok-Cybersecurity/gh-actions-deps@alpha04
      - run: cargo test --package netbeam
      - run: cargo test --package hyxe_wire --features=localhost-testing -- --test-threads=1
      - uses: actions/github-script@v2
        if: failure()
        with:
          script: |
            const { owner, repo } = context.repo
            console.log('Cancelling ...');
            const run_id = "${{ github.run_id }}";
            await github.actions.cancelWorkflowRun({ owner, repo, run_id });
            return 'stop'
          result-encoding: string

  lusna_sdk:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-2019 ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 100
    steps:
      - uses: Avarok-Cybersecurity/gh-actions-deps@alpha04
      - run: cargo test --package lusna_sdk --features=localhost-testing -- --test-threads=1
      - uses: actions/github-script@v2
        if: failure()
        with:
          script: |
            const { owner, repo } = context.repo
            console.log('Cancelling ...');
            const run_id = "${{ github.run_id }}";
            await github.actions.cancelWorkflowRun({ owner, repo, run_id });
            return 'stop'
          result-encoding: string
  coverage:
    runs-on: ubuntu-latest
    timeout-minutes: 80
    steps:
      - uses: Avarok-Cybersecurity/gh-actions-deps@alpha04
      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        with:
          args: '--timeout 3600 --packages lusna_sdk --features=localhost-testing -- --test-threads=1'
      - uses: codecov/codecov-action@v2
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          files: cobertura.xml
      - uses: actions/github-script@v2
        if: failure()
        with:
          script: |
            const { owner, repo } = context.repo
            console.log('Cancelling ...');
            const run_id = "${{ github.run_id }}";
            await github.actions.cancelWorkflowRun({ owner, repo, run_id });
            return 'stop'
          result-encoding: string
 # scanning:
 #   name: GitGuardian scan
 #   runs-on: ubuntu-latest
 #   steps:
 #     - name: Checkout
 #       uses: actions/checkout@v2
 #       with:
 #         fetch-depth: 0 # fetch all history so multiple commits can be scanned
 #     - name: GitGuardian scan
 #       uses: GitGuardian/ggshield-action@master
 #       env:
 #         GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
 #         GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
 #         GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
 #         GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
 #         GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
 #     - uses: actions/github-script@v2
 #       if: failure()
 #       with:
 #         script: |
 #           const { owner, repo } = context.repo
 #           console.log('Cancelling ...');
 #           const run_id = "${{ github.run_id }}";
 #           await github.actions.cancelWorkflowRun({ owner, repo, run_id });
 #           return 'stop'
 #         result-encoding: string