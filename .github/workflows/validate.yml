name: Validate PR
on:
  workflow_call:

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  # 40 MiB stack
  RUST_MIN_STACK: 40971520
  RUST_LOG: "citadel=warn"

jobs:
  core_libs:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 80
    steps:
      - uses: shogo82148/actions-setup-mysql@v1
        if: startsWith(matrix.os, 'ubuntu')
        with:
          mysql-version: '8.0'
          root-password: 'password'
      - name: Setup Postgres database (1)
        if: startsWith(matrix.os, 'ubuntu')
        uses: Daniel-Marynicz/postgresql-action@master
        with:
          postgres_image_tag: latest
          app_user: nologik
          app_user_password: password
          app_db: hyxewave hyxewave2
      - name: Add mysql databases
        if: startsWith(matrix.os, 'ubuntu')
        run: mysql -uroot -h127.0.0.1 -ppassword -e 'CREATE DATABASE hyxewave; CREATE DATABASE hyxewave2; set global max_connections = 1000;'
      - name: Augment connection size for psql
        if: startsWith(matrix.os, 'ubuntu')
        run:  psql -c 'ALTER SYSTEM SET max_connections TO 1000' postgresql://postgres:postgres@localhost/hyxewave && psql -c 'ALTER SYSTEM SET max_connections TO 1000' postgresql://postgres:postgres@localhost/hyxewave2
      - name: Add sqlite databases
        if: startsWith(matrix.os, 'ubuntu')
        run: touch /home/runner/hyxewave.db && touch /home/runner/hyxewave2.db
      - name: Start Redis
        if: startsWith(matrix.os, 'ubuntu')
        uses: supercharge/redis-github-action@1.8.0
        with:
          redis-version: 4
          redis-port: 6379
      - uses: Avarok-Cybersecurity/gh-actions-deps@master
      - uses: taiki-e/install-action@nextest
      - run: cargo nextest run --package citadel_pqcrypto --package citadel_crypt
      - name: Run holistic user library + SQL backend
        if: startsWith(matrix.os, 'ubuntu')
        env:
          TESTING_SQL_SERVER_ADDR_SERVER: "mysql://root:password@localhost/hyxewave,postgres://nologik:password@localhost/hyxewave,sqlite:/home/runner/hyxewave.db,redis://127.0.0.1:6379/1"
          TESTING_SQL_SERVER_ADDR_CLIENT: "mysql://root:password@localhost/hyxewave2,postgres://nologik:password@localhost/hyxewave2,sqlite:/home/runner/hyxewave2.db,redis://127.0.0.1:6379/2"
        run: cargo nextest run --package citadel_user --features sql,redis
      - name: Run minimal user library + SQL backend
        if: startsWith(matrix.os, 'windows') || startsWith(matrix.os, 'macos')
        env:
          SKIP_EXT_BACKENDS: "true"
        run: cargo nextest run --package citadel_user --features localhost-testing
      - run: cargo nextest run --features=localhost-testing,multi-threaded --package citadel_proto
        if: ${{ !startsWith(matrix.os, 'windows') }}
      - run: cargo nextest run --features=localhost-testing,multi-threaded,vendored --package citadel_proto
        if: ${{ startsWith(matrix.os, 'windows') }}

  nat:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
      - uses: Avarok-Cybersecurity/gh-actions-deps@master
      - uses: taiki-e/install-action@nextest
      - run: cargo nextest run --package netbeam
      - name: Run basic localhost NAT tests
        if: ${{ !startsWith(matrix.os, 'windows') }}
        run: cargo nextest run --package citadel_wire --features=localhost-testing
      - name: Run basic localhost NAT tests (windows only)
        if: startsWith(matrix.os, 'windows')
        run: cargo nextest run --package citadel_wire --features=localhost-testing,vendored

  citadel_sdk:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 50
    steps:
      - uses: Avarok-Cybersecurity/gh-actions-deps@master
      - uses: taiki-e/install-action@nextest
      - name: Single-threaded testing
        run: cargo nextest run --package citadel_sdk --features=localhost-testing,localhost-testing-loopback-only
        if: ${{ !startsWith(matrix.os, 'windows') }}
      - name: Single-threaded testing (windows only)
        run: cargo nextest run --package citadel_sdk --features=localhost-testing,localhost-testing-loopback-only,vendored
        if: startsWith(matrix.os, 'windows')
      - name: Multi-threaded testing
        if: startsWith(matrix.os, 'ubuntu')
        run: cargo nextest run --package citadel_sdk --features=multi-threaded,localhost-testing,localhost-testing-loopback-only

  citadel_sdk_release:
    strategy:
      matrix:
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 50
    steps:
      - uses: Avarok-Cybersecurity/gh-actions-deps@master
      - uses: taiki-e/install-action@nextest
      - name: Single-threaded testing
        run: cargo nextest run --package citadel_sdk --features=localhost-testing,localhost-testing-loopback-only --release
      - name: Multi-threaded testing
        run: cargo nextest run --package citadel_sdk --features=multi-threaded,localhost-testing,localhost-testing-loopback-only --release

  misc_checks:
    name: miscellaneous
    runs-on: ubuntu-latest
    steps:
      - uses: Avarok-Cybersecurity/gh-actions-deps@master
#      - name: Install Valgrind
#        run: |
#          sudo apt-get update -y
#          sudo apt-get install -y valgrind
#      # Compile tests
#      - name: cargo build secmem_bytes_test
#        run: cargo build --bin secmem_bytes_test
      # Run with valgrind
#      - name: Run valgrind secmem_bytes
#        run: valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all ./target/debug/secmem_bytes_test
#      - name: cargo build secmem_string_test
#        run: cargo build --bin secmem_string_test
      # Run with valgrind
#      - name: Run valgrind secmem_string
#        run: valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all ./target/debug/secmem_string_test
      - run: cargo check --package citadel_sdk --release --features=webrtc,sql,redis,multi-threaded
      - run: cargo install --locked cargo-deny && cargo deny check all
      - run: rustup component add clippy-preview
      - run: cargo clippy --features=webrtc,sql,redis,multi-threaded -- -D warnings
      - run: cargo clippy --features=webrtc,sql,redis,multi-threaded --release -- -D warnings
      - run: cargo clippy --features=webrtc,sql,redis -- -D warnings
      - run: cargo clippy --features=webrtc,sql,redis --release -- -D warnings
      - run: cargo clippy --tests --examples -- -D warnings
      - run: cargo fmt --check
      - run: RUSTDOCFLAGS="-D warnings" cargo make docs
      - run: cargo test --package citadel_sdk --doc
      #      - name: cargo build pq_kems
#        run: cargo build --bin pq_kems_test
#      # Run with valgrind
#      - name: Run valgrind pq_kems
#        run: valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all ./target/debug/pq_kems_test

#  features_check:
#    name: check features
#    runs-on: ubuntu-latest
#    steps:
#      - uses: Avarok-Cybersecurity/gh-actions-deps@master
#      - name: Install features checker
#        run: cargo install cargo-all-features
#      - name: Check all feature combinations
#        run: cargo check-all-features --package citadel_sdk

  coverage:
    runs-on: macos-latest
    timeout-minutes: 80
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        run: rustup toolchain install stable --component llvm-tools-preview
      - uses: taiki-e/install-action@nextest
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - uses: Swatinem/rust-cache@v1
      - name: Run llvm-cov nextest
        env:
          SKIP_EXT_BACKENDS: "true"
        run: cargo llvm-cov nextest --features=filesystem,localhost-testing,multi-threaded -p citadel_sdk -p citadel_user -p citadel_crypt -p citadel_pqcrypto -p citadel_wire -p netbeam -p async_ip --lcov --output-path ${GITHUB_WORKSPACE}/lcov.info --ignore-filename-regex="firebase-rtdb/src/lib.rs|netbeam/src/sync/operations/net_join.rs|netbeam/src/sync/operations/net_select.rs|citadel_sdk/src/test_common.rs|citadel_wire/src/upnp_handler.rs"
      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ env.GITHUB_WORKSPACE }}/lcov.info
  docker_nat_client_server:
    runs-on: ubuntu-latest
    strategy:
      matrix:
          nat_type_client_a:
              - "full_cone"
              - "address_restricted"
              - "port_restricted"
              - "symmetric"
    timeout-minutes: 60
    env:
      NAT_TYPE_CLIENT_A: ${{ matrix.nat_type_client_a }}
    steps:
      - uses: actions/checkout@v4
      - name: Maximize build space
        uses: jlumbroso/free-disk-space@main
      - run: docker compose -f ./docker/client_server.yml up --abort-on-container-exit --exit-code-from client_a
  docker_nat_p2p:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        nat_type_peer_a:
          - "full_cone"
          - "address_restricted"
          - "port_restricted"
          - "symmetric"
        nat_type_peer_b:
          - "full_cone"
          - "address_restricted"
          - "port_restricted"
          - "symmetric"
    timeout-minutes: 60
    env:
      NAT_TYPE_PEER_A: ${{ matrix.nat_type_peer_a }}
      NAT_TYPE_PEER_B: ${{ matrix.nat_type_peer_b }}
    steps:
      - uses: actions/checkout@v4
      - name: Maximize build space
        uses: jlumbroso/free-disk-space@main
      - if: ${{ ! (matrix.nat_type_peer_a == 'symmetric' && matrix.nat_type_peer_b == 'symmetric') }}
        run: docker-compose -f ./docker/peer_to_peer.yml up --abort-on-container-exit --exit-code-from peer_a
        shell: bash
