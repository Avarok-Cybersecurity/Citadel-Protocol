Index: hyxe_net/src/hdp/hdp_session.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>use std::net::IpAddr;\r\n//use async_std::prelude::*;\r\nuse bytes::{Bytes, BytesMut};\r\nuse futures::{SinkExt, StreamExt, TryStreamExt, Future, Stream};\r\n//use futures::channel::mpsc::{unbounded, UnboundedReceiver, UnboundedSender, channel, TrySendError};\r\nuse tokio::sync::mpsc::{unbounded_channel, UnboundedReceiver, UnboundedSender, channel, error::SendError};\r\nuse tokio::net::{TcpStream, UdpSocket};\r\nuse tokio::time::Instant;\r\nuse tokio_util::codec::LengthDelimitedCodec;\r\n\r\nuse ez_pqcrypto::prelude::*;\r\nuse hyxe_crypt::drill::SecurityLevel;\r\nuse hyxe_nat::udp_traversal::hole_punched_udp_socket_addr::HolePunchedSocketAddr;\r\nuse hyxe_user::account_manager::AccountManager;\r\nuse hyxe_user::client_account::ClientNetworkAccount;\r\n\r\nuse crate::constants::{CODEC_BUFFER_CAPACITY, DEFAULT_PQC_ALGORITHM, INITIAL_RECONNECT_LOCKOUT_TIME_NS, LOGIN_EXPIRATION_TIME, DRILL_UPDATE_FREQUENCY_LOW_BASE, KEEP_ALIVE_INTERVAL_MS, FIREWALL_KEEP_ALIVE_UDP, GROUP_EXPIRE_TIME_MS, HDP_HEADER_BYTE_LEN};\r\nuse crate::error::NetworkError;\r\nuse crate::hdp::hdp_packet::{HdpPacket, packet_flags};\r\nuse crate::hdp::hdp_packet_crafter::{self, GroupTransmitter};\r\n//use futures_codec::Framed;\r\nuse crate::hdp::hdp_packet_processor::{self, GroupProcessorResult, PrimaryProcessorResult};\r\nuse crate::hdp::hdp_packet_processor::includes::{SocketAddr, Duration};\r\nuse crate::hdp::hdp_server::{HdpServerResult, Ticket, HdpServerRemote};\r\nuse crate::hdp::hdp_session_manager::HdpSessionManager;\r\nuse crate::hdp::outbound_sender::{OutboundUdpSender, KEEP_ALIVE};\r\nuse crate::hdp::state_container::{OutboundTransmitterContainer, StateContainerInner, VirtualConnectionType, VirtualTargetType, GroupKey, OutboundFileTransfer, FileKey, StateContainer, GroupSender};\r\nuse crate::hdp::time::TransferStats;\r\nuse crate::proposed_credentials::ProposedCredentials;\r\nuse hyxe_nat::hypernode_type::HyperNodeType;\r\nuse hyxe_nat::time_tracker::TimeTracker;\r\nuse futures::stream::FuturesUnordered;\r\nuse std::pin::Pin;\r\nuse crate::hdp::session_queue_handler::{SessionQueueWorker, QueueWorkerTicket, PROVISIONAL_CHECKER, QueueWorkerResult, DRILL_REKEY_WORKER, KEEP_ALIVE_CHECKER, FIREWALL_KEEP_ALIVE};\r\nuse std::hint::black_box;\r\nuse crate::hdp::state_subcontainers::drill_update_container::calculate_update_frequency;\r\nuse std::sync::Arc;\r\nuse hyxe_user::re_imports::scramble_encrypt_file;\r\nuse hyxe_crypt::net::crypt_splitter::GroupSenderDevice;\r\nuse crate::hdp::file_transfer::VirtualFileMetadata;\r\nuse std::path::PathBuf;\r\nuse crate::hdp::hdp_packet_processor::peer::group_broadcast::GroupBroadcast;\r\nuse crate::hdp::hdp_packet_crafter::peer_cmd::ENDPOINT_ENCRYPTION_OFF;\r\nuse atomic::{Atomic, Ordering};\r\nuse std::sync::atomic::AtomicBool;\r\nuse crate::inner_arg::{InnerParameterMut, ExpectedInnerTargetMut};\r\nuse hyxe_crypt::sec_bytes::SecBuffer;\r\n//use crate::define_struct;\r\n\r\n// Defines the primary structure which wraps the inner device\r\ndefine_outer_struct_wrapper!(HdpSession, HdpSessionInner);\r\n\r\n/*\r\n/// Allows a connection stream to be worked on by a single worker\r\npub struct HdpSession {\r\n    pub inner: Rc<RefCell<HdpSessionInner>>\r\n}\r\n*/\r\n\r\n//define_struct!(HdpSession, HdpSessionInner);\r\n\r\n/// Structure for holding and keep track of packets, as well as basic connection information\r\n#[allow(unused)]\r\npub struct HdpSessionInner {\r\n    pub(super) implicated_cid: Arc<Atomic<Option<u64>>>,\r\n    pub(super) kernel_ticket: Ticket,\r\n    pub(super) remote_peer: SocketAddr,\r\n    pub(super) cnac: Option<ClientNetworkAccount>,\r\n    pub(super) wave_socket_loader: Option<tokio::sync::oneshot::Sender<Vec<(UdpSocket, HolePunchedSocketAddr)>>>,\r\n    // Sends results directly to the kernel\r\n    pub(super) kernel_tx: UnboundedSender<HdpServerResult>,\r\n    pub(super) to_primary_stream: Option<UnboundedSender<Bytes>>,\r\n    pub(super) to_wave_ports: Option<OutboundUdpSender>,\r\n    pub(super) post_quantum: Option<Arc<PostQuantumContainer>>,\r\n    // Setting this will determine what algorithm is used during the DO_CONNECT stage\r\n    pub(super) pqc_algorithm: Option<u8>,\r\n    pub(super) session_manager: HdpSessionManager,\r\n    pub(super) state: SessionState,\r\n    pub(super) state_container: StateContainer,\r\n    pub(super) account_manager: AccountManager,\r\n    pub(super) time_tracker: TimeTracker,\r\n    pub(super) local_node_type: HyperNodeType,\r\n    pub(super) remote_node_type: Option<HyperNodeType>,\r\n    pub(super) local_bind_addr: SocketAddr,\r\n    // if this is enabled, then UDP won't be used\r\n    pub(super) tcp_only: bool,\r\n    pub(super) hdp_nodelay: bool,\r\n    pub(super) security_level: SecurityLevel,\r\n    pub(super) current_group_id: u64,\r\n    pub(super) transfer_stats: TransferStats,\r\n    pub(super) is_server: bool,\r\n    pub(super) needs_close_message: Arc<AtomicBool>,\r\n    pub(super) rolling_object_idx: u32,\r\n    pub(super) queue_worker: SessionQueueWorker\r\n}\r\n\r\n/// allows each session worker to check the state of the session\r\n#[derive(Copy, Clone, PartialEq, Debug)]\r\npub enum SessionState {\r\n    /// In impersonal mode, the primary socket may receive a new stream. This category implies that\r\n    /// the next packet should be a welcome packet with information implying if it is already registered\r\n    /// or if it needs to register\r\n    SocketJustOpened,\r\n    /// If the endpoint does not have an implicated CID with the current node, then registration must occur.\r\n    /// This will imply the use of standard encryption to get the hyperencrypted drill over the wire\r\n    NeedsRegister,\r\n    /// The system just initiated, and needs to begin the session\r\n    NeedsConnect,\r\n    /// The system has begun the connection process, and is now waiting for a response from the remote server\r\n    ConnectionProcess,\r\n    /// The hypernode is connected to the remote peer, and can now send information\r\n    Connected,\r\n    /// The hypernode is disconnected. Data cannot flow through\r\n    Disconnected,\r\n}\r\n\r\nimpl HdpSession {\r\n    /// Creates a new session.\r\n    /// 'implicated_cid': Supply None if you expect to register. If Some, will check the account manager\r\n    pub fn new(hdp_remote: HdpServerRemote, pqc_algorithm: Option<u8>, local_bind_addr: SocketAddr, local_node_type: HyperNodeType, kernel_tx: UnboundedSender<HdpServerResult>, session_manager: HdpSessionManager, account_manager: AccountManager, remote_peer: SocketAddr, time_tracker: TimeTracker, implicated_cid: Option<u64>, kernel_ticket: Ticket, security_level: SecurityLevel, hdp_nodelay: bool, tcp_only: bool) -> Option<Self> {\r\n        let cnac = if let Some(implicated_cid) = implicated_cid {\r\n            if let Some(cnac) = account_manager.get_client_by_cid(implicated_cid) {\r\n                Some(cnac)\r\n            } else {\r\n                log::error!(\"Supplied an implicated CID, but does not exist within the account manager. Make sure to register\");\r\n                None\r\n            }\r\n        } else {\r\n            None\r\n        };\r\n\r\n        if implicated_cid.is_some() && cnac.is_none() {\r\n            return None;\r\n        }\r\n\r\n        let mut state = SessionState::NeedsConnect;\r\n\r\n        let post_quantum = if cnac.is_none() {\r\n            log::warn!(\"The client is either missing or non-specified; setting state to NeedsRegister and creating a new post quantum container\");\r\n            state = SessionState::NeedsRegister;\r\n            //Some(Rc::new(PostQuantumContainer::new_alice(Some(DEFAULT_PQC_ALGORITHM))))\r\n            None\r\n        } else {\r\n            Some(Arc::new(cnac.as_ref().unwrap().get_post_quantum_container().unwrap()))\r\n        };\r\n\r\n        let timestamp = time_tracker.get_global_time_ns();\r\n\r\n        let inner = HdpSessionInner {\r\n            pqc_algorithm,\r\n            tcp_only,\r\n            local_bind_addr,\r\n            to_wave_ports: None,\r\n            wave_socket_loader: None,\r\n            local_node_type,\r\n            remote_node_type: None,\r\n            security_level,\r\n            kernel_tx: kernel_tx.clone(),\r\n            implicated_cid: Arc::new(Atomic::new(implicated_cid)),\r\n            time_tracker,\r\n            kernel_ticket,\r\n            post_quantum,\r\n            to_primary_stream: None,\r\n            rolling_object_idx: 1,\r\n            state_container: StateContainer::from(StateContainerInner::new(kernel_tx, hdp_remote)),\r\n            session_manager,\r\n            remote_peer,\r\n            cnac,\r\n            state,\r\n            account_manager,\r\n            hdp_nodelay,\r\n            current_group_id: 0,\r\n            transfer_stats: TransferStats::new(timestamp, 0),\r\n            is_server: false,\r\n            needs_close_message: Arc::new(AtomicBool::new(true)),\r\n            queue_worker: SessionQueueWorker::new()\r\n        };\r\n\r\n        Some(Self::from(inner))\r\n    }\r\n\r\n    /// During impersonal mode, a new connection may come inbound. Unlike above in Self::new, we do not yet have the implicated cid nor nid.\r\n    /// We must then expect a welcome packet\r\n    ///\r\n    /// When this is called, the connection is implied to be in impersonal mode. As such, the calling closure should have a way of incrementing\r\n    /// the provisional ticket.\r\n    pub fn new_incoming(hdp_remote: HdpServerRemote, local_bind_addr: SocketAddr, local_node_type: HyperNodeType, kernel_tx: UnboundedSender<HdpServerResult>, session_manager: HdpSessionManager, account_manager: AccountManager, time_tracker: TimeTracker, remote_peer: SocketAddr, provisional_ticket: Ticket, hdp_nodelay: bool) -> Self {\r\n        let timestamp = time_tracker.get_global_time_ns();\r\n\r\n        let inner = HdpSessionInner {\r\n            rolling_object_idx: 1,\r\n            pqc_algorithm: None,\r\n            tcp_only: false,\r\n            local_bind_addr,\r\n            to_wave_ports: None,\r\n            wave_socket_loader: None,\r\n            local_node_type,\r\n            remote_node_type: None,\r\n            security_level: SecurityLevel::LOW,\r\n            implicated_cid: Arc::new(Atomic::new(None)),\r\n            time_tracker,\r\n            kernel_ticket: provisional_ticket,\r\n            remote_peer,\r\n            cnac: None,\r\n            kernel_tx: kernel_tx.clone(),\r\n            session_manager: session_manager.clone(),\r\n            post_quantum: None,\r\n            state_container: StateContainer::from(StateContainerInner::new(kernel_tx, hdp_remote)),\r\n            to_primary_stream: None,\r\n            state: SessionState::SocketJustOpened,\r\n            account_manager,\r\n            hdp_nodelay,\r\n            current_group_id: 0,\r\n            transfer_stats: TransferStats::new(timestamp, 0),\r\n            is_server: true,\r\n            needs_close_message: Arc::new(AtomicBool::new(true)),\r\n            queue_worker: SessionQueueWorker::new()\r\n        };\r\n\r\n        Self { inner: create_inner!(inner) }\r\n    }\r\n\r\n    /// Once the [HdpSession] is created, it can then be executed to begin handling a periodic connection handler.\r\n    /// This will automatically stop running once the internal state is set to Disconnected\r\n    pub async fn execute(&self, tcp_stream: TcpStream) -> Result<Option<u64>, (NetworkError, Option<u64>)> {\r\n        log::info!(\"HdpSession is executing ...\");\r\n        let this = self.clone();\r\n        let this_outbound = self.clone();\r\n        let this_inbound = self.clone();\r\n        let this_socket_loader = self.clone();\r\n        let this_queue_worker = self.clone();\r\n\r\n        let sock = tcp_stream.peer_addr().unwrap();\r\n\r\n        // With access to the primary stream, we can now communicate through it from this session\r\n        let framed = LengthDelimitedCodec::builder()\r\n            .length_field_offset(0) // default value\r\n            .length_field_length(2)\r\n            .length_adjustment(0) // default value\r\n            // `num_skip` is not needed, the default is to skip\r\n            .new_framed(tcp_stream);\r\n        let (writer, reader) = framed.split();\r\n\r\n        let (primary_outbound_tx, primary_outbound_rx) = unbounded_channel();\r\n\r\n        let mut this_ref = inner_mut!(this);\r\n\r\n        let sess_id = this_ref.kernel_ticket;\r\n        this_ref.to_primary_stream = Some(primary_outbound_tx.clone());\r\n\r\n        let to_kernel_tx_clone = this_ref.kernel_tx.clone();\r\n\r\n        let timestamp = this_ref.time_tracker.get_global_time_ns();\r\n        let local_nid = this_ref.account_manager.get_local_nid();\r\n        let cnac_opt = this_ref.cnac.clone();\r\n        let implicated_cid = this_ref.implicated_cid.clone();\r\n        let needs_close_message = this_ref.needs_close_message.clone();\r\n\r\n\r\n        // setup the socket-loader\r\n        let (socket_loader_tx, socket_loader_rx) = tokio::sync::oneshot::channel();\r\n        this_ref.wave_socket_loader = Some(socket_loader_tx);\r\n\r\n        // Ensure the tx forwards to the writer\r\n        let writer_future = Self::outbound_stream(primary_outbound_rx, writer);\r\n        let reader_future = Self::execute_inbound_stream(reader, this_inbound);\r\n        //let timer_future = Self::execute_timer(this.clone());\r\n        let queue_worker_future = Self::execute_queue_worker(this_queue_worker);\r\n        let socket_loader_future = Self::socket_loader(this_socket_loader, to_kernel_tx_clone.clone(), socket_loader_rx);\r\n\r\n        let handle_zero_state = Self::handle_zero_state(primary_outbound_tx.clone(), this_outbound, this_ref.state, timestamp, local_nid, cnac_opt);\r\n        std::mem::drop(this_ref);\r\n\r\n        let session_future = FuturesUnordered::new();\r\n        session_future.push(Box::pin(writer_future) as Pin<Box<dyn Future<Output=Result<(), NetworkError>>>>);\r\n        session_future.push(Box::pin(reader_future));\r\n        session_future.push(Box::pin(queue_worker_future));\r\n        // TODO: if local node type is pure_server, don't add the below\r\n        session_future.push(Box::pin(socket_loader_future));\r\n\r\n        //let session_future = futures::future::try_join4(writer_future, reader_future, timer_future, socket_loader_future);\r\n        if let Err(err) = handle_zero_state.await {\r\n            log::error!(\"Unable to proceed past session zero-state. Stopping session\");\r\n            return Err((err, implicated_cid.load(Ordering::SeqCst)));\r\n        }\r\n\r\n        session_future.try_collect::<Vec<()>>().await.map(|_| {\r\n            implicated_cid.load(Ordering::SeqCst)\r\n        }).map_err(|err| {\r\n            let ticket = sess_id;\r\n            let reason = err.to_string();\r\n            let needs_close_message = needs_close_message.load(Ordering::Relaxed);\r\n            let cid = implicated_cid.load(Ordering::Relaxed);\r\n\r\n            log::info!(\"Session {} connected to {} is ending! Reason: {}. Needs close message? {}\", ticket.0, sock, reason.as_str(), needs_close_message);\r\n\r\n            if needs_close_message {\r\n                let result = HdpServerResult::Disconnect(ticket, cid.unwrap_or(0), false, None, reason);\r\n                // false indicates a D/C caused by a non-dc subroutine\r\n                let _ = to_kernel_tx_clone.send(result);\r\n            }\r\n\r\n            (err, cid)\r\n        })\r\n    }\r\n\r\n    /// Before going through the usual loopy business, check to see if we need to initiate either a stage0 REGISTER or CONNECT packet\r\n    async fn handle_zero_state(to_outbound: UnboundedSender<Bytes>, session: HdpSession, state: SessionState, timestamp: i64, local_nid: u64, cnac: Option<ClientNetworkAccount>) -> Result<(), NetworkError> {\r\n        match state {\r\n            SessionState::NeedsRegister => {\r\n                log::info!(\"Beginning registration subroutine!\");\r\n                let session_ref = inner!(session);\r\n                let potential_cid_alice = session_ref.account_manager.get_local_nac().reserve_cid();\r\n                let new_pqc = PostQuantumContainer::new_alice(Some(session_ref.pqc_algorithm.unwrap_or(DEFAULT_PQC_ALGORITHM)));\r\n                let mut state_container = inner_mut!(session_ref.state_container);\r\n                state_container.register_state.last_packet_time = Some(Instant::now());\r\n                let alice_public_key = new_pqc.get_public_key();\r\n\r\n                let stage0_register_packet = crate::hdp::hdp_packet_crafter::do_register::craft_stage0(DEFAULT_PQC_ALGORITHM, timestamp, local_nid, alice_public_key, potential_cid_alice);\r\n                if let Err(err) = to_outbound.send(stage0_register_packet).map_err(|_| NetworkError::InternalError(\"Writer stream corrupted\")) {\r\n                    return Err(err);\r\n                }\r\n\r\n                state_container.register_state.pqc = Some(new_pqc);\r\n                log::info!(\"Successfully sent stage0 register packet outbound\");\r\n            }\r\n\r\n            SessionState::NeedsConnect => {\r\n                log::info!(\"Beginning pre-connect subroutine!\");\r\n                let session_ref = inner!(session);\r\n                let tcp_only = session_ref.tcp_only;\r\n                let timestamp = session_ref.time_tracker.get_global_time_ns();\r\n                let ref latest_local_drill = cnac.unwrap().get_drill(None).unwrap();\r\n                let syn = hdp_packet_crafter::pre_connect::craft_syn(latest_local_drill, tcp_only, timestamp);\r\n                let mut state_container = inner_mut!(session_ref.state_container);\r\n                state_container.pre_connect_state.last_stage = packet_flags::cmd::aux::do_preconnect::SYN_ACK;\r\n\r\n                if let Err(err) = to_outbound.send(syn).map_err(|_| NetworkError::InternalError(\"Writer stream corrupted\")) {\r\n                    return Err(err);\r\n                }\r\n\r\n                log::info!(\"Successfully sent SYN pre-connect packet\");\r\n            }\r\n\r\n            // This implies this node received a new incoming connection. It is up to the other node, Alice, to send a stage 0 packet\r\n            SessionState::SocketJustOpened => {\r\n                log::info!(\"No actions needed on primary TCP port; beginning outbound listening subroutine ...\");\r\n                // If somebody makes a connection to this node, but doesn't send anything, we need a way to remove\r\n                // such a stale connection. By setting the value below, we ensure the possibility that the session\r\n                // timer removes it\r\n                inner_mut!(inner_mut!(session).state_container).connect_state.last_packet_time = Some(Instant::now());\r\n            }\r\n\r\n            _ => {\r\n                log::error!(\"Invalid initial state. Check program logic\");\r\n                std::process::exit(-1);\r\n            }\r\n        }\r\n\r\n        Ok(())\r\n    }\r\n\r\n    async fn socket_loader(this: HdpSession, to_kernel: UnboundedSender<HdpServerResult>, receiver: tokio::sync::oneshot::Receiver<Vec<(UdpSocket, HolePunchedSocketAddr)>>) -> Result<(), NetworkError> {\r\n        let sockets = receiver.await.map_err(|err| NetworkError::Generic(err.to_string()))?;\r\n\r\n        let mut sess = inner_mut!(this);\r\n        let local_is_server = sess.is_server;\r\n\r\n        //log::info!(\"[Oneshot channel] received sockets. Now loading ...\");\r\n        let mut sinks = Vec::with_capacity(sockets.len());\r\n        let (outbound_sender_tx, outbound_sender_rx) = unbounded_channel();\r\n        let udp_sender = OutboundUdpSender::new(outbound_sender_tx, sockets.len());\r\n\r\n        sess.to_wave_ports = Some(udp_sender.clone());\r\n        inner_mut!(sess.state_container).udp_sender = Some(udp_sender);\r\n        std::mem::drop(sess);\r\n\r\n        let unordered_futures = futures::stream::FuturesUnordered::new();\r\n        // we supply the natted ip since it is where we expect to receive packets\r\n        // whether local is server or not, we should expect to receive packets from natted\r\n        let hole_punched_addr_ip = sockets[0].1.natted.ip();\r\n        let mut hole_punched_addrs = Vec::with_capacity(sockets.len());\r\n\r\n        for (socket, hole_punched_addr) in sockets {\r\n            let local_bind_addr = socket.local_addr().unwrap();\r\n\r\n            let codec = super::codec::BytesCodec::new(CODEC_BUFFER_CAPACITY);\r\n            //let framed = UdpFramed::new(socket, codec);\r\n            //let framed = tokio_util::codec::Framed::new(socket, codec);\r\n            let framed = crate::hdp::udp_framed::UdpFramed::new(socket, codec);\r\n            let (writer, reader) = framed.split();\r\n\r\n            unordered_futures.push(Self::listen_wave_port(this.clone(), to_kernel.clone(), hole_punched_addr_ip, local_bind_addr.port(), reader));\r\n            sinks.push(writer);\r\n            hole_punched_addrs.push(hole_punched_addr);\r\n            log::info!(\"Server established UDP Port {}\", local_bind_addr);\r\n        }\r\n\r\n        //futures.push();\r\n        let udp_sender_future = Self::wave_outbound_sender(local_is_server, outbound_sender_rx, hole_punched_addrs, to_kernel, sinks);\r\n\r\n        futures::future::try_join(unordered_futures.try_collect::<Vec<()>>(), udp_sender_future).await\r\n            .map(|_| ()).map_err(|err| {\r\n            log::error!(\"UDP subsystem ending. Reason: {}\", err.to_string());\r\n            err\r\n        })\r\n    }\r\n\r\n    async fn outbound_stream<S: SinkExt<Bytes> + Unpin>(mut primary_outbound_rx: UnboundedReceiver<Bytes>, mut writer: S) -> Result<(), NetworkError> {\r\n        log::info!(\"Executing outbound stream\");\r\n\r\n        while let Some(outbound_packet) = primary_outbound_rx.next().await {\r\n            log::info!(\"outbound_stream sending object w/ {} bytes to TCP stream (using LengthDelimitedCodec)\", outbound_packet.len());\r\n            if let Err(err) = writer.send(outbound_packet).map_err(|_| NetworkError::InternalError(\"Writer stream corrupted\")).await {\r\n                log::error!(\"Err: {:?}\", &err);\r\n                return Err(err);\r\n            }\r\n        }\r\n\r\n        log::error!(\"Ending outbound stream\");\r\n\r\n        Err(NetworkError::InternalError(\"Ending\"))\r\n    }\r\n\r\n    async fn execute_inbound_stream<S: Stream<Item=Result<BytesMut, std::io::Error>> + Unpin>(mut reader: S, ref this_main: HdpSession) -> Result<(), NetworkError> {\r\n        log::info!(\"HdpSession async inbound-stream subroutine executed\");\r\n        let borrow = inner!(this_main);\r\n        //let borrow = this_main.inner.borrow();\r\n        let ref remote_peer = borrow.remote_peer.clone();\r\n        let local_primary_port = borrow.local_bind_addr.port();\r\n        let _kernel_ticket = borrow.kernel_ticket;\r\n        let implicated_cid = borrow.implicated_cid.clone();\r\n        let ref kernel_tx = borrow.kernel_tx.clone();\r\n        let ref mut primary_stream = borrow.to_primary_stream.clone().unwrap();\r\n\r\n        std::mem::drop(borrow);\r\n\r\n        loop {\r\n            match reader.next().await {\r\n                Some(Err(err)) => {\r\n                    const WINDOWS_FORCE_SHUTDOWN: i32 = 10054;\r\n                    const RST: i32 = 104;\r\n\r\n                    let error = err.raw_os_error().unwrap_or(-1);\r\n                    if error != WINDOWS_FORCE_SHUTDOWN && error != RST {\r\n                        log::error!(\"primary port reader error {}: {}\", error, err.to_string());\r\n                    }\r\n\r\n                    return Err(NetworkError::Generic(err.to_string()));\r\n                }\r\n\r\n                Some(Ok(packet)) => {\r\n                    log::info!(\"Primary port received packet with {} bytes+header or {} payload bytes ..\", packet.len(), packet.len() - HDP_HEADER_BYTE_LEN);\r\n                    match hdp_packet_processor::raw_primary_packet::process(implicated_cid.load(Ordering::Relaxed), this_main, remote_peer.clone(), local_primary_port, packet) {\r\n                        PrimaryProcessorResult::ReplyToSender(return_packet) => {\r\n                            log::info!(\"Running ReplyToSender w/ packet of {} bytes\", return_packet.len());\r\n                            Self::send_to_primary_stream_closure(primary_stream, kernel_tx, return_packet, None);\r\n                        }\r\n\r\n                        PrimaryProcessorResult::FinalReply(last_packet_of_sess) => {\r\n                            Self::send_to_primary_stream_closure(primary_stream, kernel_tx, last_packet_of_sess, None);\r\n                            return Err(NetworkError::InternalError(\"ending inbound stream\"));\r\n                        }\r\n\r\n                        PrimaryProcessorResult::EndSession(reason) => {\r\n                            return Err(NetworkError::InternalError(reason));\r\n                        }\r\n\r\n                        PrimaryProcessorResult::Void => {\r\n                            // this implies that the packet processor found no reason to return a message\r\n                        }\r\n                    }\r\n                }\r\n\r\n                _ => {\r\n                    return Err(NetworkError::InternalError(\"ending inbound stream\"));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fn send_to_primary_stream_closure(to_primary_stream: &UnboundedSender<Bytes>, kernel_tx: &UnboundedSender<HdpServerResult>, msg: Bytes, ticket: Option<Ticket>) {\r\n        if let Err(err) = to_primary_stream.send(msg) {\r\n            kernel_tx.send(HdpServerResult::InternalServerError(ticket, err.to_string())).expect(\"Unable to send message to kernel ...\");\r\n        }\r\n    }\r\n\r\n    async fn execute_queue_worker(this_main: HdpSession) -> Result<(), NetworkError> {\r\n        log::info!(\"HdpSession async timer subroutine executed\");\r\n        //let this_interval = this_main.clone();\r\n        let borrow = inner!(this_main);\r\n        let mut queue_worker = borrow.queue_worker.clone();\r\n        queue_worker.load_session(&this_main);\r\n        let is_server = borrow.is_server;\r\n        std::mem::drop(borrow);\r\n\r\n        // now, begin loading the subroutines\r\n        //let mut loop_idx = 0;\r\n        queue_worker.insert_reserved(QueueWorkerTicket::Oneshot(PROVISIONAL_CHECKER, 0), LOGIN_EXPIRATION_TIME, |sess| {\r\n            if sess.state != SessionState::Connected {\r\n                QueueWorkerResult::EndSession\r\n            } else {\r\n                // remove it from being called again\r\n                QueueWorkerResult::Complete\r\n            }\r\n        });\r\n\r\n        if !is_server {\r\n            queue_worker.insert_reserved(QueueWorkerTicket::Periodic(DRILL_REKEY_WORKER, 0), Duration::from_nanos(DRILL_UPDATE_FREQUENCY_LOW_BASE), |sess| {\r\n                if sess.state == SessionState::Connected {\r\n                    let timestamp = sess.time_tracker.get_global_time_ns();\r\n                    let ticket = sess.kernel_ticket;\r\n                    let security_level = sess.security_level;\r\n                    let transfer_stats = sess.transfer_stats.clone();\r\n                    let mut state_container = inner_mut!(sess.state_container);\r\n                    sess.initiate_drill_update(timestamp, &mut wrap_inner_mut!(state_container), Some(ticket));\r\n                    QueueWorkerResult::AdjustPeriodicity(calculate_update_frequency(security_level.value(), &transfer_stats))\r\n                } else {\r\n                    QueueWorkerResult::Incomplete\r\n                }\r\n            });\r\n        }\r\n\r\n        queue_worker.insert_reserved(QueueWorkerTicket::Periodic(KEEP_ALIVE_CHECKER, 0), Duration::from_millis(KEEP_ALIVE_INTERVAL_MS),move |sess| {\r\n            let timestamp = sess.time_tracker.get_global_time_ns();\r\n            if sess.state == SessionState::Connected {\r\n                let state_container = inner!(sess.state_container);\r\n                if state_container.keep_alive_subsystem_timed_out(timestamp) {\r\n                    log::warn!(\"The keep alive subsystem has timed out. Executing shutdown phase (skipping proper disconnect)\");\r\n                    QueueWorkerResult::EndSession\r\n                } else {\r\n                    QueueWorkerResult::Incomplete\r\n                }\r\n            } else {\r\n                // keep it running, as we may be in provisional mode\r\n                QueueWorkerResult::Incomplete\r\n            }\r\n        });\r\n\r\n        queue_worker.insert_reserved(QueueWorkerTicket::Periodic(FIREWALL_KEEP_ALIVE, 0), FIREWALL_KEEP_ALIVE_UDP, |sess| {\r\n            if sess.state == SessionState::Connected {\r\n                if sess.tcp_only {\r\n                    //log::info!(\"TCP only mode detected. Removing FIREWALL_KEEP_ALIVE subroutine\");\r\n                    return QueueWorkerResult::Complete\r\n                }\r\n\r\n                if !sess.to_wave_ports.as_ref().unwrap().send_keep_alive_through_all() {\r\n                    return QueueWorkerResult::EndSession\r\n                }\r\n            }\r\n\r\n            QueueWorkerResult::Incomplete\r\n        });\r\n\r\n        while let Some(_) = queue_worker.next().await {\r\n            black_box(())\r\n        }\r\n\r\n        Err(NetworkError::InternalError(\"Queue Handler signalled shutdown\"))\r\n    }\r\n\r\n    /// Similar to process_outbound_packet, but optimized to handle files\r\n    pub fn process_outbound_file(&self, ticket: Ticket, max_group_size: Option<usize>, file: PathBuf, virtual_target: VirtualTargetType, security_level: SecurityLevel) -> Result<(), NetworkError> {\r\n        let mut this = inner_mut!(self);\r\n\r\n        if this.state != SessionState::Connected {\r\n            Err(NetworkError::Generic(format!(\"Attempted to send data (ticket: {}, file: {:?}) outbound, but the session is not connected\", ticket, file)))\r\n        } else {\r\n            if let Ok(std_file) = std::fs::File::open(&file) {\r\n                let file_name = file.file_name().ok_or(NetworkError::InternalError(\"Invalid filename\"))?.to_str().ok_or(NetworkError::InternalError(\"Invalid filename\"))?;\r\n                let file_name = String::from(file_name);\r\n                let time_tracker = this.time_tracker.clone();\r\n                let timestamp = this.time_tracker.get_global_time_ns();\r\n                let to_primary_stream = this.to_primary_stream.clone().unwrap();\r\n                let (group_sender, mut group_sender_rx) = channel::<GroupSenderDevice>(5);\r\n                let (stop_tx, stop_rx) = tokio::sync::oneshot::channel();\r\n                // the above are the same for all vtarget types. Now, we need to get the proper drill and pqc\r\n\r\n                log::info!(\"Transmit file name: {}\", &file_name);\r\n                // the key cid must be differentiated from the target cid because the target_cid needs to be zero if\r\n                // there is no proxying. the key cid cannot be zero; if client -> server, key uses implicated cid\r\n                let (file_header, object_id, target_cid, key_cid, drill, groups_needed, pqc) = match virtual_target {\r\n                    VirtualTargetType::HyperLANPeerToHyperLANServer(implicated_cid) => {\r\n                        // if we are sending this just to the HyperLAN server (in the case of file uploads),\r\n                        // then, we use this session's pqc, the cnac's latest drill, and 0 for target_cid\r\n                        let object_id = this.get_and_increment_object_id();\r\n                        let pqc = this.post_quantum.clone().unwrap();\r\n                        let latest_drill = this.cnac.clone().unwrap().get_drill(None).unwrap();\r\n                        let target_cid = 0;\r\n                        // get the start group ID\r\n                        let group_id_start = this.get_and_increment_group_id();\r\n                        let (file_size, groups_needed) = scramble_encrypt_file(std_file, max_group_size, object_id, group_sender, stop_rx, security_level, latest_drill.clone(), pqc.clone(), HDP_HEADER_BYTE_LEN, target_cid, group_id_start, hdp_packet_crafter::group::craft_wave_payload_packet_into)\r\n                            .map_err(|err| NetworkError::Generic(err.to_string()))?;\r\n\r\n                        let file_metadata = VirtualFileMetadata {\r\n                            object_id,\r\n                            name: file_name,\r\n                            date_created: \"\".to_string(),\r\n                            author: \"\".to_string(),\r\n                            plaintext_length: file_size,\r\n                            group_count: groups_needed\r\n                        };\r\n                        // if 1 group, we don't need to reserve any more group IDs. If 2, then we reserve just one. 3, then 2\r\n                        let amt_to_reserve = groups_needed - 1;\r\n                        this.current_group_id += amt_to_reserve as u64;\r\n                        let file_header = hdp_packet_crafter::file::craft_file_header_packet(group_id_start, &latest_drill, &pqc, ticket, security_level, virtual_target, file_metadata, timestamp);\r\n                        (file_header, object_id, target_cid, implicated_cid, latest_drill, groups_needed, pqc)\r\n                    }\r\n\r\n                    VirtualConnectionType::HyperLANPeerToHyperLANPeer(implicated_cid, target_cid) => {\r\n                        log::info!(\"Sending HyperLAN peer ({}) <-> HyperLAN Peer ({})\", implicated_cid, target_cid);\r\n                        // here, we don't use the base session's PQC. Instead, we use the vconn's pqc and Toolset\r\n                        let mut state_container = inner_mut!(this.state_container);\r\n                        if let Some(vconn) = state_container.active_virtual_connections.get_mut(&target_cid) {\r\n                            if let Some(endpoint_container) = vconn.endpoint_container.as_mut() {\r\n                                let latest_usable_drill = endpoint_container.endpoint_crypto.get_drill(None).unwrap().clone();\r\n                                let object_id = endpoint_container.get_and_increment_object_id();\r\n                                // reserve group ids\r\n                                let start_group_id = endpoint_container.get_and_increment_group_id();\r\n\r\n                                let ref pqc = endpoint_container.endpoint_crypto.pqc;\r\n\r\n                                let (file_size, groups_needed) = scramble_encrypt_file(std_file, max_group_size, object_id, group_sender, stop_rx, security_level, latest_usable_drill.clone(), pqc.clone(), HDP_HEADER_BYTE_LEN, target_cid, start_group_id, hdp_packet_crafter::group::craft_wave_payload_packet_into)\r\n                                    .map_err(|err| NetworkError::Generic(err.to_string()))?;\r\n\r\n                                let file_metadata = VirtualFileMetadata {\r\n                                    object_id,\r\n                                    name: file_name,\r\n                                    date_created: \"\".to_string(),\r\n                                    author: \"\".to_string(),\r\n                                    plaintext_length: file_size,\r\n                                    group_count: groups_needed\r\n                                };\r\n                                // if 1 group, we don't need to reserve any more group IDs. If 2, then we reserve just one. 3, then 2\r\n                                let amt_to_reserve = groups_needed - 1;\r\n                                endpoint_container.rolling_group_id += amt_to_reserve as u64;\r\n\r\n                                let file_header = hdp_packet_crafter::file::craft_file_header_packet(start_group_id, &latest_usable_drill, pqc, ticket, security_level, virtual_target, file_metadata, timestamp);\r\n                                (file_header, object_id, target_cid, target_cid, latest_usable_drill, groups_needed, pqc.clone())\r\n                            } else {\r\n                                log::error!(\"Endpoint container not found\");\r\n                                return Ok(())\r\n                            }\r\n                        } else {\r\n                            log::error!(\"Unable to find active vconn for the channel\");\r\n                            return Ok(())\r\n                        }\r\n                    }\r\n\r\n                    _ => {\r\n                        unimplemented!(\"HyperWAN functionality not yet implemented\")\r\n                    }\r\n                };\r\n\r\n                // now that the async cryptscrambler tasks have been spawned on the threadpool, we need to also\r\n                // spawn tasks that read the [GroupSenders] from there. We also need to store an [OutboundFileMetadataTransmitter]\r\n                // to store the stopper. After spawning them, the rest is under control. Note: for the async task that spawns here\r\n                // should be given a Rc<RefCell<StateContainer>>. Finally, since two vpeers may send to the source we are sending\r\n                // to, the GROUP HEADER ACK needs to return the group start idx. It is expected the adjacent node reserve enough groups\r\n                // on its end to take into account\r\n\r\n                // send the FILE_HEADER\r\n                to_primary_stream.send(file_header).map_err(|_| NetworkError::InternalError(\"Primary stream disconnected\"))?;\r\n                // create the outbound file container\r\n                let mut state_container = inner_mut!(this.state_container);\r\n                let (next_gs_alerter, mut next_gs_alerter_rx) = unbounded_channel();\r\n                let (start, start_rx) = tokio::sync::oneshot::channel();\r\n                let outbound_file_transfer_container = OutboundFileTransfer {\r\n                    stop_tx: Some(stop_tx),\r\n                    object_id,\r\n                    ticket,\r\n                    next_gs_alerter: next_gs_alerter.clone(),\r\n                    start: Some(start)\r\n                };\r\n                let file_key = FileKey::new(key_cid, object_id);\r\n                let _ = state_container.outbound_files.insert(file_key, outbound_file_transfer_container);\r\n                // spawn the task that takes GroupSenders from the threadpool cryptscrambler\r\n                std::mem::drop(state_container);\r\n                std::mem::drop(this);\r\n                let this = self.clone();\r\n                let _ = spawn!(async move {\r\n                    let ref drill = drill;\r\n                    let ref this = this;\r\n                    let ref pqc = pqc;\r\n                    let ref next_gs_alerter = next_gs_alerter;\r\n                    // this future will resolve when the sender drops in the file_crypt_scrambler\r\n                    match start_rx.await {\r\n                        Ok(false) => {\r\n                            log::warn!(\"start_rx signalled to NOT begin streaming process. Ending async subroutine\");\r\n                            return;\r\n                        }\r\n                         Err(err) => {\r\n                             log::error!(\"start_rx error occured: {:?}\", err);\r\n                             return;\r\n                         }\r\n\r\n                        _ => {\r\n                            log::info!(\"Outbound file transfer async subroutine signalled to begin!\");\r\n                        }\r\n                    }\r\n\r\n                    let mut relative_group_id = 0;\r\n                    // while waiting, we likely have a set of GroupSenders to process\r\n                    while let Some(sender) = group_sender_rx.next().await {\r\n                        // construct the OutboundTransmitters\r\n                        let mut transmitter = GroupTransmitter::new_from_group_sender(GroupSender::from(sender), pqc.clone(), drill.clone(), object_id, target_cid, ticket, security_level, time_tracker.clone());\r\n                        // group_id is unique per session\r\n                        let group_id = transmitter.group_id;\r\n                        let mut sess = inner_mut!(this);\r\n                        // We manually send the header. The tails get sent automatically\r\n                        log::info!(\"Sending GROUP HEADER through primary stream for group {}\", group_id);\r\n                        if let Err(err) = sess.send_to_primary_stream(Some(ticket), transmitter.generate_group_header(virtual_target)) {\r\n                            log::error!(\"Unable to send through primary stream: {}\", err.to_string());\r\n                            return;\r\n                        }\r\n                        let group_byte_len = transmitter.get_total_plaintext_bytes();\r\n                        sess.transfer_stats += TransferStats::new(timestamp, group_byte_len as isize);\r\n\r\n                        let outbound_container = OutboundTransmitterContainer::new(Some(next_gs_alerter.clone()),transmitter, group_byte_len, groups_needed, relative_group_id, ticket);\r\n                        relative_group_id += 1;\r\n                        // The payload packets won't be sent until a GROUP_HEADER_ACK is received\r\n                        // the key is the target_cid coupled with the group id\r\n                        let key = GroupKey::new(key_cid, group_id);\r\n                        let mut state_container = inner_mut!(sess.state_container);\r\n                        assert!(state_container.outbound_transmitters.insert(key, outbound_container).is_none());\r\n                        // We can't just add the outbound container. We need to wait til we get the signal to. When the > 50% WAVE_ACKs\r\n                        // are received, the OutboundFileContainer (which should have a group_notifier) should send a signal which we await for\r\n                        // here. Also: DROP `sess`!\r\n                        std::mem::drop(state_container);\r\n                        std::mem::drop(sess);\r\n\r\n                        // When a wave ACK in the previous group comes, if the group is 50% or more done, the group_sender_rx will\r\n                        // received a signal here\r\n                        if let None = next_gs_alerter_rx.next().await {\r\n                            log::warn!(\"next_gs_alerter: steam ended\");\r\n                            return;\r\n                        }\r\n\r\n                        let this = inner!(this);\r\n\r\n                        this.queue_worker.insert_ordinary(group_id as usize, target_cid, GROUP_EXPIRE_TIME_MS, move |sess| {\r\n                            let mut state_container = inner_mut!(sess.state_container);\r\n                            if let Some(transmitter) = state_container.outbound_transmitters.get(&key) {\r\n                                // as long as a wave ACK has been received, proceed with the timeout check\r\n                                // The reason why is because this group may be loaded, but the previous one isn't done\r\n                                if transmitter.has_begun {\r\n                                    let transmitter = inner!(transmitter.reliability_container);\r\n                                    if transmitter.has_expired(GROUP_EXPIRE_TIME_MS) {\r\n                                        log::error!(\"Outbound group {} has expired; dropping entire transfer\", group_id);\r\n                                        std::mem::drop(transmitter);\r\n                                        if let Some(mut outbound_container) = state_container.outbound_files.remove(&file_key) {\r\n                                            if let Some(stop) = outbound_container.stop_tx.take() {\r\n                                                if let Err(_) = stop.send(()) {\r\n                                                    log::error!(\"Unable to send stop signal\");\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            log::warn!(\"Attempted to remove {:?}, but was already absent from map\", &file_key);\r\n                                        }\r\n                                        QueueWorkerResult::Complete\r\n                                    } else {\r\n                                        // it hasn't expired yet, and is still transmitting\r\n                                        QueueWorkerResult::Incomplete\r\n                                    }\r\n                                } else {\r\n                                    // WAVE_ACK hasn't been received yet; try again later\r\n                                    QueueWorkerResult::Incomplete\r\n                                }\r\n                            } else {\r\n                                // it finished\r\n                                QueueWorkerResult::Complete\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                Ok(())\r\n            } else {\r\n                Err(NetworkError::Generic(format!(\"File `{:?}` not found\", file)))\r\n            }\r\n        }\r\n    }\r\n\r\n    /// When a raw packet is received by the [HdpServerRequest] listeners, it is passed into here.\r\n    /// This will return None if the connection is not engaged. An incomplete state will not\r\n    /// be valid either.\r\n    ///\r\n    /// This will send the group header too\r\n    #[allow(unused_results)]\r\n    pub fn process_outbound_packet(&self, ticket: Ticket, packet: SecBuffer, virtual_target: VirtualTargetType, security_level: SecurityLevel) -> Result<(), NetworkError> {\r\n        let mut this = inner_mut!(self);\r\n        if this.state != SessionState::Connected {\r\n            Err(NetworkError::Generic(format!(\"Attempted to send data (ticket: {}, len: {}) outbound, but the session is not connected\", ticket, packet.len())))\r\n        } else {\r\n            let cnac = this.cnac.clone().unwrap();\r\n            let time_tracker = this.time_tracker.clone();\r\n            let timestamp = time_tracker.get_global_time_ns();\r\n            // object singleton == 0 implies that the data does not belong to a file\r\n            const OBJECT_SINGLETON: u32 = 0;\r\n            // Drop this to ensure that it doesn't block other async closures from accessing the inner device\r\n            // std::mem::drop(this);\r\n            let (mut transmitter, group_id, target_cid) = match virtual_target {\r\n                VirtualTargetType::HyperLANPeerToHyperLANServer(implicated_cid) => {\r\n                    // if we are sending this just to the HyperLAN server (in the case of file uploads),\r\n                    // then, we use this session's pqc, the cnac's latest drill, and 0 for target_cid\r\n                    let group_id = this.get_and_increment_group_id();\r\n                    let pqc = this.post_quantum.as_ref().unwrap();\r\n                    let latest_drill = cnac.get_drill(None).unwrap();\r\n                    let target_cid = 0;\r\n                    (GroupTransmitter::new(OBJECT_SINGLETON, target_cid, latest_drill, pqc, packet, security_level, group_id, ticket, time_tracker).ok_or_else(|| NetworkError::InternalError(\"Unable to create the outbound transmitter\"))?, group_id, implicated_cid)\r\n                }\r\n\r\n                VirtualConnectionType::HyperLANPeerToHyperLANPeer(implicated_cid, target_cid) => {\r\n                    log::info!(\"Sending HyperLAN peer ({}) <-> HyperLAN Peer ({})\", implicated_cid, target_cid);\r\n                    // here, we don't use the base session's PQC. Instead, we use the vconn's pqc and Toolset\r\n                    let mut state_container = inner_mut!(this.state_container);\r\n                    if let Some(vconn) = state_container.active_virtual_connections.get_mut(&target_cid) {\r\n                        if let Some(endpoint_container) = vconn.endpoint_container.as_mut() {\r\n                            let group_id = endpoint_container.get_and_increment_group_id();\r\n                            let latest_usable_drill = endpoint_container.endpoint_crypto.get_drill(None).unwrap().clone();\r\n                            let ref pqc = endpoint_container.endpoint_crypto.pqc;\r\n                            (GroupTransmitter::new(OBJECT_SINGLETON, target_cid, latest_usable_drill, pqc, packet, security_level, group_id, ticket, time_tracker).ok_or_else(|| NetworkError::InternalError(\"Unable to create the outbound transmitter\"))?, group_id, target_cid)\r\n                        } else {\r\n                            log::error!(\"Endpoint container not found\");\r\n                            return Ok(())\r\n                        }\r\n                    } else {\r\n                        log::error!(\"Unable to find active vconn for the channel\");\r\n                        return Ok(())\r\n                    }\r\n                }\r\n\r\n                _ => {\r\n                    unimplemented!(\"HyperWAN functionality not yet implemented\")\r\n                }\r\n            };\r\n\r\n            // TODO: implement FAST-SEND if TCP detected to reduce from 2 back-and-forths to 1\r\n            // We manually send the header. The tails get sent automatically\r\n            log::info!(\"Sending GROUP HEADER through primary stream for group {}\", group_id);\r\n            let group_len = transmitter.get_total_plaintext_bytes();\r\n            this.send_to_primary_stream(Some(ticket), transmitter.generate_group_header(virtual_target))?;\r\n            this.transfer_stats += TransferStats::new(timestamp, group_len as isize);\r\n            let outbound_container = OutboundTransmitterContainer::new(None,transmitter, group_len, 1, 0, ticket);\r\n            // The payload packets won't be sent until a GROUP_HEADER_ACK is received\r\n            // NOTE: Ever since using GroupKeys, we use either the implicated_cid (for client -> server conns) or target_cids (for peer conns)\r\n            let key = GroupKey::new(target_cid, group_id);\r\n            inner_mut!(this.state_container).outbound_transmitters.insert(key, outbound_container);\r\n\r\n            this.queue_worker.insert_ordinary(group_id as usize, target_cid, GROUP_EXPIRE_TIME_MS, move |sess| {\r\n                let state_container = inner!(sess.state_container);\r\n                if let Some(transmitter) = state_container.outbound_transmitters.get(&key) {\r\n                    let transmitter = inner!(transmitter.reliability_container);\r\n                    if transmitter.has_expired(GROUP_EXPIRE_TIME_MS) {\r\n                        log::info!(\"Outbound group {} has expired; dropping from map\", group_id);\r\n                        QueueWorkerResult::Complete\r\n                    } else {\r\n                        // it hasn't expired yet, and is still transmitting\r\n                        QueueWorkerResult::Incomplete\r\n                    }\r\n                } else {\r\n                    // it finished\r\n                    QueueWorkerResult::Complete\r\n                }\r\n            });\r\n\r\n            Ok(())\r\n        }\r\n    }\r\n\r\n    pub(crate) fn process_outbound_broadcast_command(&self, ticket: Ticket, command: GroupBroadcast) -> Result<(), NetworkError> {\r\n        let this = inner!(self);\r\n        if this.state != SessionState::Connected {\r\n            return Err(NetworkError::InternalError(\"Session not connected\"))\r\n        }\r\n\r\n        let pqc = this.post_quantum.as_ref().unwrap();\r\n        let cnac = this.cnac.as_ref().unwrap();\r\n        let to_primary_stream = this.to_primary_stream.as_ref().unwrap();\r\n\r\n        cnac.borrow_drill(None, |drill_opt| {\r\n            let drill = drill_opt.ok_or(NetworkError::InternalError(\"Drill missing\"))?;\r\n            let timestamp = this.time_tracker.get_global_time_ns();\r\n            let packet = match &command {\r\n                GroupBroadcast::Create(_) |\r\n                GroupBroadcast::End(_) |\r\n                GroupBroadcast::Kick(_, _) |\r\n                GroupBroadcast::Message(_, _, _) |\r\n                GroupBroadcast::Add(_,_) |\r\n                GroupBroadcast::AcceptMembership(_) |\r\n                GroupBroadcast::LeaveRoom(_) => {\r\n                    hdp_packet_crafter::peer_cmd::craft_group_message_packet(pqc,drill, &command, ticket, ENDPOINT_ENCRYPTION_OFF, timestamp)\r\n                }\r\n\r\n                n => {\r\n                    return Err(NetworkError::Generic(format!(\"{:?} is not a valid group broadcast request\", &n)))\r\n                }\r\n            };\r\n\r\n            to_primary_stream.send(packet).map_err(|err| NetworkError::Generic(err.to_string()))\r\n        })\r\n    }\r\n\r\n    async fn listen_wave_port<S: Stream<Item=Result<(BytesMut, SocketAddr), std::io::Error>> + Unpin>(this: HdpSession, to_kernel: UnboundedSender<HdpServerResult>, hole_punched_addr_ip: IpAddr, local_port: u16, mut stream: S) -> Result<(), NetworkError> {\r\n        'looper: loop {\r\n            match stream.next().await {\r\n                None => {\r\n                    //log::info!(\"WAVE LISTENER: NO ITEMS\");\r\n                },\r\n\r\n                Some(res) => {\r\n                    match res {\r\n                        Err(err) => {\r\n                            log::error!(\"Wave stream error: {}\", err.to_string());\r\n                            break 'looper;\r\n                        },\r\n\r\n                        Ok((packet, remote_peer)) => {\r\n                            log::trace!(\"packet received on waveport {} has {} bytes (src: {:?})\", local_port, packet.len(), &remote_peer);\r\n                            if remote_peer.ip() != hole_punched_addr_ip {\r\n                                log::error!(\"The packet received is not part of the firewall session. Dropping\");\r\n                            } else {\r\n                                if packet != KEEP_ALIVE {\r\n                                    let packet = HdpPacket::new_recv(packet, remote_peer, local_port);\r\n                                    if let Err(err) = this.process_inbound_packet_wave(packet) {\r\n                                        to_kernel.send(HdpServerResult::InternalServerError(None, err.to_string())).unwrap();\r\n                                        log::error!(\"The session manager returned a critical error. Aborting system\");\r\n                                        return Err(err);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        /*\r\n        while let Some(Ok((packet, remote_peer))) = stream.next().await {\r\n            log::info!(\"packet received on waveport {} has {} bytes (src: {:?})\", local_port, packet.len(), &remote_peer);\r\n            if remote_peer.ip() != hole_punched_addr_ip {\r\n                log::error!(\"The packet received is not part of the firewall session. Dropping\");\r\n            } else {\r\n                let packet = HdpPacket::new_recv(packet, remote_peer, local_port);\r\n                if let Err(err) = this.process_inbound_packet_wave(packet) {\r\n                    to_kernel.send(HdpServerResult::InternalServerError(None, err.to_string())).unwrap();\r\n                    log::error!(\"The session manager returned a critical error. Aborting system\");\r\n                    return Err(err);\r\n                }\r\n            }\r\n        }*/\r\n\r\n        log::info!(\"Ending waveport listener on {}\", local_port);\r\n\r\n        Ok(())\r\n    }\r\n\r\n    async fn wave_outbound_sender<S: SinkExt<(Bytes, SocketAddr)> + Unpin>(local_is_server: bool, mut receiver: UnboundedReceiver<(usize, Bytes)>, hole_punched_addrs: Vec<HolePunchedSocketAddr>, to_kernel_tx: UnboundedSender<HdpServerResult>, mut sinks: Vec<S>) -> Result<(), NetworkError> {\r\n        while let Some((idx, packet)) = receiver.next().await {\r\n            if let Some(sink) = sinks.get_mut(idx) {\r\n\r\n                // TODO: figure out the logistics of this IP mess for all possible use cases. This works for hyperlan though\r\n                let send_addr = if local_is_server {\r\n                    // if the local is server, we send to the natted ports instead of the initial. It is flip-flopped\r\n                    hole_punched_addrs[idx].natted\r\n                } else {\r\n                    hole_punched_addrs[idx].initial\r\n                };\r\n\r\n                log::trace!(\"About to send packet w/len {} through UDP sink idx: {} | Dest: {:?}\", packet.len(), idx, &send_addr);\r\n\r\n                if let Err(_err) = sink.send((packet, send_addr)).await {\r\n                    to_kernel_tx.send(HdpServerResult::InternalServerError(None, format!(\"Sink Error on idx {}\", idx))).unwrap();\r\n                }\r\n            } else {\r\n                log::error!(\"Invalid idx: {}\", idx);\r\n            }\r\n        }\r\n\r\n        log::info!(\"Outbound wave sender ending\");\r\n\r\n        Ok(())\r\n    }\r\n\r\n    /// In general, the packets that come through here are one of two general types: Either the modulated transmission of\r\n    /// the encryption file, or, post-registration modulated data\r\n    pub fn process_inbound_packet_wave(&self, packet: HdpPacket) -> Result<(), NetworkError> {\r\n        if packet.get_length() < HDP_HEADER_BYTE_LEN {\r\n            return Ok(())\r\n        }\r\n\r\n        let mut this = inner_mut!(self);\r\n\r\n        //log::info!(\"Wave inbound port (original): {}\", packet.get_remote_port());\r\n\r\n        if let Some((header, payload)) = packet.parse() {\r\n            // even in the case of proxy, we can quickly see if it's even worth proxying\r\n\r\n            // now, check to see if we need to proxy the wave packet. With the same logic as with primary packets, we check\r\n            // to see if the target_cid is not zero\r\n            let target_cid = header.target_cid.get();\r\n            let mut proxy_cid_info = None;\r\n            let this_implicated_cid = this.implicated_cid.load(Ordering::SeqCst);\r\n            if target_cid != 0 {\r\n                // after the UDP hole-punching process, it is possible that packets arrive here\r\n                // that are small ACK's. Ignore them, but check implicated_cid below since, if they arrive,\r\n                // this will get triggered before a session starts\r\n                if let Some(this_implicated_cid) = this_implicated_cid {\r\n                    if this_implicated_cid != target_cid {\r\n                        // we need to proxy the wave packet\r\n                        log::info!(\"Proxying WAVE packet from {} to {}\", this_implicated_cid, target_cid);\r\n                        // check for the existence of the vconn\r\n                        let state_container = inner!(this.state_container);\r\n                        if let Some(peer_vconn) = state_container.active_virtual_connections.get(&target_cid) {\r\n                            let senders = peer_vconn.sender.as_ref().unwrap();\r\n                            if let Some(peer_udp_sender) = senders.0.as_ref() {\r\n                                // in this case, we can complete the movement all the way through w/ UDP\r\n                                if !peer_udp_sender.send(packet.into_packet()) {\r\n                                    log::error!(\"[UDP] Unable to proxy WAVE packet from {} to {} (TrySendError)\", this_implicated_cid, target_cid);\r\n                                    return Ok(())\r\n                                }\r\n                            } else {\r\n                                // in this case, while we can route from A -> S w/ UDP, going from S -> B will require TCP\r\n                                if let Err(_) = senders.1.send(packet.into_packet()) {\r\n                                    log::error!(\"[TCP] Unable to proxy WAVE packet from {} to {} (TrySendError)\", this_implicated_cid, target_cid);\r\n                                    return Ok(())\r\n                                }\r\n                            }\r\n                            // now that the packet was forwarded, we automatically switch into the outer branch and return Ok(());\r\n                        } else {\r\n                            log::error!(\"Unable to proxy wave packet; Virtual connection to {} not active\", target_cid);\r\n                        }\r\n\r\n                        return Ok(())\r\n                    } else {\r\n                        // since implicated_cid == target_cid, the packet has reached its destination\r\n                        proxy_cid_info = Some((header.session_cid.get(), target_cid))\r\n                    }\r\n                }\r\n                // else, the wave packet has reached its destination, and as such, the normal processing logic can execute below\r\n            }\r\n\r\n            // since we are here, it means the wave packet reached its destination\r\n            let v_src_port = payload[0] as u16;\r\n            let v_recv_port = payload[1] as u16;\r\n            let payload = &payload[2..];\r\n\r\n            log::info!(\"WAVE Packet with cmd {} being processed by session {}\", header.cmd_primary, this.get_id());\r\n            match header.cmd_primary {\r\n                packet_flags::cmd::primary::GROUP_PACKET => {\r\n                    match hdp_packet_processor::wave_group_packet::process(&mut wrap_inner_mut!(this), v_src_port, v_recv_port, &header, payload, proxy_cid_info) {\r\n                        GroupProcessorResult::SendToKernel(ticket, concatenated_packet) => {\r\n                            this.send_to_kernel(HdpServerResult::MessageDelivery(ticket, this_implicated_cid.unwrap(), concatenated_packet))?;\r\n                            Ok(())\r\n                        }\r\n\r\n                        GroupProcessorResult::ReplyToSender(return_packet) => {\r\n                            this.send_to_primary_stream(None, return_packet)?;\r\n                            Ok(())\r\n                        }\r\n\r\n                        GroupProcessorResult::Void => {\r\n                            // no-op\r\n                            Ok(())\r\n                        }\r\n\r\n                        GroupProcessorResult::Error(err) => {\r\n                            this.send_to_kernel(HdpServerResult::InternalServerError(Some(header.context_info.get().into()), err))?;\r\n                            Ok(())\r\n                        }\r\n                        GroupProcessorResult::ShutdownSession(err) => {\r\n                            this.send_to_kernel(HdpServerResult::InternalServerError(Some(header.context_info.get().into()), err))?;\r\n                            Err(NetworkError::InternalError(\"Session signalled to shutdown. Reason sent to kernel\"))\r\n                        }\r\n                    }\r\n                }\r\n\r\n                _ => {\r\n                    log::trace!(\"A non-group packet was received on a waveform port\");\r\n                    Ok(())\r\n                }\r\n            }\r\n        } else {\r\n            log::error!(\"A packet was unable to be parsed\");\r\n            Ok(())\r\n        }\r\n    }\r\n\r\n    /// Returns true if the disconnect initiate was a success, false if not. An error returns if something else occurs\r\n    pub fn initiate_disconnect(&self, ticket: Ticket, target: VirtualConnectionType) -> Result<bool, NetworkError> {\r\n        let session = inner!(self);\r\n        if session.state != SessionState::Connected {\r\n            log::error!(\"Must be connected to HyperLAN in order to start disconnect\")\r\n        }\r\n\r\n        let cnac = session.cnac.as_ref().unwrap();\r\n        let drill = cnac.get_drill(None).unwrap();\r\n        let timestamp = session.time_tracker.get_global_time_ns();\r\n        let to_primary_stream = session.to_primary_stream.as_ref().unwrap();\r\n        let ref to_kernel_tx = session.kernel_tx;\r\n        let mut state_container = inner_mut!(session.state_container);\r\n        state_container.disconnect_state.virtual_connection_type = Some(target);\r\n\r\n        match target {\r\n            VirtualConnectionType::HyperLANPeerToHyperLANPeer(_implicated_cid, target_cid) => {\r\n                if let Some(virtual_conn) = state_container.active_virtual_connections.get(&target_cid) {\r\n                    if virtual_conn.connection_type == target {\r\n                        log::info!(\"Successfully found the active virtual connection to HyperLAN peer {}. Now initiating disconnect response with HyperLAN server\", target_cid);\r\n                        let disconnect_stage0_packet = hdp_packet_crafter::do_disconnect::craft_stage0(target, &drill, ticket, timestamp);\r\n                        state_container.disconnect_state.ticket = ticket;\r\n                        Self::send_to_primary_stream_closure(to_primary_stream, to_kernel_tx, disconnect_stage0_packet, Some(ticket));\r\n                        Ok(true)\r\n                    } else {\r\n                        log::error!(\"Target CID {} is not a HyperLAN Peer -> HyperLAN Peer type\", target_cid);\r\n                        Ok(false)\r\n                    }\r\n                } else {\r\n                    log::error!(\"Target CID {} does not exist as an active connection\", target_cid);\r\n                    Ok(false)\r\n                }\r\n            }\r\n\r\n            VirtualConnectionType::HyperLANPeerToHyperLANServer(implicated_cid) => {\r\n                log::info!(\"Now initiating disconnect response with HyperLAN server {}\", implicated_cid);\r\n                state_container.disconnect_state.ticket = ticket;\r\n                let disconnect_stage0_packet = hdp_packet_crafter::do_disconnect::craft_stage0(target, &drill, ticket, timestamp);\r\n                Self::send_to_primary_stream_closure(to_primary_stream, to_kernel_tx, disconnect_stage0_packet, Some(ticket));\r\n                Ok(true)\r\n            }\r\n\r\n            VirtualConnectionType::HyperLANPeerToHyperWANPeer(_implicated_cid, _icid, _target_cid) => {\r\n                unimplemented!()\r\n            }\r\n\r\n            VirtualConnectionType::HyperLANPeerToHyperWANServer(_implicated_cid, _icid) => {\r\n                unimplemented!()\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Stores the proposed credentials into the register state container\r\n    pub fn store_proposed_credentials(&self, proposed_credentials: ProposedCredentials, stage_for: u8) {\r\n        let this = inner_mut!(self);\r\n        let mut state_container = inner_mut!(this.state_container);\r\n        let nonce = proposed_credentials.nonce.clone();\r\n        match stage_for {\r\n            packet_flags::cmd::primary::DO_REGISTER => {\r\n                state_container.register_state.proposed_credentials = Some(proposed_credentials);\r\n                state_container.register_state.nonce = Some(nonce);\r\n            }\r\n\r\n            packet_flags::cmd::primary::DO_CONNECT => {\r\n                state_container.connect_state.proposed_credentials = Some(proposed_credentials);\r\n                // we don't need to store the nonce here\r\n            }\r\n\r\n            _ => {\r\n                panic!(\"Invalid proposed stage for credential insertion\")\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nimpl HdpSessionInner {\r\n    /// When a successful login occurs, this function gets called. Must return any AsRef<[u8]> type\r\n    pub(super) fn create_welcome_message(&self, cid: u64) -> String {\r\n        format!(\"SatoriNET login::success. Welcome to the Post-quantum network. Implicated CID: {}\", cid)\r\n    }\r\n\r\n    pub(super) fn create_register_success_message(&self) -> String {\r\n        format!(\"SatoriNET register::success. Welcome to your new post-quantum network! Login to interact with your new network\")\r\n    }\r\n\r\n    /// If the previous state was not a login fail, then the unwrap_or case will occur\r\n    #[allow(unused)]\r\n    pub(super) fn can_reconnect(&self) -> bool {\r\n        let current_time = self.time_tracker.get_global_time_ns();\r\n        // if there was no failure, the value will be much larger than the initial locckout time, thus returning true\r\n        if let Some(fail_time) = inner!(self.state_container).connect_state.fail_time {\r\n            // if the gap between the current time and the fail time is enough, then reconnection is possible\r\n            current_time - fail_time > INITIAL_RECONNECT_LOCKOUT_TIME_NS\r\n        } else {\r\n            // No fail means reconnection is possible\r\n            true\r\n        }\r\n    }\r\n\r\n    /// This will panic if cannot be sent\r\n    #[inline]\r\n    pub fn send_to_kernel(&self, msg: HdpServerResult) -> Result<(), SendError<HdpServerResult>> {\r\n        self.kernel_tx.send(msg)\r\n    }\r\n\r\n    /// Will send the message to the primary stream, and will alert the kernel if the stream's connector is full\r\n    pub fn send_to_primary_stream(&self, ticket: Option<Ticket>, msg: Bytes) -> Result<(), NetworkError> {\r\n        if let Some(tx) = self.to_primary_stream.as_ref() {\r\n            match tx.send(msg) {\r\n                Ok(_) => {\r\n                    Ok(())\r\n                }\r\n\r\n                Err(err) => {\r\n                    self.send_to_kernel(HdpServerResult::InternalServerError(ticket, err.to_string()))\r\n                        .map_err(|err| NetworkError::Generic(err.to_string()))?;\r\n                    Err(NetworkError::InternalError(\"Unable to send through primary stream\"))\r\n                }\r\n            }\r\n        } else {\r\n            Err(NetworkError::InternalError(\"Primary stream sender absent\"))\r\n        }\r\n    }\r\n\r\n    /// Stops the future from running. This will stop once the periodic checker determines the state is disconnected\r\n    pub fn shutdown(&mut self) {\r\n        self.state = SessionState::Disconnected\r\n    }\r\n\r\n    fn get_id(&self) -> u64 {\r\n        match self.implicated_cid.load(Ordering::SeqCst) {\r\n            Some(implicated_cid) => {\r\n                implicated_cid\r\n            }\r\n\r\n            None => {\r\n                self.kernel_ticket.0\r\n            }\r\n        }\r\n    }\r\n\r\n    pub(crate) fn initiate_drill_update<K: ExpectedInnerTargetMut<StateContainerInner>>(&self, timestamp: i64, state_container: &mut InnerParameterMut<K, StateContainerInner>, ticket: Option<Ticket>)\r\n     {\r\n        //log::info!(\"Initiating drill update process ...\");\r\n\r\n        // begin update process by immediately setting semaphore\r\n        state_container.drill_update_state.on_begin_update_subroutine(timestamp, ticket);\r\n        //std::mem::drop(state_container);\r\n        let cnac = self.cnac.as_ref().unwrap();\r\n        let latest_drill = cnac.get_drill(None).unwrap();\r\n\r\n        let stage0_packet = hdp_packet_crafter::do_drill_update::craft_stage0(&latest_drill, timestamp);\r\n        let to_primary_stream = self.to_primary_stream.as_ref().unwrap();\r\n        let kernel_tx = &self.kernel_tx;\r\n        HdpSession::send_to_primary_stream_closure(to_primary_stream, kernel_tx, stage0_packet, ticket);\r\n    }\r\n\r\n    pub(crate) fn initiate_deregister(&self, virtual_connection_type: VirtualConnectionType, ticket: Ticket) -> bool {\r\n        log::info!(\"Initiating deregister process ...\");\r\n        let timestamp = self.time_tracker.get_global_time_ns();\r\n        let cnac = self.cnac.as_ref().unwrap();\r\n        let ref drill = cnac.get_drill(None).unwrap();\r\n\r\n        let stage0_packet = hdp_packet_crafter::do_deregister::craft_stage0(drill, timestamp, virtual_connection_type);\r\n        let mut state_container = inner_mut!(self.state_container);\r\n        state_container.deregister_state.on_init(virtual_connection_type, timestamp,  ticket);\r\n        std::mem::drop(state_container);\r\n        self.send_to_primary_stream(Some(ticket), stage0_packet).is_ok()\r\n    }\r\n\r\n    fn get_and_increment_group_id(&mut self) -> u64 {\r\n        self.current_group_id += 1;\r\n        self.current_group_id - 1\r\n    }\r\n\r\n    fn get_and_increment_object_id(&mut self) -> u32 {\r\n        self.rolling_object_idx += 1;\r\n        self.rolling_object_idx - 1\r\n    }\r\n\r\n    pub(crate) fn is_provisional(&self) -> bool {\r\n        //self.implicated_cid.is_none()\r\n        // SocketJustOpened is only the state for a session created from an incoming connection\r\n        self.state == SessionState::SocketJustOpened || self.state == SessionState::NeedsConnect || self.state == SessionState::ConnectionProcess || self.state == SessionState::NeedsRegister\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hyxe_net/src/hdp/hdp_session.rs b/hyxe_net/src/hdp/hdp_session.rs
--- a/hyxe_net/src/hdp/hdp_session.rs	(revision bc150d7311557fd666684082d183891298012257)
+++ b/hyxe_net/src/hdp/hdp_session.rs	(date 1607208669760)
@@ -384,10 +384,15 @@
         for (socket, hole_punched_addr) in sockets {
             let local_bind_addr = socket.local_addr().unwrap();
 
-            let codec = super::codec::BytesCodec::new(CODEC_BUFFER_CAPACITY);
+            //let codec = super::codec::BytesCodec::new(CODEC_BUFFER_CAPACITY);
+            let codec = LengthDelimitedCodec::builder()
+                .length_field_offset(0) // default value
+                .length_field_length(2)
+                .length_adjustment(0)
+                .new_codec();
             //let framed = UdpFramed::new(socket, codec);
             //let framed = tokio_util::codec::Framed::new(socket, codec);
-            let framed = crate::hdp::udp_framed::UdpFramed::new(socket, codec);
+            let framed = tokio_util::udp::UdpFramed::new(socket, codec);
             let (writer, reader) = framed.split();
 
             unordered_futures.push(Self::listen_wave_port(this.clone(), to_kernel.clone(), hole_punched_addr_ip, local_bind_addr.port(), reader));
@@ -406,6 +411,7 @@
         })
     }
 
+    #[allow(unreachable_code)]
     async fn outbound_stream<S: SinkExt<Bytes> + Unpin>(mut primary_outbound_rx: UnboundedReceiver<Bytes>, mut writer: S) -> Result<(), NetworkError> {
         log::info!("Executing outbound stream");
 
@@ -415,7 +421,30 @@
                 log::error!("Err: {:?}", &err);
                 return Err(err);
             }
-        }
+        }*/
+
+            loop {
+                log::info!("LOOP");
+                match primary_outbound_rx.try_recv() {
+                    Ok(outbound_packet) => {
+                        log::info!("outbound_stream sending object w/ {} bytes to TCP stream (using LengthDelimitedCodec)", outbound_packet.len());
+                        if let Err(err) = writer.send(outbound_packet).await.map_err(|_| NetworkError::InternalError("Writer stream corrupted")) {
+                            log::error!("Err: {:?}", &err);
+                            return Err(err);
+                        }
+                    }
+
+                    Err(err) => {
+                        log::error!("TryRecvError ({})", err.to_string());
+                    }
+                }
+
+                // we get here, but no further per loop. I'm using an arbitrary sleep here to see what may be affecting the code
+                tokio::time::sleep(Duration::from_millis(500)).await;
+                // We DON'T make it this far. After editing the source code for tokio's abstraction returned from sleep(), I noticed
+                // that drop does NOT get called. Despite this, the loop continues but never makes it here
+                log::info!("Done sleep!");
+            }
 
         log::error!("Ending outbound stream");
 
Index: hyxe_net/Cargo.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[package]\r\nname = \"hyxe_net\"\r\nversion = \"0.1.0\"\r\nauthors = [\"Thomas Braun <tbraun96@gmail.com>\"]\r\nedition = \"2018\"\r\nworkspace = \"../\"\r\n\r\n[features]\r\ndefault = [\"single-threaded\"]\r\nsingle-threaded = []\r\nmulti-threaded = []\r\n\r\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\r\n\r\n[dependencies]\r\n#futures = { version = \"0.3.1\", features = [\"compat\", \"async-await\"] }\r\nfutures = \"0.3.8\"\r\nbstr = \"0.2.13\"\r\nlog = { version = \"0.4.8\", features = [\"std\", \"max_level_trace\", \"release_max_level_info\"] }\r\n#async-std = { version = \"1.6.2\", features = [\"unstable\"] }\r\nasync-trait = \"0.1.31\"\r\n#base64 = { path = \"../base64\", version = \"0.10.1\" }\r\n#tokio = { path = \"../tokio/tokio\", version = \"0.3.0\", features = [\"full\"] }\r\n#tokio-util = { path = \"../tokio/tokio-util\", version = \"0.4.0\", features = [\"udp\", \"codec\"] }\r\n##best: tokio-util = { version = \"0.3.1\", features = [\"udp\", \"codec\"] }\r\ntokio-util = { version = \"0.5.0\", path = \"../../tokio/tokio-util\", features = [\"codec\", \"time\", \"io\"] }\r\n#tokio = { version = \"^0.2.22\", features = [\"full\"] }\r\ntokio = { version = \"0.3.4\", path = \"../../tokio/tokio\", features = [\"full\"] }\r\nparking_lot = \"*\"\r\nzerocopy = \"0.3.0\"\r\nbytes = \"0.6.0\"\r\nbyteorder = \"1.3.4\"\r\nnanoserde = \"0.1.18\"\r\nrand = \"0.7.3\"\r\natomic = \"0.5.0\"\r\nsecstr = \"0.4.0\"\r\nenv_logger = \"0.7.1\"\r\nnet2 = \"0.2.34\"\r\nnum = \"0.2.1\"\r\n#rsntp = \"0.3.1\"\r\neither = \"1.5.3\"\r\nbitvec = \"0.17.3\"\r\n#futures_codec = { git = \"https://github.com/matthunz/futures-codec/\", version = \"0.4.0\"}\r\nhyxe_crypt = { path = \"../hyxe_crypt\", version = \"0.1.0\" }\r\nhyxe_user = { path = \"../hyxe_user\", version = \"0.1.0\" }\r\nhyxe_nat = { path = \"../hyxe_nat\", version = \"0.1.0\" }\r\nez_pqcrypto = { path = \"../ez_pqcrypto\", version = \"0.1.1\" }\r\nrust-argon2 = \"0.8.3\"\r\nnum_cpus = \"1.13.0\"
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hyxe_net/Cargo.toml b/hyxe_net/Cargo.toml
--- a/hyxe_net/Cargo.toml	(revision bc150d7311557fd666684082d183891298012257)
+++ b/hyxe_net/Cargo.toml	(date 1607207647349)
@@ -23,7 +23,7 @@
 #tokio = { path = "../tokio/tokio", version = "0.3.0", features = ["full"] }
 #tokio-util = { path = "../tokio/tokio-util", version = "0.4.0", features = ["udp", "codec"] }
 ##best: tokio-util = { version = "0.3.1", features = ["udp", "codec"] }
-tokio-util = { version = "0.5.0", path = "../../tokio/tokio-util", features = ["codec", "time", "io"] }
+tokio-util = { version = "0.5.1", path = "../../tokio/tokio-util", features = ["codec", "time", "net", "io"] }
 #tokio = { version = "^0.2.22", features = ["full"] }
 tokio = { version = "0.3.4", path = "../../tokio/tokio", features = ["full"] }
 parking_lot = "*"
Index: hyxe_crypt/Cargo.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[package]\r\nname = \"hyxe_crypt\"\r\nversion = \"0.1.0\"\r\nauthors = [\"Thomas Braun <tbraun96@gmail.com>\"]\r\nedition = \"2018\"\r\nworkspace = \"../\"\r\n\r\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\r\n\r\nexclude = [\r\n    \"./target/*\"\r\n]\r\n\r\n[dependencies]\r\nasync-trait = \"0.1.24\"\r\nbincode2 = \"2.0.1\"\r\nserde = { version=\"1.0.104\", features=[\"rc\", \"derive\"] }\r\nserde_derive = \"1.0.104\"\r\n#futures-preview = { version = \"=0.3.0-alpha.19\", features = [\"compat\", \"async-await\"]}\r\nfutures = \"0.3.5\"\r\nlog = { version = \"0.4.8\", features = [\"std\", \"max_level_trace\", \"release_max_level_error\"] }\r\nzerocopy = \"0.2.8\"\r\nbyteorder = \"1.3.2\"\r\nbytes = \"0.6.0\"\r\nnum-integer = \"0.1.43\"\r\nrand = \"0.7.0\"\r\nas-slice = \"0.1.3\"\r\nrayon = \"1.3.0\"\r\nsecstr = \"0.4.0\"\r\nez_pqcrypto = { path = \"../ez_pqcrypto\", version = \"0.1.1\" }\r\nbitvec = \"0.17.4\"\r\nenv_logger = \"0.7.1\"\r\nparking_lot = \"0.11.0\"\r\nbigdecimal = \"0.2.0\"\r\nzeroize = \"1.1.1\"\r\n\r\n[target.'cfg(not(target_os = \"windows\"))'.dependencies]\r\nlibc = \"0.2.80\"\r\n\r\n[target.'cfg(target_os = \"windows\")'.dependencies]\r\nkernel32-sys = \"0.2.2\"\r\n\r\n[dev-dependencies]\r\ncriterion = \"*\"
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hyxe_crypt/Cargo.toml b/hyxe_crypt/Cargo.toml
--- a/hyxe_crypt/Cargo.toml	(revision bc150d7311557fd666684082d183891298012257)
+++ b/hyxe_crypt/Cargo.toml	(date 1607206568047)
@@ -17,7 +17,7 @@
 serde = { version="1.0.104", features=["rc", "derive"] }
 serde_derive = "1.0.104"
 #futures-preview = { version = "=0.3.0-alpha.19", features = ["compat", "async-await"]}
-futures = "0.3.5"
+futures = "0.3.8"
 log = { version = "0.4.8", features = ["std", "max_level_trace", "release_max_level_error"] }
 zerocopy = "0.2.8"
 byteorder = "1.3.2"
Index: hyxe_net/src/constants.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>pub const BUILD_VERSION: usize = 901;\r\n/// Signal for closing the stream_wrapper\r\npub const STREAM_SHUTDOWN: u8 = 0;\r\n/// Signal for restarting the stream_wrapper\r\npub const STREAM_RESTART: u8 = 1;\r\n/// Each [HdpSession] will be polled twice per second to ensure validity of connection\r\npub const CONNECTION_HANDLER_POLL_INTERVAL: std::time::Duration = std::time::Duration::from_millis(1000);\r\n/// If NoDelay is set, then wave packets are sent outbound immediately\r\npub const HDP_NODELAY: bool = false;\r\n/// by default, TCP_ONLY is true since the MQ-UDP is experimental\r\npub const TCP_ONLY: bool = true;\r\n/// Id HDP_NODELAY is false, then the payload of a wave is sent after HDP_WAVE_PAYLOAD_DELAY time\r\npub const HDP_WAVE_PAYLOAD_DELAY: std::time::Duration = std::time::Duration::from_millis(250);\r\n/// For calculating network latency\r\npub const NANOSECONDS_PER_SECOND: i64 = 1_000_000_000;\r\n/// The length of an ethernet header. Source: https://app.netrounds.com/static/2.24/support/defs-notes/l2-eth-frame-sizes.html\r\npub const LAYER2_ETHERNET_HEADER_BYTE_LEN: usize = 18;\r\n/// The IPv4 Header len\r\npub const LAYER3_IPV4_HEADER_BYTE_LEN: usize = 20;\r\n/// The IPv6 Header len\r\npub const LAYER3_IPV6_HEADER_BYTE_LEN: usize = 40;\r\n/// The UDP header len\r\npub const UDP_HEADER_BYTE_LEN: usize = 8;\r\n/// The HDP header len\r\npub const HDP_HEADER_BYTE_LEN: usize = 52; // was 44, moved to 52\r\n/// Assuming IPv6, this is the smallest MTU possible\r\npub const MTU: usize = 1280;\r\n/// Total length of a packet's header\r\npub const BASE_HEADER_LEN_IPV4: usize = LAYER2_ETHERNET_HEADER_BYTE_LEN + LAYER3_IPV4_HEADER_BYTE_LEN + UDP_HEADER_BYTE_LEN + HDP_HEADER_BYTE_LEN;\r\n/// Total length of a packet's header\r\npub const BASE_HEADER_LEN_IPV6: usize = LAYER2_ETHERNET_HEADER_BYTE_LEN + LAYER3_IPV6_HEADER_BYTE_LEN + UDP_HEADER_BYTE_LEN + HDP_HEADER_BYTE_LEN;\r\n/// This is the maximum size an IPv4's packet can be\r\npub const MAX_PAYLOAD_SIZE_IPV4: usize = MTU - BASE_HEADER_LEN_IPV4;\r\n/// This is the maximum size an IPv6's packet can be\r\npub const MAX_PAYLOAD_SIZE_IPV6: usize = MTU - BASE_HEADER_LEN_IPV6;\r\n/// the initial reconnect delay\r\npub const INITIAL_RECONNECT_LOCKOUT_TIME_NS: i64 = NANOSECONDS_PER_SECOND;\r\n///\r\npub const KEEP_ALIVE_INTERVAL_MS: u64 = 15000;\r\n/// The keep alive max interval\r\npub const KEEP_ALIVE_TIMEOUT_NS: i64 = (KEEP_ALIVE_INTERVAL_MS * 3 * 1_000_000) as i64;\r\n// 1ms = 1 million ns\r\n/// Timeout for the drill update subroutine\r\npub const DRILL_UPDATE_TIMEOUT_NS: i64 = KEEP_ALIVE_TIMEOUT_NS;\r\n/// For setting up the GroupReceivers\r\npub const GROUP_TIMEOUT_MS: usize = KEEP_ALIVE_INTERVAL_MS as usize;\r\n///\r\npub const INDIVIDUAL_WAVE_TIMEOUT_MS: usize = GROUP_TIMEOUT_MS / 2;\r\n///\r\npub const DO_DEREGISTER_EXPIRE_TIME_NS: i64 = KEEP_ALIVE_TIMEOUT_NS;\r\n\r\n/// The frequency at which KEEP_ALIVES need to be sent through the system\r\npub const FIREWALL_KEEP_ALIVE_UDP: std::time::Duration = std::time::Duration::from_secs(60);\r\n/// The largest size, in bytes, that a single group can hold (~8 Megs)\r\npub const MAX_GROUP_SIZE_BYTES: usize = 1_000_000 * 8;\r\n/// How many bytes are stored\r\npub const CODEC_BUFFER_CAPACITY: usize = u16::max_value() as usize;\r\n/// The minimum number of bytes allocated in the codec\r\npub const CODEC_MIN_BUFFER: usize = 8192;\r\n\r\n/// After the time defined below, any incomplete packet groups will be discarded\r\npub const GROUP_EXPIRE_TIME_MS: std::time::Duration = std::time::Duration::from_millis(4000);\r\n/// After this time, the registration state is invalidated\r\npub const DO_REGISTER_EXPIRE_TIME_MS: std::time::Duration = std::time::Duration::from_millis(4000);\r\n/// After this time, the connect state is invalidated\r\npub const DO_CONNECT_EXPIRE_TIME_MS: std::time::Duration = std::time::Duration::from_millis(8000);\r\n/// After this timeout,\r\npub const UPNP_FIREWALL_LOAD_TIMEOUT: std::time::Duration = std::time::Duration::from_millis(1500);\r\npub const MULTIPORT_START: u16 = 25000;\r\n///\r\n//pub const MULTIPORT_END: u16 = hyxe_crypt::drill::PORT_RANGE as u16 + MULTIPORT_START;\r\npub const MULTIPORT_END: u16 = 1 + MULTIPORT_START;\r\n///\r\npub const PRIMARY_PORT: u16 = 25021;\r\npub const DEFAULT_PQC_ALGORITHM: u8 = ez_pqcrypto::algorithm_dictionary::FIRESABER;\r\n/// The minimum time (in nanoseconds) per drill update (nanoseconds per update)\r\npub const DRILL_UPDATE_FREQUENCY_LOW_BASE: u64 = 1 * 240 * 1_000_000_000;\r\n/// The minimum time (in nanoseconds) per drill update (nanoseconds per update)\r\npub const DRILL_UPDATE_FREQUENCY_MEDIUM_BASE: u64 = 1 * 240 * 1_000_000_000;\r\n/// The minimum time (in nanoseconds) per drill update (nanoseconds per update)\r\npub const DRILL_UPDATE_FREQUENCY_HIGH_BASE: u64 = 1 * 240 * 1_000_000_000;\r\n/// The minimum time (in nanoseconds) per drill update (nanoseconds per update)\r\npub const DRILL_UPDATE_FREQUENCY_ULTRA_BASE: u64 = 1 * 240 * 1_000_000_000;\r\n/// The minimum time (in nanoseconds) per drill update (nanoseconds per update)\r\npub const DRILL_UPDATE_FREQUENCY_DIVINE_BASE: u64 = 1 * 240 * 1_000_000_000;\r\n\r\n/// For ensuring that the hole-punching process begin at about the same time (required)\r\n/// this is applied to the ping. If the ping is 200ms, the a multiplier of 2.0 will mean that in 200*2.0 = 400ms,\r\n/// the hole-punching process will begin\r\npub const HOLE_PUNCH_SYNC_TIME_MULTIPLIER: f64 = 2.0f64;\r\n/// The maximum number of signals per peer mailbox\r\npub const PEER_EVENT_MAILBOX_SIZE: usize = 50;\r\n///\r\npub const TIMED_TICKET_LIFETIME: std::time::Duration = std::time::Duration::from_secs(30);\r\n/// the preconnect + connect stage will be limited by this duration\r\npub const LOGIN_EXPIRATION_TIME: std::time::Duration = std::time::Duration::from_secs(8);\r\n/// Every 30 minutes, resync the clocks. This was to fix bugs related to long-lasting connections and reconnections\r\npub const NTP_RESYNC_FREQUENCY: std::time::Duration = std::time::Duration::from_secs(60*30);\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hyxe_net/src/constants.rs b/hyxe_net/src/constants.rs
--- a/hyxe_net/src/constants.rs	(revision bc150d7311557fd666684082d183891298012257)
+++ b/hyxe_net/src/constants.rs	(date 1607206707659)
@@ -1,4 +1,4 @@
-pub const BUILD_VERSION: usize = 901;
+pub const BUILD_VERSION: usize = 908;
 /// Signal for closing the stream_wrapper
 pub const STREAM_SHUTDOWN: u8 = 0;
 /// Signal for restarting the stream_wrapper
Index: Cargo.lock
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># This file is automatically @generated by Cargo.\r\n# It is not intended for manual editing.\r\n[[package]]\r\nname = \"addr2line\"\r\nversion = \"0.13.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"1b6a2d3371669ab3ca9797670853d61402b03d0b4b9ebf33d677dfa720203072\"\r\ndependencies = [\r\n \"gimli\",\r\n]\r\n\r\n[[package]]\r\nname = \"adler\"\r\nversion = \"0.2.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"ee2a4ec343196209d6594e19543ae87a39f96d5534d7174822a3ad825dd6ed7e\"\r\n\r\n[[package]]\r\nname = \"aead\"\r\nversion = \"0.3.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"7fc95d1bdb8e6666b2b217308eeeb09f2d6728d104be3e31916cc74d15420331\"\r\ndependencies = [\r\n \"generic-array 0.14.4\",\r\n \"heapless\",\r\n]\r\n\r\n[[package]]\r\nname = \"aes\"\r\nversion = \"0.4.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"f7001367fde4c768a19d1029f0a8be5abd9308e1119846d5bd9ad26297b8faf5\"\r\ndependencies = [\r\n \"aes-soft\",\r\n \"aesni\",\r\n \"block-cipher 0.7.1\",\r\n]\r\n\r\n[[package]]\r\nname = \"aes-gcm-siv\"\r\nversion = \"0.5.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"d1a12c10cd2b4a69bca3be6c79f295b95d974599f488f992c0e9fa90f7ee5a7e\"\r\ndependencies = [\r\n \"aead\",\r\n \"aes\",\r\n \"block-cipher 0.7.1\",\r\n \"polyval\",\r\n \"subtle\",\r\n \"zeroize\",\r\n]\r\n\r\n[[package]]\r\nname = \"aes-soft\"\r\nversion = \"0.4.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"4925647ee64e5056cf231608957ce7c81e12d6d6e316b9ce1404778cc1d35fa7\"\r\ndependencies = [\r\n \"block-cipher 0.7.1\",\r\n \"byteorder\",\r\n \"opaque-debug\",\r\n]\r\n\r\n[[package]]\r\nname = \"aesni\"\r\nversion = \"0.7.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"d050d39b0b7688b3a3254394c3e30a9d66c41dcf9b05b0e2dbdc623f6505d264\"\r\ndependencies = [\r\n \"block-cipher 0.7.1\",\r\n \"opaque-debug\",\r\n]\r\n\r\n[[package]]\r\nname = \"aho-corasick\"\r\nversion = \"0.7.13\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"043164d8ba5c4c3035fec9bbee8647c0261d788f3474306f93bb65901cae0e86\"\r\ndependencies = [\r\n \"memchr\",\r\n]\r\n\r\n[[package]]\r\nname = \"android_log-sys\"\r\nversion = \"0.2.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"85965b6739a430150bdd138e2374a98af0c3ee0d030b3bb7fc3bddff58d0102e\"\r\n\r\n[[package]]\r\nname = \"android_logger\"\r\nversion = \"0.9.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"5027a747b8132dc36dc894415a300aab31d6489ee788e9ba07bc99558b1278ca\"\r\ndependencies = [\r\n \"android_log-sys\",\r\n \"env_logger\",\r\n \"lazy_static\",\r\n \"log 0.4.11\",\r\n]\r\n\r\n[[package]]\r\nname = \"ansi_term\"\r\nversion = \"0.11.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\r\ndependencies = [\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"arc-swap\"\r\nversion = \"0.4.7\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"4d25d88fd6b8041580a654f9d0c581a047baee2b3efee13275f2fc392fc75034\"\r\n\r\n[[package]]\r\nname = \"argon2rs\"\r\nversion = \"0.2.5\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"3f67b0b6a86dae6e67ff4ca2b6201396074996379fba2b92ff649126f37cb392\"\r\ndependencies = [\r\n \"blake2-rfc\",\r\n \"scoped_threadpool\",\r\n]\r\n\r\n[[package]]\r\nname = \"arrayref\"\r\nversion = \"0.3.6\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"a4c527152e37cf757a3f78aae5a06fbeefdb07ccc535c980a3208ee3060dd544\"\r\n\r\n[[package]]\r\nname = \"arrayvec\"\r\nversion = \"0.4.12\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"cd9fd44efafa8690358b7408d253adf110036b88f55672a933f01d616ad9b1b9\"\r\ndependencies = [\r\n \"nodrop\",\r\n]\r\n\r\n[[package]]\r\nname = \"arrayvec\"\r\nversion = \"0.5.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"cff77d8686867eceff3105329d4698d96c2391c176d5d03adc90c7389162b5b8\"\r\n\r\n[[package]]\r\nname = \"as-slice\"\r\nversion = \"0.1.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"37dfb65bc03b2bc85ee827004f14a6817e04160e3b1a28931986a666a9290e70\"\r\ndependencies = [\r\n \"generic-array 0.12.3\",\r\n \"generic-array 0.13.2\",\r\n \"stable_deref_trait\",\r\n]\r\n\r\n[[package]]\r\nname = \"async-trait\"\r\nversion = \"0.1.38\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"6e1a4a2f97ce50c9d0282c1468816208588441492b40d813b2e0419c22c05e7f\"\r\ndependencies = [\r\n \"proc-macro2 1.0.24\",\r\n \"quote 1.0.7\",\r\n \"syn 1.0.53\",\r\n]\r\n\r\n[[package]]\r\nname = \"async_ip\"\r\nversion = \"0.1.0\"\r\ndependencies = [\r\n \"reqwest\",\r\n \"tokio 0.2.22\",\r\n]\r\n\r\n[[package]]\r\nname = \"async_udt\"\r\nversion = \"0.1.0\"\r\ndependencies = [\r\n \"tokio 0.2.22\",\r\n \"udt\",\r\n]\r\n\r\n[[package]]\r\nname = \"atomic\"\r\nversion = \"0.5.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"c3410529e8288c463bedb5930f82833bc0c90e5d2fe639a56582a4d09220b281\"\r\ndependencies = [\r\n \"autocfg\",\r\n]\r\n\r\n[[package]]\r\nname = \"attohttpc\"\r\nversion = \"0.10.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"baf13118df3e3dce4b5ac930641343b91b656e4e72c8f8325838b01a4b1c9d45\"\r\ndependencies = [\r\n \"http\",\r\n \"log 0.4.11\",\r\n \"url\",\r\n]\r\n\r\n[[package]]\r\nname = \"atty\"\r\nversion = \"0.2.14\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\r\ndependencies = [\r\n \"hermit-abi\",\r\n \"libc\",\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"autocfg\"\r\nversion = \"1.0.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"cdb031dd78e28731d87d56cc8ffef4a8f36ca26c38fe2de700543e627f8a464a\"\r\n\r\n[[package]]\r\nname = \"backtrace\"\r\nversion = \"0.3.50\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"46254cf2fdcdf1badb5934448c1bcbe046a56537b3987d96c51a7afc5d03f293\"\r\ndependencies = [\r\n \"addr2line\",\r\n \"cfg-if 0.1.10\",\r\n \"libc\",\r\n \"miniz_oxide\",\r\n \"object\",\r\n \"rustc-demangle\",\r\n]\r\n\r\n[[package]]\r\nname = \"base64\"\r\nversion = \"0.12.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"3441f0f7b02788e948e47f457ca01f1d7e6d92c693bc132c22b087d3141c03ff\"\r\n\r\n[[package]]\r\nname = \"base64\"\r\nversion = \"0.13.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"904dfeac50f3cdaba28fc6f57fdcddb75f49ed61346676a78c4ffe55877802fd\"\r\n\r\n[[package]]\r\nname = \"bigdecimal\"\r\nversion = \"0.2.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"cc403c26e6b03005522e6e8053384c4e881dfe5b2bf041c0c2c49be33d64a539\"\r\ndependencies = [\r\n \"num-bigint 0.3.0\",\r\n \"num-integer\",\r\n \"num-traits\",\r\n]\r\n\r\n[[package]]\r\nname = \"bincode2\"\r\nversion = \"2.0.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"f49f6183038e081170ebbbadee6678966c7d54728938a3e7de7f4e780770318f\"\r\ndependencies = [\r\n \"byteorder\",\r\n \"serde\",\r\n]\r\n\r\n[[package]]\r\nname = \"bitflags\"\r\nversion = \"0.7.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"aad18937a628ec6abcd26d1489012cc0e18c21798210f491af69ded9b881106d\"\r\n\r\n[[package]]\r\nname = \"bitflags\"\r\nversion = \"1.2.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693\"\r\n\r\n[[package]]\r\nname = \"bitvec\"\r\nversion = \"0.17.4\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"41262f11d771fd4a61aa3ce019fca363b4b6c282fca9da2a31186d3965a47a5c\"\r\ndependencies = [\r\n \"either\",\r\n \"radium\",\r\n]\r\n\r\n[[package]]\r\nname = \"blake2-rfc\"\r\nversion = \"0.2.18\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"5d6d530bdd2d52966a6d03b7a964add7ae1a288d25214066fd4b600f0f796400\"\r\ndependencies = [\r\n \"arrayvec 0.4.12\",\r\n \"constant_time_eq\",\r\n]\r\n\r\n[[package]]\r\nname = \"blake2b_simd\"\r\nversion = \"0.5.10\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"d8fb2d74254a3a0b5cac33ac9f8ed0e44aa50378d9dbb2e5d83bd21ed1dc2c8a\"\r\ndependencies = [\r\n \"arrayref\",\r\n \"arrayvec 0.5.1\",\r\n \"constant_time_eq\",\r\n]\r\n\r\n[[package]]\r\nname = \"block-cipher\"\r\nversion = \"0.7.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"fa136449e765dc7faa244561ccae839c394048667929af599b5d931ebe7b7f10\"\r\ndependencies = [\r\n \"generic-array 0.14.4\",\r\n]\r\n\r\n[[package]]\r\nname = \"block-cipher\"\r\nversion = \"0.8.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"f337a3e6da609650eb74e02bc9fac7b735049f7623ab12f2e4c719316fcc7e80\"\r\ndependencies = [\r\n \"generic-array 0.14.4\",\r\n]\r\n\r\n[[package]]\r\nname = \"bstr\"\r\nversion = \"0.2.13\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"31accafdb70df7871592c058eca3985b71104e15ac32f64706022c58867da931\"\r\ndependencies = [\r\n \"lazy_static\",\r\n \"memchr\",\r\n \"regex-automata\",\r\n \"serde\",\r\n]\r\n\r\n[[package]]\r\nname = \"bumpalo\"\r\nversion = \"3.4.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"2e8c087f005730276d1096a652e92a8bacee2e2472bcc9715a74d2bec38b5820\"\r\n\r\n[[package]]\r\nname = \"byteorder\"\r\nversion = \"1.3.4\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"08c48aae112d48ed9f069b33538ea9e3e90aa263cfa3d1c24309612b1f7472de\"\r\n\r\n[[package]]\r\nname = \"bytes\"\r\nversion = \"0.5.6\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"0e4cec68f03f32e44924783795810fa50a7035d8c8ebe78580ad7e6c703fba38\"\r\n\r\n[[package]]\r\nname = \"bytes\"\r\nversion = \"0.6.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"e0dcbc35f504eb6fc275a6d20e4ebcda18cf50d40ba6fabff8c711fa16cb3b16\"\r\n\r\n[[package]]\r\nname = \"cast\"\r\nversion = \"0.2.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"4b9434b9a5aa1450faa3f9cb14ea0e8c53bb5d2b3c1bfd1ab4fc03e9f33fbfb0\"\r\ndependencies = [\r\n \"rustc_version\",\r\n]\r\n\r\n[[package]]\r\nname = \"cc\"\r\nversion = \"1.0.59\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"66120af515773fb005778dc07c261bd201ec8ce50bd6e7144c927753fe013381\"\r\ndependencies = [\r\n \"jobserver\",\r\n]\r\n\r\n[[package]]\r\nname = \"cesu8\"\r\nversion = \"1.1.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"6d43a04d8753f35258c91f8ec639f792891f748a1edbd759cf1dcea3382ad83c\"\r\n\r\n[[package]]\r\nname = \"cfg-if\"\r\nversion = \"0.1.10\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\r\n\r\n[[package]]\r\nname = \"cfg-if\"\r\nversion = \"1.0.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\r\n\r\n[[package]]\r\nname = \"chacha20\"\r\nversion = \"0.5.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"244fbce0d47e97e8ef2f63b81d5e05882cb518c68531eb33194990d7b7e85845\"\r\ndependencies = [\r\n \"stream-cipher\",\r\n \"zeroize\",\r\n]\r\n\r\n[[package]]\r\nname = \"chacha20poly1305\"\r\nversion = \"0.6.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"9bf18d374d66df0c05cdddd528a7db98f78c28e2519b120855c4f84c5027b1f5\"\r\ndependencies = [\r\n \"aead\",\r\n \"chacha20\",\r\n \"poly1305\",\r\n \"stream-cipher\",\r\n \"zeroize\",\r\n]\r\n\r\n[[package]]\r\nname = \"chrono\"\r\nversion = \"0.4.15\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"942f72db697d8767c22d46a598e01f2d3b475501ea43d0db4f16d90259182d0b\"\r\ndependencies = [\r\n \"num-integer\",\r\n \"num-traits\",\r\n \"time\",\r\n]\r\n\r\n[[package]]\r\nname = \"circular-queue\"\r\nversion = \"0.2.6\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"1d34327ead1c743a10db339de35fb58957564b99d248a67985c55638b22c59b5\"\r\ndependencies = [\r\n \"version_check\",\r\n]\r\n\r\n[[package]]\r\nname = \"clap\"\r\nversion = \"2.33.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"37e58ac78573c40708d45522f0d80fa2f01cc4f9b4e2bf749807255454312002\"\r\ndependencies = [\r\n \"ansi_term\",\r\n \"atty\",\r\n \"bitflags 1.2.1\",\r\n \"strsim\",\r\n \"textwrap\",\r\n \"unicode-width\",\r\n \"vec_map\",\r\n]\r\n\r\n[[package]]\r\nname = \"cloudabi\"\r\nversion = \"0.0.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\r\ndependencies = [\r\n \"bitflags 1.2.1\",\r\n]\r\n\r\n[[package]]\r\nname = \"cloudabi\"\r\nversion = \"0.1.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"4344512281c643ae7638bbabc3af17a11307803ec8f0fcad9fae512a8bf36467\"\r\ndependencies = [\r\n \"bitflags 1.2.1\",\r\n]\r\n\r\n[[package]]\r\nname = \"colour\"\r\nversion = \"0.5.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"1521ddca57b17754d76fc6126dae3064846889c2143634452a0e1569e25913dc\"\r\ndependencies = [\r\n \"crossterm 0.16.0\",\r\n]\r\n\r\n[[package]]\r\nname = \"combine\"\r\nversion = \"4.3.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"8aa333852c744df9b867733c71889e5120b55117b25ddc8a2d88dc5d9df5edea\"\r\ndependencies = [\r\n \"bytes 0.5.6\",\r\n \"memchr\",\r\n \"pin-project-lite 0.1.10\",\r\n]\r\n\r\n[[package]]\r\nname = \"constant_time_eq\"\r\nversion = \"0.1.5\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"245097e9a4535ee1e3e3931fcfcd55a796a44c643e8596ff6566d68f09b87bbc\"\r\n\r\n[[package]]\r\nname = \"core-foundation\"\r\nversion = \"0.7.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"57d24c7a13c43e870e37c1556b74555437870a04514f7685f5b354e090567171\"\r\ndependencies = [\r\n \"core-foundation-sys\",\r\n \"libc\",\r\n]\r\n\r\n[[package]]\r\nname = \"core-foundation-sys\"\r\nversion = \"0.7.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"b3a71ab494c0b5b860bdc8407ae08978052417070c2ced38573a9157ad75b8ac\"\r\n\r\n[[package]]\r\nname = \"criterion\"\r\nversion = \"0.3.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"70daa7ceec6cf143990669a04c7df13391d55fb27bd4079d252fca774ba244d8\"\r\ndependencies = [\r\n \"atty\",\r\n \"cast\",\r\n \"clap\",\r\n \"criterion-plot\",\r\n \"csv\",\r\n \"itertools\",\r\n \"lazy_static\",\r\n \"num-traits\",\r\n \"oorandom\",\r\n \"plotters\",\r\n \"rayon\",\r\n \"regex\",\r\n \"serde\",\r\n \"serde_cbor\",\r\n \"serde_derive\",\r\n \"serde_json\",\r\n \"tinytemplate\",\r\n \"walkdir\",\r\n]\r\n\r\n[[package]]\r\nname = \"criterion-plot\"\r\nversion = \"0.4.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"e022feadec601fba1649cfa83586381a4ad31c6bf3a9ab7d408118b05dd9889d\"\r\ndependencies = [\r\n \"cast\",\r\n \"itertools\",\r\n]\r\n\r\n[[package]]\r\nname = \"crossbeam-channel\"\r\nversion = \"0.4.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"09ee0cc8804d5393478d743b035099520087a5186f3b93fa58cec08fa62407b6\"\r\ndependencies = [\r\n \"cfg-if 0.1.10\",\r\n \"crossbeam-utils 0.7.2\",\r\n]\r\n\r\n[[package]]\r\nname = \"crossbeam-deque\"\r\nversion = \"0.7.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"9f02af974daeee82218205558e51ec8768b48cf524bd01d550abe5573a608285\"\r\ndependencies = [\r\n \"crossbeam-epoch\",\r\n \"crossbeam-utils 0.7.2\",\r\n \"maybe-uninit\",\r\n]\r\n\r\n[[package]]\r\nname = \"crossbeam-epoch\"\r\nversion = \"0.8.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"058ed274caafc1f60c4997b5fc07bf7dc7cca454af7c6e81edffe5f33f70dace\"\r\ndependencies = [\r\n \"autocfg\",\r\n \"cfg-if 0.1.10\",\r\n \"crossbeam-utils 0.7.2\",\r\n \"lazy_static\",\r\n \"maybe-uninit\",\r\n \"memoffset\",\r\n \"scopeguard\",\r\n]\r\n\r\n[[package]]\r\nname = \"crossbeam-utils\"\r\nversion = \"0.7.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"c3c7c73a2d1e9fc0886a08b93e98eb643461230d5f1925e4036204d5f2e261a8\"\r\ndependencies = [\r\n \"autocfg\",\r\n \"cfg-if 0.1.10\",\r\n \"lazy_static\",\r\n]\r\n\r\n[[package]]\r\nname = \"crossbeam-utils\"\r\nversion = \"0.8.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"02d96d1e189ef58269ebe5b97953da3274d83a93af647c2ddd6f9dab28cedb8d\"\r\ndependencies = [\r\n \"autocfg\",\r\n \"cfg-if 1.0.0\",\r\n \"lazy_static\",\r\n]\r\n\r\n[[package]]\r\nname = \"crossterm\"\r\nversion = \"0.16.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"b8a3223215bc00c666d6be730e88aef245ad4a4f837e87a16c347e8acf701643\"\r\ndependencies = [\r\n \"bitflags 1.2.1\",\r\n \"crossterm_winapi\",\r\n \"lazy_static\",\r\n \"libc\",\r\n \"mio 0.6.22\",\r\n \"parking_lot 0.10.2\",\r\n \"signal-hook\",\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"crossterm\"\r\nversion = \"0.18.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"c2fcdc3c9cf8ee446222e8ee8691a6d21b563b8fe1a64b1873080db7b5b23cf0\"\r\ndependencies = [\r\n \"bitflags 1.2.1\",\r\n \"crossterm_winapi\",\r\n \"lazy_static\",\r\n \"libc\",\r\n \"mio 0.7.6\",\r\n \"parking_lot 0.11.0\",\r\n \"signal-hook\",\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"crossterm_winapi\"\r\nversion = \"0.6.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"057b7146d02fb50175fd7dbe5158f6097f33d02831f43b4ee8ae4ddf67b68f5c\"\r\ndependencies = [\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"csv\"\r\nversion = \"1.1.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"00affe7f6ab566df61b4be3ce8cf16bc2576bca0963ceb0955e45d514bf9a279\"\r\ndependencies = [\r\n \"bstr\",\r\n \"csv-core\",\r\n \"itoa\",\r\n \"ryu\",\r\n \"serde\",\r\n]\r\n\r\n[[package]]\r\nname = \"csv-core\"\r\nversion = \"0.1.10\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"2b2466559f260f48ad25fe6317b3c8dac77b5bdb5763ac7d9d6103530663bc90\"\r\ndependencies = [\r\n \"memchr\",\r\n]\r\n\r\n[[package]]\r\nname = \"ctrlc\"\r\nversion = \"3.1.6\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"d0b676fa23f995faf587496dcd1c80fead847ed58d2da52ac1caca9a72790dd2\"\r\ndependencies = [\r\n \"nix\",\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"dirs\"\r\nversion = \"1.0.5\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"3fd78930633bd1c6e35c4b42b1df7b0cbc6bc191146e512bb3bedf243fcc3901\"\r\ndependencies = [\r\n \"libc\",\r\n \"redox_users 0.3.5\",\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"dirs\"\r\nversion = \"2.0.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"13aea89a5c93364a98e9b37b2fa237effbb694d5cfe01c5b70941f7eb087d5e3\"\r\ndependencies = [\r\n \"cfg-if 0.1.10\",\r\n \"dirs-sys\",\r\n]\r\n\r\n[[package]]\r\nname = \"dirs\"\r\nversion = \"3.0.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"142995ed02755914747cc6ca76fc7e4583cd18578746716d0508ea6ed558b9ff\"\r\ndependencies = [\r\n \"dirs-sys\",\r\n]\r\n\r\n[[package]]\r\nname = \"dirs-2\"\r\nversion = \"1.1.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"50b7e2b65c73137ec48935d50a5ae89b03150df566b7e14a1371df044e76765c\"\r\ndependencies = [\r\n \"libc\",\r\n \"redox_users 0.2.0\",\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"dirs-sys\"\r\nversion = \"0.3.5\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"8e93d7f5705de3e49895a2b5e0b8855a1c27f080192ae9c32a6432d50741a57a\"\r\ndependencies = [\r\n \"libc\",\r\n \"redox_users 0.3.5\",\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"dtoa\"\r\nversion = \"0.4.6\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"134951f4028bdadb9b84baf4232681efbf277da25144b9b0ad65df75946c422b\"\r\n\r\n[[package]]\r\nname = \"either\"\r\nversion = \"1.6.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"cd56b59865bce947ac5958779cfa508f6c3b9497cc762b7e24a12d11ccde2c4f\"\r\n\r\n[[package]]\r\nname = \"encode_unicode\"\r\nversion = \"0.3.6\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\r\n\r\n[[package]]\r\nname = \"encoding_rs\"\r\nversion = \"0.8.24\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"a51b8cf747471cb9499b6d59e59b0444f4c90eba8968c4e44874e92b5b64ace2\"\r\ndependencies = [\r\n \"cfg-if 0.1.10\",\r\n]\r\n\r\n[[package]]\r\nname = \"env_logger\"\r\nversion = \"0.7.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"44533bbbb3bb3c1fa17d9f2e4e38bbbaf8396ba82193c4cb1b6445d711445d36\"\r\ndependencies = [\r\n \"atty\",\r\n \"humantime\",\r\n \"log 0.4.11\",\r\n \"regex\",\r\n \"termcolor\",\r\n]\r\n\r\n[[package]]\r\nname = \"error-chain\"\r\nversion = \"0.12.4\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"2d2f06b9cac1506ece98fe3231e3cc9c4410ec3d5b1f24ae1c8946f0742cdefc\"\r\ndependencies = [\r\n \"version_check\",\r\n]\r\n\r\n[[package]]\r\nname = \"ez_pqcrypto\"\r\nversion = \"0.1.1\"\r\ndependencies = [\r\n \"aes-gcm-siv\",\r\n \"bytes 0.6.0\",\r\n \"chacha20poly1305\",\r\n \"circular-queue\",\r\n \"nanoserde\",\r\n \"parking_lot 0.11.0\",\r\n \"pqcrypto\",\r\n \"rand 0.7.3\",\r\n]\r\n\r\n[[package]]\r\nname = \"failure\"\r\nversion = \"0.1.8\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"d32e9bd16cc02eae7db7ef620b392808b89f6a5e16bb3497d159c6b92a0f4f86\"\r\ndependencies = [\r\n \"backtrace\",\r\n \"failure_derive\",\r\n]\r\n\r\n[[package]]\r\nname = \"failure_derive\"\r\nversion = \"0.1.8\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"aa4da3c766cd7a0db8242e326e9e4e081edd567072893ed320008189715366a4\"\r\ndependencies = [\r\n \"proc-macro2 1.0.24\",\r\n \"quote 1.0.7\",\r\n \"syn 1.0.53\",\r\n \"synstructure 0.12.4\",\r\n]\r\n\r\n[[package]]\r\nname = \"fnv\"\r\nversion = \"1.0.7\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\r\n\r\n[[package]]\r\nname = \"foreign-types\"\r\nversion = \"0.3.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\r\ndependencies = [\r\n \"foreign-types-shared\",\r\n]\r\n\r\n[[package]]\r\nname = \"foreign-types-shared\"\r\nversion = \"0.1.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\r\n\r\n[[package]]\r\nname = \"fuchsia-cprng\"\r\nversion = \"0.1.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"a06f77d526c1a601b7c4cdd98f54b5eaabffc14d5f2f0296febdc7f357c6d3ba\"\r\n\r\n[[package]]\r\nname = \"fuchsia-zircon\"\r\nversion = \"0.3.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82\"\r\ndependencies = [\r\n \"bitflags 1.2.1\",\r\n \"fuchsia-zircon-sys\",\r\n]\r\n\r\n[[package]]\r\nname = \"fuchsia-zircon-sys\"\r\nversion = \"0.3.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\r\n\r\n[[package]]\r\nname = \"futures\"\r\nversion = \"0.3.8\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"9b3b0c040a1fe6529d30b3c5944b280c7f0dcb2930d2c3062bca967b602583d0\"\r\ndependencies = [\r\n \"futures-channel\",\r\n \"futures-core\",\r\n \"futures-executor\",\r\n \"futures-io\",\r\n \"futures-sink\",\r\n \"futures-task\",\r\n \"futures-util\",\r\n]\r\n\r\n[[package]]\r\nname = \"futures-channel\"\r\nversion = \"0.3.8\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"4b7109687aa4e177ef6fe84553af6280ef2778bdb7783ba44c9dc3399110fe64\"\r\ndependencies = [\r\n \"futures-core\",\r\n \"futures-sink\",\r\n]\r\n\r\n[[package]]\r\nname = \"futures-core\"\r\nversion = \"0.3.8\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"847ce131b72ffb13b6109a221da9ad97a64cbe48feb1028356b836b47b8f1748\"\r\n\r\n[[package]]\r\nname = \"futures-executor\"\r\nversion = \"0.3.8\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"4caa2b2b68b880003057c1dd49f1ed937e38f22fcf6c212188a121f08cf40a65\"\r\ndependencies = [\r\n \"futures-core\",\r\n \"futures-task\",\r\n \"futures-util\",\r\n]\r\n\r\n[[package]]\r\nname = \"futures-io\"\r\nversion = \"0.3.8\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"611834ce18aaa1bd13c4b374f5d653e1027cf99b6b502584ff8c9a64413b30bb\"\r\n\r\n[[package]]\r\nname = \"futures-macro\"\r\nversion = \"0.3.8\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"77408a692f1f97bcc61dc001d752e00643408fbc922e4d634c655df50d595556\"\r\ndependencies = [\r\n \"proc-macro-hack\",\r\n \"proc-macro2 1.0.24\",\r\n \"quote 1.0.7\",\r\n \"syn 1.0.53\",\r\n]\r\n\r\n[[package]]\r\nname = \"futures-sink\"\r\nversion = \"0.3.8\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"f878195a49cee50e006b02b93cf7e0a95a38ac7b776b4c4d9cc1207cd20fcb3d\"\r\n\r\n[[package]]\r\nname = \"futures-task\"\r\nversion = \"0.3.8\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"7c554eb5bf48b2426c4771ab68c6b14468b6e76cc90996f528c3338d761a4d0d\"\r\ndependencies = [\r\n \"once_cell\",\r\n]\r\n\r\n[[package]]\r\nname = \"futures-util\"\r\nversion = \"0.3.8\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"d304cff4a7b99cfb7986f7d43fbe93d175e72e704a8860787cc95e9ffd85cbd2\"\r\ndependencies = [\r\n \"futures-channel\",\r\n \"futures-core\",\r\n \"futures-io\",\r\n \"futures-macro\",\r\n \"futures-sink\",\r\n \"futures-task\",\r\n \"memchr\",\r\n \"pin-project 1.0.2\",\r\n \"pin-utils\",\r\n \"proc-macro-hack\",\r\n \"proc-macro-nested\",\r\n \"slab\",\r\n]\r\n\r\n[[package]]\r\nname = \"generic-array\"\r\nversion = \"0.12.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"c68f0274ae0e023facc3c97b2e00f076be70e254bc851d972503b328db79b2ec\"\r\ndependencies = [\r\n \"typenum\",\r\n]\r\n\r\n[[package]]\r\nname = \"generic-array\"\r\nversion = \"0.13.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"0ed1e761351b56f54eb9dcd0cfaca9fd0daecf93918e1cfc01c8a3d26ee7adcd\"\r\ndependencies = [\r\n \"typenum\",\r\n]\r\n\r\n[[package]]\r\nname = \"generic-array\"\r\nversion = \"0.14.4\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"501466ecc8a30d1d3b7fc9229b122b2ce8ed6e9d9223f1138d4babb253e51817\"\r\ndependencies = [\r\n \"typenum\",\r\n \"version_check\",\r\n]\r\n\r\n[[package]]\r\nname = \"getrandom\"\r\nversion = \"0.1.14\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"7abc8dd8451921606d809ba32e95b6111925cd2906060d2dcc29c070220503eb\"\r\ndependencies = [\r\n \"cfg-if 0.1.10\",\r\n \"libc\",\r\n \"wasi 0.9.0+wasi-snapshot-preview1\",\r\n]\r\n\r\n[[package]]\r\nname = \"gimli\"\r\nversion = \"0.22.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"aaf91faf136cb47367fa430cd46e37a788775e7fa104f8b4bcb3861dc389b724\"\r\n\r\n[[package]]\r\nname = \"glob\"\r\nversion = \"0.3.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"9b919933a397b79c37e33b77bb2aa3dc8eb6e165ad809e58ff75bc7db2e34574\"\r\n\r\n[[package]]\r\nname = \"h2\"\r\nversion = \"0.2.6\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"993f9e0baeed60001cf565546b0d3dbe6a6ad23f2bd31644a133c641eccf6d53\"\r\ndependencies = [\r\n \"bytes 0.5.6\",\r\n \"fnv\",\r\n \"futures-core\",\r\n \"futures-sink\",\r\n \"futures-util\",\r\n \"http\",\r\n \"indexmap\",\r\n \"slab\",\r\n \"tokio 0.2.22\",\r\n \"tokio-util 0.3.1\",\r\n \"tracing\",\r\n]\r\n\r\n[[package]]\r\nname = \"half\"\r\nversion = \"1.6.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"d36fab90f82edc3c747f9d438e06cf0a491055896f2a279638bb5beed6c40177\"\r\n\r\n[[package]]\r\nname = \"hash32\"\r\nversion = \"0.1.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"d4041af86e63ac4298ce40e5cca669066e75b6f1aa3390fe2561ffa5e1d9f4cc\"\r\ndependencies = [\r\n \"byteorder\",\r\n]\r\n\r\n[[package]]\r\nname = \"hashbrown\"\r\nversion = \"0.8.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"e91b62f79061a0bc2e046024cb7ba44b08419ed238ecbd9adbd787434b9e8c25\"\r\ndependencies = [\r\n \"autocfg\",\r\n]\r\n\r\n[[package]]\r\nname = \"heapless\"\r\nversion = \"0.5.5\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"73a8a2391a3bc70b31f60e7a90daa5755a360559c0b6b9c5cfc0fee482362dc0\"\r\ndependencies = [\r\n \"as-slice\",\r\n \"generic-array 0.13.2\",\r\n \"hash32\",\r\n \"stable_deref_trait\",\r\n]\r\n\r\n[[package]]\r\nname = \"hermit-abi\"\r\nversion = \"0.1.15\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"3deed196b6e7f9e44a2ae8d94225d80302d81208b1bb673fd21fe634645c85a9\"\r\ndependencies = [\r\n \"libc\",\r\n]\r\n\r\n[[package]]\r\nname = \"http\"\r\nversion = \"0.2.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"28d569972648b2c512421b5f2a405ad6ac9666547189d0c5477a3f200f3e02f9\"\r\ndependencies = [\r\n \"bytes 0.5.6\",\r\n \"fnv\",\r\n \"itoa\",\r\n]\r\n\r\n[[package]]\r\nname = \"http-body\"\r\nversion = \"0.3.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"13d5ff830006f7646652e057693569bfe0d51760c0085a071769d142a205111b\"\r\ndependencies = [\r\n \"bytes 0.5.6\",\r\n \"http\",\r\n]\r\n\r\n[[package]]\r\nname = \"httparse\"\r\nversion = \"1.3.4\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"cd179ae861f0c2e53da70d892f5f3029f9594be0c41dc5269cd371691b1dc2f9\"\r\n\r\n[[package]]\r\nname = \"humantime\"\r\nversion = \"1.3.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"df004cfca50ef23c36850aaaa59ad52cc70d0e90243c3c7737a4dd32dc7a3c4f\"\r\ndependencies = [\r\n \"quick-error\",\r\n]\r\n\r\n[[package]]\r\nname = \"hyper\"\r\nversion = \"0.13.7\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"3e68a8dd9716185d9e64ea473ea6ef63529252e3e27623295a0378a19665d5eb\"\r\ndependencies = [\r\n \"bytes 0.5.6\",\r\n \"futures-channel\",\r\n \"futures-core\",\r\n \"futures-util\",\r\n \"h2\",\r\n \"http\",\r\n \"http-body\",\r\n \"httparse\",\r\n \"itoa\",\r\n \"pin-project 0.4.25\",\r\n \"socket2\",\r\n \"time\",\r\n \"tokio 0.2.22\",\r\n \"tower-service\",\r\n \"tracing\",\r\n \"want\",\r\n]\r\n\r\n[[package]]\r\nname = \"hyper-tls\"\r\nversion = \"0.4.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"d979acc56dcb5b8dddba3917601745e877576475aa046df3226eabdecef78eed\"\r\ndependencies = [\r\n \"bytes 0.5.6\",\r\n \"hyper\",\r\n \"native-tls\",\r\n \"tokio 0.2.22\",\r\n \"tokio-tls\",\r\n]\r\n\r\n[[package]]\r\nname = \"hyxe_config\"\r\nversion = \"0.1.0\"\r\ndependencies = [\r\n \"env_logger\",\r\n \"log 0.4.11\",\r\n \"tokio 0.2.22\",\r\n]\r\n\r\n[[package]]\r\nname = \"hyxe_crypt\"\r\nversion = \"0.1.0\"\r\ndependencies = [\r\n \"as-slice\",\r\n \"async-trait\",\r\n \"bigdecimal\",\r\n \"bincode2\",\r\n \"bitvec\",\r\n \"byteorder\",\r\n \"bytes 0.6.0\",\r\n \"criterion\",\r\n \"env_logger\",\r\n \"ez_pqcrypto\",\r\n \"futures\",\r\n \"kernel32-sys\",\r\n \"libc\",\r\n \"log 0.4.11\",\r\n \"num-integer\",\r\n \"parking_lot 0.11.0\",\r\n \"rand 0.7.3\",\r\n \"rayon\",\r\n \"secstr\",\r\n \"serde\",\r\n \"serde_derive\",\r\n \"zerocopy 0.2.8\",\r\n \"zeroize\",\r\n]\r\n\r\n[[package]]\r\nname = \"hyxe_fs\"\r\nversion = \"0.1.0\"\r\ndependencies = [\r\n \"async-trait\",\r\n \"bincode2\",\r\n \"byteorder\",\r\n \"bytes 0.6.0\",\r\n \"chrono\",\r\n \"dirs-2\",\r\n \"env_logger\",\r\n \"futures\",\r\n \"hyxe_crypt\",\r\n \"lazy_static\",\r\n \"log 0.4.11\",\r\n \"num 0.3.0\",\r\n \"num-bigint 0.3.0\",\r\n \"pin-project 0.4.25\",\r\n \"rand 0.7.3\",\r\n \"serde\",\r\n \"tokio 0.3.4\",\r\n \"zerocopy 0.2.8\",\r\n]\r\n\r\n[[package]]\r\nname = \"hyxe_nat\"\r\nversion = \"0.1.0\"\r\ndependencies = [\r\n \"arc-swap\",\r\n \"async-trait\",\r\n \"byteorder\",\r\n \"bytes 0.6.0\",\r\n \"env_logger\",\r\n \"futures\",\r\n \"igd\",\r\n \"log 0.4.11\",\r\n \"net2\",\r\n \"rsntp\",\r\n \"tokio 0.3.4\",\r\n \"whoami\",\r\n]\r\n\r\n[[package]]\r\nname = \"hyxe_net\"\r\nversion = \"0.1.0\"\r\ndependencies = [\r\n \"async-trait\",\r\n \"atomic\",\r\n \"bitvec\",\r\n \"bstr\",\r\n \"byteorder\",\r\n \"bytes 0.6.0\",\r\n \"either\",\r\n \"env_logger\",\r\n \"ez_pqcrypto\",\r\n \"futures\",\r\n \"hyxe_crypt\",\r\n \"hyxe_nat\",\r\n \"hyxe_user\",\r\n \"log 0.4.11\",\r\n \"nanoserde\",\r\n \"net2\",\r\n \"num 0.2.1\",\r\n \"num_cpus\",\r\n \"parking_lot 0.11.0\",\r\n \"rand 0.7.3\",\r\n \"rust-argon2\",\r\n \"secstr\",\r\n \"tokio 0.3.4\",\r\n \"tokio-util 0.5.0\",\r\n \"zerocopy 0.3.0\",\r\n]\r\n\r\n[[package]]\r\nname = \"hyxe_user\"\r\nversion = \"0.1.0\"\r\ndependencies = [\r\n \"async-trait\",\r\n \"bstr\",\r\n \"crossbeam-utils 0.7.2\",\r\n \"env_logger\",\r\n \"hyxe_fs\",\r\n \"lazy_static\",\r\n \"log 0.4.11\",\r\n \"multimap\",\r\n \"rand 0.7.3\",\r\n \"random\",\r\n \"secstr\",\r\n \"serde\",\r\n \"tokio 0.3.4\",\r\n]\r\n\r\n[[package]]\r\nname = \"hyxewave\"\r\nversion = \"0.1.0\"\r\ndependencies = [\r\n \"async-trait\",\r\n \"bytes 0.6.0\",\r\n \"clap\",\r\n \"colour\",\r\n \"crossterm 0.18.0\",\r\n \"ctrlc\",\r\n \"dirs 3.0.1\",\r\n \"env_logger\",\r\n \"futures-util\",\r\n \"hyxe_crypt\",\r\n \"hyxe_net\",\r\n \"hyxe_user\",\r\n \"lazy_static\",\r\n \"log 0.4.11\",\r\n \"parking_lot 0.11.0\",\r\n \"prettytable-rs\",\r\n \"serde\",\r\n \"serde_json\",\r\n \"termion\",\r\n \"tokio 0.3.4\",\r\n \"tokio-util 0.5.0\",\r\n]\r\n\r\n[[package]]\r\nname = \"idna\"\r\nversion = \"0.2.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"02e2673c30ee86b5b96a9cb52ad15718aa1f966f5ab9ad54a8b95d5ca33120a9\"\r\ndependencies = [\r\n \"matches\",\r\n \"unicode-bidi\",\r\n \"unicode-normalization\",\r\n]\r\n\r\n[[package]]\r\nname = \"igd\"\r\nversion = \"0.11.1\"\r\ndependencies = [\r\n \"attohttpc\",\r\n \"bytes 0.5.6\",\r\n \"futures\",\r\n \"http\",\r\n \"hyper\",\r\n \"log 0.4.11\",\r\n \"rand 0.7.3\",\r\n \"simplelog\",\r\n \"tokio 0.3.4\",\r\n \"url\",\r\n \"xmltree\",\r\n]\r\n\r\n[[package]]\r\nname = \"indexmap\"\r\nversion = \"1.5.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"86b45e59b16c76b11bf9738fd5d38879d3bd28ad292d7b313608becb17ae2df9\"\r\ndependencies = [\r\n \"autocfg\",\r\n \"hashbrown\",\r\n]\r\n\r\n[[package]]\r\nname = \"instant\"\r\nversion = \"0.1.6\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"5b141fdc7836c525d4d594027d318c84161ca17aaf8113ab1f81ab93ae897485\"\r\n\r\n[[package]]\r\nname = \"iovec\"\r\nversion = \"0.1.4\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"b2b3ea6ff95e175473f8ffe6a7eb7c00d054240321b84c57051175fe3c1e075e\"\r\ndependencies = [\r\n \"libc\",\r\n]\r\n\r\n[[package]]\r\nname = \"ipnet\"\r\nversion = \"2.3.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"47be2f14c678be2fdcab04ab1171db51b2762ce6f0a8ee87c8dd4a04ed216135\"\r\n\r\n[[package]]\r\nname = \"itertools\"\r\nversion = \"0.9.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"284f18f85651fe11e8a991b2adb42cb078325c996ed026d994719efcfca1d54b\"\r\ndependencies = [\r\n \"either\",\r\n]\r\n\r\n[[package]]\r\nname = \"itoa\"\r\nversion = \"0.4.6\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"dc6f3ad7b9d11a0c00842ff8de1b60ee58661048eb8049ed33c73594f359d7e6\"\r\n\r\n[[package]]\r\nname = \"jni\"\r\nversion = \"0.17.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"36bcc950632e48b86da402c5c077590583da5ac0d480103611d5374e7c967a3c\"\r\ndependencies = [\r\n \"cesu8\",\r\n \"combine\",\r\n \"error-chain\",\r\n \"jni-sys\",\r\n \"log 0.4.11\",\r\n \"walkdir\",\r\n]\r\n\r\n[[package]]\r\nname = \"jni-sys\"\r\nversion = \"0.3.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"8eaf4bc02d17cbdd7ff4c7438cafcdf7fb9a4613313ad11b4f8fefe7d3fa0130\"\r\n\r\n[[package]]\r\nname = \"jobserver\"\r\nversion = \"0.1.21\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"5c71313ebb9439f74b00d9d2dcec36440beaf57a6aa0623068441dd7cd81a7f2\"\r\ndependencies = [\r\n \"libc\",\r\n]\r\n\r\n[[package]]\r\nname = \"js-sys\"\r\nversion = \"0.3.44\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"85a7e2c92a4804dd459b86c339278d0fe87cf93757fae222c3fa3ae75458bc73\"\r\ndependencies = [\r\n \"wasm-bindgen\",\r\n]\r\n\r\n[[package]]\r\nname = \"kernel32-sys\"\r\nversion = \"0.2.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\r\ndependencies = [\r\n \"winapi 0.2.8\",\r\n \"winapi-build\",\r\n]\r\n\r\n[[package]]\r\nname = \"lazy_static\"\r\nversion = \"1.4.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\r\n\r\n[[package]]\r\nname = \"lazycell\"\r\nversion = \"1.3.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\r\n\r\n[[package]]\r\nname = \"libc\"\r\nversion = \"0.2.80\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"4d58d1b70b004888f764dfbf6a26a3b0342a1632d33968e4a179d8011c760614\"\r\n\r\n[[package]]\r\nname = \"libudt4-sys\"\r\nversion = \"0.2.1\"\r\ndependencies = [\r\n \"cc\",\r\n \"libc\",\r\n \"winapi 0.2.8\",\r\n]\r\n\r\n[[package]]\r\nname = \"lock_api\"\r\nversion = \"0.3.4\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"c4da24a77a3d8a6d4862d95f72e6fdb9c09a643ecdb402d754004a557f2bec75\"\r\ndependencies = [\r\n \"scopeguard\",\r\n]\r\n\r\n[[package]]\r\nname = \"lock_api\"\r\nversion = \"0.4.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"28247cc5a5be2f05fbcd76dd0cf2c7d3b5400cb978a28042abcd4fa0b3f8261c\"\r\ndependencies = [\r\n \"scopeguard\",\r\n]\r\n\r\n[[package]]\r\nname = \"log\"\r\nversion = \"0.3.9\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"e19e8d5c34a3e0e2223db8e060f9e8264aeeb5c5fc64a4ee9965c062211c024b\"\r\ndependencies = [\r\n \"log 0.4.11\",\r\n]\r\n\r\n[[package]]\r\nname = \"log\"\r\nversion = \"0.4.11\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"4fabed175da42fed1fa0746b0ea71f412aa9d35e76e95e59b192c64b9dc2bf8b\"\r\ndependencies = [\r\n \"cfg-if 0.1.10\",\r\n]\r\n\r\n[[package]]\r\nname = \"lusna_ffi\"\r\nversion = \"0.1.0\"\r\ndependencies = [\r\n \"android_logger\",\r\n \"hyxewave\",\r\n \"jni\",\r\n \"lazy_static\",\r\n \"libc\",\r\n \"log 0.4.11\",\r\n]\r\n\r\n[[package]]\r\nname = \"matches\"\r\nversion = \"0.1.8\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08\"\r\n\r\n[[package]]\r\nname = \"maybe-uninit\"\r\nversion = \"2.0.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"60302e4db3a61da70c0cb7991976248362f30319e88850c487b9b95bbf059e00\"\r\n\r\n[[package]]\r\nname = \"memchr\"\r\nversion = \"2.3.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"3728d817d99e5ac407411fa471ff9800a778d88a24685968b36824eaf4bee400\"\r\n\r\n[[package]]\r\nname = \"memoffset\"\r\nversion = \"0.5.5\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"c198b026e1bbf08a937e94c6c60f9ec4a2267f5b0d2eec9c1b21b061ce2be55f\"\r\ndependencies = [\r\n \"autocfg\",\r\n]\r\n\r\n[[package]]\r\nname = \"mime\"\r\nversion = \"0.3.16\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"2a60c7ce501c71e03a9c9c0d35b861413ae925bd979cc7a4e30d060069aaac8d\"\r\n\r\n[[package]]\r\nname = \"mime_guess\"\r\nversion = \"2.0.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"2684d4c2e97d99848d30b324b00c8fcc7e5c897b7cbb5819b09e7c90e8baf212\"\r\ndependencies = [\r\n \"mime\",\r\n \"unicase\",\r\n]\r\n\r\n[[package]]\r\nname = \"miniz_oxide\"\r\nversion = \"0.4.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"4d7559a8a40d0f97e1edea3220f698f78b1c5ab67532e49f68fde3910323b722\"\r\ndependencies = [\r\n \"adler\",\r\n]\r\n\r\n[[package]]\r\nname = \"mio\"\r\nversion = \"0.6.22\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"fce347092656428bc8eaf6201042cb551b8d67855af7374542a92a0fbfcac430\"\r\ndependencies = [\r\n \"cfg-if 0.1.10\",\r\n \"fuchsia-zircon\",\r\n \"fuchsia-zircon-sys\",\r\n \"iovec\",\r\n \"kernel32-sys\",\r\n \"libc\",\r\n \"log 0.4.11\",\r\n \"miow 0.2.1\",\r\n \"net2\",\r\n \"slab\",\r\n \"winapi 0.2.8\",\r\n]\r\n\r\n[[package]]\r\nname = \"mio\"\r\nversion = \"0.7.6\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"f33bc887064ef1fd66020c9adfc45bb9f33d75a42096c81e7c56c65b75dd1a8b\"\r\ndependencies = [\r\n \"libc\",\r\n \"log 0.4.11\",\r\n \"miow 0.3.6\",\r\n \"ntapi\",\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"mio-uds\"\r\nversion = \"0.6.8\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"afcb699eb26d4332647cc848492bbc15eafb26f08d0304550d5aa1f612e066f0\"\r\ndependencies = [\r\n \"iovec\",\r\n \"libc\",\r\n \"mio 0.6.22\",\r\n]\r\n\r\n[[package]]\r\nname = \"mio-uds-windows\"\r\nversion = \"0.1.0\"\r\nsource = \"git+https://github.com/Azure/mio-uds-windows.git#87a4a9970e668fdbe9205f4039967e175182c70e\"\r\ndependencies = [\r\n \"iovec\",\r\n \"kernel32-sys\",\r\n \"lazycell\",\r\n \"log 0.4.11\",\r\n \"mio 0.6.22\",\r\n \"miow 0.2.1\",\r\n \"winapi 0.2.8\",\r\n \"ws2_32-sys\",\r\n]\r\n\r\n[[package]]\r\nname = \"miow\"\r\nversion = \"0.2.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"8c1f2f3b1cf331de6896aabf6e9d55dca90356cc9960cca7eaaf408a355ae919\"\r\ndependencies = [\r\n \"kernel32-sys\",\r\n \"net2\",\r\n \"winapi 0.2.8\",\r\n \"ws2_32-sys\",\r\n]\r\n\r\n[[package]]\r\nname = \"miow\"\r\nversion = \"0.3.6\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"5a33c1b55807fbed163481b5ba66db4b2fa6cde694a5027be10fb724206c5897\"\r\ndependencies = [\r\n \"socket2\",\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"multimap\"\r\nversion = \"0.8.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"1255076139a83bb467426e7f8d0134968a8118844faa755985e077cf31850333\"\r\ndependencies = [\r\n \"serde\",\r\n]\r\n\r\n[[package]]\r\nname = \"nanoserde\"\r\nversion = \"0.1.19\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"8f28fd3beeb39ed991b142c94dbaff19d194041cdc9db715af2c72b22b00d25c\"\r\ndependencies = [\r\n \"nanoserde-derive\",\r\n]\r\n\r\n[[package]]\r\nname = \"nanoserde-derive\"\r\nversion = \"0.1.12\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"0e0d42774fb555d1dc23a985b52975fb39b4f1b53f26389389a926c49001c3b1\"\r\n\r\n[[package]]\r\nname = \"native-tls\"\r\nversion = \"0.2.4\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"2b0d88c06fe90d5ee94048ba40409ef1d9315d86f6f38c2efdaad4fb50c58b2d\"\r\ndependencies = [\r\n \"lazy_static\",\r\n \"libc\",\r\n \"log 0.4.11\",\r\n \"openssl\",\r\n \"openssl-probe\",\r\n \"openssl-sys\",\r\n \"schannel\",\r\n \"security-framework\",\r\n \"security-framework-sys\",\r\n \"tempfile\",\r\n]\r\n\r\n[[package]]\r\nname = \"net2\"\r\nversion = \"0.2.34\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"2ba7c918ac76704fb42afcbbb43891e72731f3dcca3bef2a19786297baf14af7\"\r\ndependencies = [\r\n \"cfg-if 0.1.10\",\r\n \"libc\",\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"nix\"\r\nversion = \"0.17.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"50e4785f2c3b7589a0d0c1dd60285e1188adac4006e8abd6dd578e1567027363\"\r\ndependencies = [\r\n \"bitflags 1.2.1\",\r\n \"cc\",\r\n \"cfg-if 0.1.10\",\r\n \"libc\",\r\n \"void\",\r\n]\r\n\r\n[[package]]\r\nname = \"nodrop\"\r\nversion = \"0.1.14\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"72ef4a56884ca558e5ddb05a1d1e7e1bfd9a68d9ed024c21704cc98872dae1bb\"\r\n\r\n[[package]]\r\nname = \"ntapi\"\r\nversion = \"0.3.4\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"7a31937dea023539c72ddae0e3571deadc1414b300483fa7aaec176168cfa9d2\"\r\ndependencies = [\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"num\"\r\nversion = \"0.2.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"b8536030f9fea7127f841b45bb6243b27255787fb4eb83958aa1ef9d2fdc0c36\"\r\ndependencies = [\r\n \"num-bigint 0.2.6\",\r\n \"num-complex 0.2.4\",\r\n \"num-integer\",\r\n \"num-iter\",\r\n \"num-rational 0.2.4\",\r\n \"num-traits\",\r\n]\r\n\r\n[[package]]\r\nname = \"num\"\r\nversion = \"0.3.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"ab3e176191bc4faad357e3122c4747aa098ac880e88b168f106386128736cf4a\"\r\ndependencies = [\r\n \"num-bigint 0.3.0\",\r\n \"num-complex 0.3.0\",\r\n \"num-integer\",\r\n \"num-iter\",\r\n \"num-rational 0.3.0\",\r\n \"num-traits\",\r\n]\r\n\r\n[[package]]\r\nname = \"num-bigint\"\r\nversion = \"0.2.6\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"090c7f9998ee0ff65aa5b723e4009f7b217707f1fb5ea551329cc4d6231fb304\"\r\ndependencies = [\r\n \"autocfg\",\r\n \"num-integer\",\r\n \"num-traits\",\r\n]\r\n\r\n[[package]]\r\nname = \"num-bigint\"\r\nversion = \"0.3.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"b7f3fc75e3697059fb1bc465e3d8cca6cf92f56854f201158b3f9c77d5a3cfa0\"\r\ndependencies = [\r\n \"autocfg\",\r\n \"num-integer\",\r\n \"num-traits\",\r\n]\r\n\r\n[[package]]\r\nname = \"num-complex\"\r\nversion = \"0.2.4\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"b6b19411a9719e753aff12e5187b74d60d3dc449ec3f4dc21e3989c3f554bc95\"\r\ndependencies = [\r\n \"autocfg\",\r\n \"num-traits\",\r\n]\r\n\r\n[[package]]\r\nname = \"num-complex\"\r\nversion = \"0.3.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"b05ad05bd8977050b171b3f6b48175fea6e0565b7981059b486075e1026a9fb5\"\r\ndependencies = [\r\n \"num-traits\",\r\n]\r\n\r\n[[package]]\r\nname = \"num-integer\"\r\nversion = \"0.1.43\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"8d59457e662d541ba17869cf51cf177c0b5f0cbf476c66bdc90bf1edac4f875b\"\r\ndependencies = [\r\n \"autocfg\",\r\n \"num-traits\",\r\n]\r\n\r\n[[package]]\r\nname = \"num-iter\"\r\nversion = \"0.1.41\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"7a6e6b7c748f995c4c29c5f5ae0248536e04a5739927c74ec0fa564805094b9f\"\r\ndependencies = [\r\n \"autocfg\",\r\n \"num-integer\",\r\n \"num-traits\",\r\n]\r\n\r\n[[package]]\r\nname = \"num-rational\"\r\nversion = \"0.2.4\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"5c000134b5dbf44adc5cb772486d335293351644b801551abe8f75c84cfa4aef\"\r\ndependencies = [\r\n \"autocfg\",\r\n \"num-bigint 0.2.6\",\r\n \"num-integer\",\r\n \"num-traits\",\r\n]\r\n\r\n[[package]]\r\nname = \"num-rational\"\r\nversion = \"0.3.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"a5b4d7360f362cfb50dde8143501e6940b22f644be75a4cc90b2d81968908138\"\r\ndependencies = [\r\n \"autocfg\",\r\n \"num-bigint 0.3.0\",\r\n \"num-integer\",\r\n \"num-traits\",\r\n]\r\n\r\n[[package]]\r\nname = \"num-traits\"\r\nversion = \"0.2.12\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"ac267bcc07f48ee5f8935ab0d24f316fb722d7a1292e2913f0cc196b29ffd611\"\r\ndependencies = [\r\n \"autocfg\",\r\n]\r\n\r\n[[package]]\r\nname = \"num_cpus\"\r\nversion = \"1.13.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"05499f3756671c15885fee9034446956fff3f243d6077b91e5767df161f766b3\"\r\ndependencies = [\r\n \"hermit-abi\",\r\n \"libc\",\r\n]\r\n\r\n[[package]]\r\nname = \"numtoa\"\r\nversion = \"0.1.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"b8f8bdf33df195859076e54ab11ee78a1b208382d3a26ec40d142ffc1ecc49ef\"\r\n\r\n[[package]]\r\nname = \"object\"\r\nversion = \"0.20.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"1ab52be62400ca80aa00285d25253d7f7c437b7375c4de678f5405d3afe82ca5\"\r\n\r\n[[package]]\r\nname = \"once_cell\"\r\nversion = \"1.4.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"260e51e7efe62b592207e9e13a68e43692a7a279171d6ba57abd208bf23645ad\"\r\n\r\n[[package]]\r\nname = \"oorandom\"\r\nversion = \"11.1.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"a170cebd8021a008ea92e4db85a72f80b35df514ec664b296fdcbb654eac0b2c\"\r\n\r\n[[package]]\r\nname = \"opaque-debug\"\r\nversion = \"0.2.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"2839e79665f131bdb5782e51f2c6c9599c133c6098982a54c794358bf432529c\"\r\n\r\n[[package]]\r\nname = \"openssl\"\r\nversion = \"0.10.30\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"8d575eff3665419f9b83678ff2815858ad9d11567e082f5ac1814baba4e2bcb4\"\r\ndependencies = [\r\n \"bitflags 1.2.1\",\r\n \"cfg-if 0.1.10\",\r\n \"foreign-types\",\r\n \"lazy_static\",\r\n \"libc\",\r\n \"openssl-sys\",\r\n]\r\n\r\n[[package]]\r\nname = \"openssl-probe\"\r\nversion = \"0.1.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"77af24da69f9d9341038eba93a073b1fdaaa1b788221b00a69bce9e762cb32de\"\r\n\r\n[[package]]\r\nname = \"openssl-sys\"\r\nversion = \"0.9.58\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"a842db4709b604f0fe5d1170ae3565899be2ad3d9cbc72dedc789ac0511f78de\"\r\ndependencies = [\r\n \"autocfg\",\r\n \"cc\",\r\n \"libc\",\r\n \"pkg-config\",\r\n \"vcpkg\",\r\n]\r\n\r\n[[package]]\r\nname = \"parking_lot\"\r\nversion = \"0.10.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"d3a704eb390aafdc107b0e392f56a82b668e3a71366993b5340f5833fd62505e\"\r\ndependencies = [\r\n \"lock_api 0.3.4\",\r\n \"parking_lot_core 0.7.2\",\r\n]\r\n\r\n[[package]]\r\nname = \"parking_lot\"\r\nversion = \"0.11.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"a4893845fa2ca272e647da5d0e46660a314ead9c2fdd9a883aabc32e481a8733\"\r\ndependencies = [\r\n \"instant\",\r\n \"lock_api 0.4.1\",\r\n \"parking_lot_core 0.8.0\",\r\n]\r\n\r\n[[package]]\r\nname = \"parking_lot_core\"\r\nversion = \"0.7.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"d58c7c768d4ba344e3e8d72518ac13e259d7c7ade24167003b8488e10b6740a3\"\r\ndependencies = [\r\n \"cfg-if 0.1.10\",\r\n \"cloudabi 0.0.3\",\r\n \"libc\",\r\n \"redox_syscall\",\r\n \"smallvec\",\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"parking_lot_core\"\r\nversion = \"0.8.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"c361aa727dd08437f2f1447be8b59a33b0edd15e0fcee698f935613d9efbca9b\"\r\ndependencies = [\r\n \"cfg-if 0.1.10\",\r\n \"cloudabi 0.1.0\",\r\n \"instant\",\r\n \"libc\",\r\n \"redox_syscall\",\r\n \"smallvec\",\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"percent-encoding\"\r\nversion = \"2.1.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\r\n\r\n[[package]]\r\nname = \"pin-project\"\r\nversion = \"0.4.25\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"2b9e280448854bd91559252582173b3bd1f8e094a0e644791c0628ca9b1f144f\"\r\ndependencies = [\r\n \"pin-project-internal 0.4.25\",\r\n]\r\n\r\n[[package]]\r\nname = \"pin-project\"\r\nversion = \"1.0.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"9ccc2237c2c489783abd8c4c80e5450fc0e98644555b1364da68cc29aa151ca7\"\r\ndependencies = [\r\n \"pin-project-internal 1.0.2\",\r\n]\r\n\r\n[[package]]\r\nname = \"pin-project-internal\"\r\nversion = \"0.4.25\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"c8c8b352676bc6a4c3d71970560b913cea444a7a921cc2e2d920225e4b91edaa\"\r\ndependencies = [\r\n \"proc-macro2 1.0.24\",\r\n \"quote 1.0.7\",\r\n \"syn 1.0.53\",\r\n]\r\n\r\n[[package]]\r\nname = \"pin-project-internal\"\r\nversion = \"1.0.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"f8e8d2bf0b23038a4424865103a4df472855692821aab4e4f5c3312d461d9e5f\"\r\ndependencies = [\r\n \"proc-macro2 1.0.24\",\r\n \"quote 1.0.7\",\r\n \"syn 1.0.53\",\r\n]\r\n\r\n[[package]]\r\nname = \"pin-project-lite\"\r\nversion = \"0.1.10\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"e555d9e657502182ac97b539fb3dae8b79cda19e3e4f8ffb5e8de4f18df93c95\"\r\n\r\n[[package]]\r\nname = \"pin-project-lite\"\r\nversion = \"0.2.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"6b063f57ec186e6140e2b8b6921e5f1bd89c7356dda5b33acc5401203ca6131c\"\r\n\r\n[[package]]\r\nname = \"pin-utils\"\r\nversion = \"0.1.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"\r\n\r\n[[package]]\r\nname = \"pkg-config\"\r\nversion = \"0.3.18\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"d36492546b6af1463394d46f0c834346f31548646f6ba10849802c9c9a27ac33\"\r\n\r\n[[package]]\r\nname = \"plotters\"\r\nversion = \"0.2.15\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"0d1685fbe7beba33de0330629da9d955ac75bd54f33d7b79f9a895590124f6bb\"\r\ndependencies = [\r\n \"js-sys\",\r\n \"num-traits\",\r\n \"wasm-bindgen\",\r\n \"web-sys\",\r\n]\r\n\r\n[[package]]\r\nname = \"poly1305\"\r\nversion = \"0.6.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"22ce46de8e53ee414ca4d02bfefac75d8c12fba948b76622a40b4be34dfce980\"\r\ndependencies = [\r\n \"universal-hash\",\r\n]\r\n\r\n[[package]]\r\nname = \"polyval\"\r\nversion = \"0.4.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"a5884790f1ce3553ad55fec37b5aaac5882e0e845a2612df744d6c85c9bf046c\"\r\ndependencies = [\r\n \"cfg-if 0.1.10\",\r\n \"universal-hash\",\r\n]\r\n\r\n[[package]]\r\nname = \"ppv-lite86\"\r\nversion = \"0.2.9\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"c36fa947111f5c62a733b652544dd0016a43ce89619538a8ef92724a6f501a20\"\r\n\r\n[[package]]\r\nname = \"pqcrypto\"\r\nversion = \"0.10.0\"\r\ndependencies = [\r\n \"pqcrypto-saber\",\r\n \"pqcrypto-traits\",\r\n]\r\n\r\n[[package]]\r\nname = \"pqcrypto-saber\"\r\nversion = \"0.1.3\"\r\ndependencies = [\r\n \"cc\",\r\n \"glob\",\r\n \"libc\",\r\n \"pqcrypto-traits\",\r\n]\r\n\r\n[[package]]\r\nname = \"pqcrypto-traits\"\r\nversion = \"0.3.3\"\r\n\r\n[[package]]\r\nname = \"prettytable-rs\"\r\nversion = \"0.8.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"0fd04b170004fa2daccf418a7f8253aaf033c27760b5f225889024cf66d7ac2e\"\r\ndependencies = [\r\n \"atty\",\r\n \"csv\",\r\n \"encode_unicode\",\r\n \"lazy_static\",\r\n \"term 0.5.2\",\r\n \"unicode-width\",\r\n]\r\n\r\n[[package]]\r\nname = \"proc-macro-hack\"\r\nversion = \"0.5.19\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"dbf0c48bc1d91375ae5c3cd81e3722dff1abcf81a30960240640d223f59fe0e5\"\r\n\r\n[[package]]\r\nname = \"proc-macro-nested\"\r\nversion = \"0.1.6\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"eba180dafb9038b050a4c280019bbedf9f2467b61e5d892dcad585bb57aadc5a\"\r\n\r\n[[package]]\r\nname = \"proc-macro2\"\r\nversion = \"0.4.30\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"cf3d2011ab5c909338f7887f4fc896d35932e29146c12c8d01da6b22a80ba759\"\r\ndependencies = [\r\n \"unicode-xid 0.1.0\",\r\n]\r\n\r\n[[package]]\r\nname = \"proc-macro2\"\r\nversion = \"1.0.24\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"1e0704ee1a7e00d7bb417d0770ea303c1bccbabf0ef1667dae92b5967f5f8a71\"\r\ndependencies = [\r\n \"unicode-xid 0.2.1\",\r\n]\r\n\r\n[[package]]\r\nname = \"quick-error\"\r\nversion = \"1.2.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"a1d01941d82fa2ab50be1e79e6714289dd7cde78eba4c074bc5a4374f650dfe0\"\r\n\r\n[[package]]\r\nname = \"quote\"\r\nversion = \"0.6.13\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"6ce23b6b870e8f94f81fb0a363d65d86675884b34a09043c81e5562f11c1f8e1\"\r\ndependencies = [\r\n \"proc-macro2 0.4.30\",\r\n]\r\n\r\n[[package]]\r\nname = \"quote\"\r\nversion = \"1.0.7\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"aa563d17ecb180e500da1cfd2b028310ac758de548efdd203e18f283af693f37\"\r\ndependencies = [\r\n \"proc-macro2 1.0.24\",\r\n]\r\n\r\n[[package]]\r\nname = \"radium\"\r\nversion = \"0.3.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"def50a86306165861203e7f84ecffbbdfdea79f0e51039b33de1e952358c47ac\"\r\n\r\n[[package]]\r\nname = \"rand\"\r\nversion = \"0.4.6\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"552840b97013b1a26992c11eac34bdd778e464601a4c2054b5f0bff7c6761293\"\r\ndependencies = [\r\n \"fuchsia-cprng\",\r\n \"libc\",\r\n \"rand_core 0.3.1\",\r\n \"rdrand\",\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"rand\"\r\nversion = \"0.7.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03\"\r\ndependencies = [\r\n \"getrandom\",\r\n \"libc\",\r\n \"rand_chacha\",\r\n \"rand_core 0.5.1\",\r\n \"rand_hc\",\r\n]\r\n\r\n[[package]]\r\nname = \"rand_chacha\"\r\nversion = \"0.2.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"f4c8ed856279c9737206bf725bf36935d8666ead7aa69b52be55af369d193402\"\r\ndependencies = [\r\n \"ppv-lite86\",\r\n \"rand_core 0.5.1\",\r\n]\r\n\r\n[[package]]\r\nname = \"rand_core\"\r\nversion = \"0.3.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"7a6fdeb83b075e8266dcc8762c22776f6877a63111121f5f8c7411e5be7eed4b\"\r\ndependencies = [\r\n \"rand_core 0.4.2\",\r\n]\r\n\r\n[[package]]\r\nname = \"rand_core\"\r\nversion = \"0.4.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"9c33a3c44ca05fa6f1807d8e6743f3824e8509beca625669633be0acbdf509dc\"\r\n\r\n[[package]]\r\nname = \"rand_core\"\r\nversion = \"0.5.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19\"\r\ndependencies = [\r\n \"getrandom\",\r\n]\r\n\r\n[[package]]\r\nname = \"rand_hc\"\r\nversion = \"0.2.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c\"\r\ndependencies = [\r\n \"rand_core 0.5.1\",\r\n]\r\n\r\n[[package]]\r\nname = \"random\"\r\nversion = \"0.12.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"97d13a3485349981c90c79112a11222c3e6e75de1d52b87a7525b3bf5361420f\"\r\n\r\n[[package]]\r\nname = \"rayon\"\r\nversion = \"1.4.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"cfd016f0c045ad38b5251be2c9c0ab806917f82da4d36b2a327e5166adad9270\"\r\ndependencies = [\r\n \"autocfg\",\r\n \"crossbeam-deque\",\r\n \"either\",\r\n \"rayon-core\",\r\n]\r\n\r\n[[package]]\r\nname = \"rayon-core\"\r\nversion = \"1.8.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"91739a34c4355b5434ce54c9086c5895604a9c278586d1f1aa95e04f66b525a0\"\r\ndependencies = [\r\n \"crossbeam-channel\",\r\n \"crossbeam-deque\",\r\n \"crossbeam-utils 0.7.2\",\r\n \"lazy_static\",\r\n \"num_cpus\",\r\n]\r\n\r\n[[package]]\r\nname = \"rdrand\"\r\nversion = \"0.4.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"678054eb77286b51581ba43620cc911abf02758c91f93f479767aed0f90458b2\"\r\ndependencies = [\r\n \"rand_core 0.3.1\",\r\n]\r\n\r\n[[package]]\r\nname = \"redox_syscall\"\r\nversion = \"0.1.57\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"41cc0f7e4d5d4544e8861606a285bb08d3e70712ccc7d2b84d7c0ccfaf4b05ce\"\r\n\r\n[[package]]\r\nname = \"redox_termios\"\r\nversion = \"0.1.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"7e891cfe48e9100a70a3b6eb652fef28920c117d366339687bd5576160db0f76\"\r\ndependencies = [\r\n \"redox_syscall\",\r\n]\r\n\r\n[[package]]\r\nname = \"redox_users\"\r\nversion = \"0.2.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"214a97e49be64fd2c86f568dd0cb2c757d2cc53de95b273b6ad0a1c908482f26\"\r\ndependencies = [\r\n \"argon2rs\",\r\n \"failure\",\r\n \"rand 0.4.6\",\r\n \"redox_syscall\",\r\n]\r\n\r\n[[package]]\r\nname = \"redox_users\"\r\nversion = \"0.3.5\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"de0737333e7a9502c789a36d7c7fa6092a49895d4faa31ca5df163857ded2e9d\"\r\ndependencies = [\r\n \"getrandom\",\r\n \"redox_syscall\",\r\n \"rust-argon2\",\r\n]\r\n\r\n[[package]]\r\nname = \"regex\"\r\nversion = \"1.3.9\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"9c3780fcf44b193bc4d09f36d2a3c87b251da4a046c87795a0d35f4f927ad8e6\"\r\ndependencies = [\r\n \"aho-corasick\",\r\n \"memchr\",\r\n \"regex-syntax\",\r\n \"thread_local\",\r\n]\r\n\r\n[[package]]\r\nname = \"regex-automata\"\r\nversion = \"0.1.9\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"ae1ded71d66a4a97f5e961fd0cb25a5f366a42a41570d16a763a69c092c26ae4\"\r\ndependencies = [\r\n \"byteorder\",\r\n]\r\n\r\n[[package]]\r\nname = \"regex-syntax\"\r\nversion = \"0.6.18\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"26412eb97c6b088a6997e05f69403a802a92d520de2f8e63c2b65f9e0f47c4e8\"\r\n\r\n[[package]]\r\nname = \"remove_dir_all\"\r\nversion = \"0.5.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7\"\r\ndependencies = [\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"reqwest\"\r\nversion = \"0.10.8\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"e9eaa17ac5d7b838b7503d118fa16ad88f440498bf9ffe5424e621f93190d61e\"\r\ndependencies = [\r\n \"base64 0.12.3\",\r\n \"bytes 0.5.6\",\r\n \"encoding_rs\",\r\n \"futures-core\",\r\n \"futures-util\",\r\n \"http\",\r\n \"http-body\",\r\n \"hyper\",\r\n \"hyper-tls\",\r\n \"ipnet\",\r\n \"js-sys\",\r\n \"lazy_static\",\r\n \"log 0.4.11\",\r\n \"mime\",\r\n \"mime_guess\",\r\n \"native-tls\",\r\n \"percent-encoding\",\r\n \"pin-project-lite 0.1.10\",\r\n \"serde\",\r\n \"serde_urlencoded\",\r\n \"tokio 0.2.22\",\r\n \"tokio-tls\",\r\n \"url\",\r\n \"wasm-bindgen\",\r\n \"wasm-bindgen-futures\",\r\n \"web-sys\",\r\n \"winreg\",\r\n]\r\n\r\n[[package]]\r\nname = \"rpassword\"\r\nversion = \"4.0.5\"\r\ndependencies = [\r\n \"libc\",\r\n \"tokio 0.2.22\",\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"rsntp\"\r\nversion = \"1.0.1\"\r\ndependencies = [\r\n \"chrono\",\r\n \"tokio 0.3.4\",\r\n]\r\n\r\n[[package]]\r\nname = \"rust-argon2\"\r\nversion = \"0.8.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"4b18820d944b33caa75a71378964ac46f58517c92b6ae5f762636247c09e78fb\"\r\ndependencies = [\r\n \"base64 0.13.0\",\r\n \"blake2b_simd\",\r\n \"constant_time_eq\",\r\n \"crossbeam-utils 0.8.1\",\r\n]\r\n\r\n[[package]]\r\nname = \"rustc-demangle\"\r\nversion = \"0.1.16\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"4c691c0e608126e00913e33f0ccf3727d5fc84573623b8d65b2df340b5201783\"\r\n\r\n[[package]]\r\nname = \"rustc_version\"\r\nversion = \"0.2.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\r\ndependencies = [\r\n \"semver\",\r\n]\r\n\r\n[[package]]\r\nname = \"ryu\"\r\nversion = \"1.0.5\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"71d301d4193d031abdd79ff7e3dd721168a9572ef3fe51a1517aba235bd8f86e\"\r\n\r\n[[package]]\r\nname = \"same-file\"\r\nversion = \"1.0.6\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\r\ndependencies = [\r\n \"winapi-util\",\r\n]\r\n\r\n[[package]]\r\nname = \"schannel\"\r\nversion = \"0.1.19\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"8f05ba609c234e60bee0d547fe94a4c7e9da733d1c962cf6e59efa4cd9c8bc75\"\r\ndependencies = [\r\n \"lazy_static\",\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"scoped_threadpool\"\r\nversion = \"0.1.9\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"1d51f5df5af43ab3f1360b429fa5e0152ac5ce8c0bd6485cae490332e96846a8\"\r\n\r\n[[package]]\r\nname = \"scopeguard\"\r\nversion = \"1.1.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\r\n\r\n[[package]]\r\nname = \"secstr\"\r\nversion = \"0.4.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"cce2c726741c320e5b8f1edd9a21b3c2c292ae94514afd001d41d81ba143dafc\"\r\ndependencies = [\r\n \"libc\",\r\n]\r\n\r\n[[package]]\r\nname = \"security-framework\"\r\nversion = \"0.4.4\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"64808902d7d99f78eaddd2b4e2509713babc3dc3c85ad6f4c447680f3c01e535\"\r\ndependencies = [\r\n \"bitflags 1.2.1\",\r\n \"core-foundation\",\r\n \"core-foundation-sys\",\r\n \"libc\",\r\n \"security-framework-sys\",\r\n]\r\n\r\n[[package]]\r\nname = \"security-framework-sys\"\r\nversion = \"0.4.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"17bf11d99252f512695eb468de5516e5cf75455521e69dfe343f3b74e4748405\"\r\ndependencies = [\r\n \"core-foundation-sys\",\r\n \"libc\",\r\n]\r\n\r\n[[package]]\r\nname = \"semver\"\r\nversion = \"0.9.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\r\ndependencies = [\r\n \"semver-parser\",\r\n]\r\n\r\n[[package]]\r\nname = \"semver-parser\"\r\nversion = \"0.7.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\r\n\r\n[[package]]\r\nname = \"serde\"\r\nversion = \"1.0.115\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"e54c9a88f2da7238af84b5101443f0c0d0a3bbdc455e34a5c9497b1903ed55d5\"\r\ndependencies = [\r\n \"serde_derive\",\r\n]\r\n\r\n[[package]]\r\nname = \"serde_cbor\"\r\nversion = \"0.11.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"1e18acfa2f90e8b735b2836ab8d538de304cbb6729a7360729ea5a895d15a622\"\r\ndependencies = [\r\n \"half\",\r\n \"serde\",\r\n]\r\n\r\n[[package]]\r\nname = \"serde_derive\"\r\nversion = \"1.0.115\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"609feed1d0a73cc36a0182a840a9b37b4a82f0b1150369f0536a9e3f2a31dc48\"\r\ndependencies = [\r\n \"proc-macro2 1.0.24\",\r\n \"quote 1.0.7\",\r\n \"syn 1.0.53\",\r\n]\r\n\r\n[[package]]\r\nname = \"serde_json\"\r\nversion = \"1.0.57\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"164eacbdb13512ec2745fb09d51fd5b22b0d65ed294a1dcf7285a360c80a675c\"\r\ndependencies = [\r\n \"itoa\",\r\n \"ryu\",\r\n \"serde\",\r\n]\r\n\r\n[[package]]\r\nname = \"serde_urlencoded\"\r\nversion = \"0.6.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"9ec5d77e2d4c73717816afac02670d5c4f534ea95ed430442cad02e7a6e32c97\"\r\ndependencies = [\r\n \"dtoa\",\r\n \"itoa\",\r\n \"serde\",\r\n \"url\",\r\n]\r\n\r\n[[package]]\r\nname = \"signal-hook\"\r\nversion = \"0.1.16\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"604508c1418b99dfe1925ca9224829bb2a8a9a04dda655cc01fcad46f4ab05ed\"\r\ndependencies = [\r\n \"libc\",\r\n \"mio 0.6.22\",\r\n \"mio 0.7.6\",\r\n \"signal-hook-registry\",\r\n]\r\n\r\n[[package]]\r\nname = \"signal-hook-registry\"\r\nversion = \"1.2.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"a3e12110bc539e657a646068aaf5eb5b63af9d0c1f7b29c97113fad80e15f035\"\r\ndependencies = [\r\n \"arc-swap\",\r\n \"libc\",\r\n]\r\n\r\n[[package]]\r\nname = \"simplelog\"\r\nversion = \"0.7.6\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"3cf9a002ccce717d066b3ccdb8a28829436249867229291e91b25d99bd723f0d\"\r\ndependencies = [\r\n \"chrono\",\r\n \"log 0.4.11\",\r\n \"term 0.6.1\",\r\n]\r\n\r\n[[package]]\r\nname = \"slab\"\r\nversion = \"0.4.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"c111b5bd5695e56cffe5129854aa230b39c93a305372fdbb2668ca2394eea9f8\"\r\n\r\n[[package]]\r\nname = \"smallvec\"\r\nversion = \"1.4.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"fbee7696b84bbf3d89a1c2eccff0850e3047ed46bfcd2e92c29a2d074d57e252\"\r\n\r\n[[package]]\r\nname = \"socket2\"\r\nversion = \"0.3.17\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"2c29947abdee2a218277abeca306f25789c938e500ea5a9d4b12a5a504466902\"\r\ndependencies = [\r\n \"cfg-if 1.0.0\",\r\n \"libc\",\r\n \"redox_syscall\",\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"stable_deref_trait\"\r\nversion = \"1.2.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3\"\r\n\r\n[[package]]\r\nname = \"stream-cipher\"\r\nversion = \"0.7.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"c80e15f898d8d8f25db24c253ea615cc14acf418ff307822995814e7d42cfa89\"\r\ndependencies = [\r\n \"block-cipher 0.8.0\",\r\n \"generic-array 0.14.4\",\r\n]\r\n\r\n[[package]]\r\nname = \"strsim\"\r\nversion = \"0.8.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\r\n\r\n[[package]]\r\nname = \"subtle\"\r\nversion = \"2.2.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"502d53007c02d7605a05df1c1a73ee436952781653da5d0bf57ad608f66932c1\"\r\n\r\n[[package]]\r\nname = \"syn\"\r\nversion = \"0.15.44\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"9ca4b3b69a77cbe1ffc9e198781b7acb0c7365a883670e8f1c1bc66fba79a5c5\"\r\ndependencies = [\r\n \"proc-macro2 0.4.30\",\r\n \"quote 0.6.13\",\r\n \"unicode-xid 0.1.0\",\r\n]\r\n\r\n[[package]]\r\nname = \"syn\"\r\nversion = \"1.0.53\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"8833e20724c24de12bbaba5ad230ea61c3eafb05b881c7c9d3cfe8638b187e68\"\r\ndependencies = [\r\n \"proc-macro2 1.0.24\",\r\n \"quote 1.0.7\",\r\n \"unicode-xid 0.2.1\",\r\n]\r\n\r\n[[package]]\r\nname = \"synstructure\"\r\nversion = \"0.10.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"02353edf96d6e4dc81aea2d8490a7e9db177bf8acb0e951c24940bf866cb313f\"\r\ndependencies = [\r\n \"proc-macro2 0.4.30\",\r\n \"quote 0.6.13\",\r\n \"syn 0.15.44\",\r\n \"unicode-xid 0.1.0\",\r\n]\r\n\r\n[[package]]\r\nname = \"synstructure\"\r\nversion = \"0.12.4\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"b834f2d66f734cb897113e34aaff2f1ab4719ca946f9a7358dba8f8064148701\"\r\ndependencies = [\r\n \"proc-macro2 1.0.24\",\r\n \"quote 1.0.7\",\r\n \"syn 1.0.53\",\r\n \"unicode-xid 0.2.1\",\r\n]\r\n\r\n[[package]]\r\nname = \"tempfile\"\r\nversion = \"3.1.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"7a6e24d9338a0a5be79593e2fa15a648add6138caa803e2d5bc782c371732ca9\"\r\ndependencies = [\r\n \"cfg-if 0.1.10\",\r\n \"libc\",\r\n \"rand 0.7.3\",\r\n \"redox_syscall\",\r\n \"remove_dir_all\",\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"term\"\r\nversion = \"0.5.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"edd106a334b7657c10b7c540a0106114feadeb4dc314513e97df481d5d966f42\"\r\ndependencies = [\r\n \"byteorder\",\r\n \"dirs 1.0.5\",\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"term\"\r\nversion = \"0.6.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5\"\r\ndependencies = [\r\n \"dirs 2.0.2\",\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"termcolor\"\r\nversion = \"1.1.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"bb6bfa289a4d7c5766392812c0a1f4c1ba45afa1ad47803c11e1f407d846d75f\"\r\ndependencies = [\r\n \"winapi-util\",\r\n]\r\n\r\n[[package]]\r\nname = \"termion\"\r\nversion = \"1.5.5\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"c22cec9d8978d906be5ac94bceb5a010d885c626c4c8855721a4dbd20e3ac905\"\r\ndependencies = [\r\n \"libc\",\r\n \"numtoa\",\r\n \"redox_syscall\",\r\n \"redox_termios\",\r\n]\r\n\r\n[[package]]\r\nname = \"textwrap\"\r\nversion = \"0.11.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\r\ndependencies = [\r\n \"unicode-width\",\r\n]\r\n\r\n[[package]]\r\nname = \"thread_local\"\r\nversion = \"1.0.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"d40c6d1b69745a6ec6fb1ca717914848da4b44ae29d9b3080cbee91d72a69b14\"\r\ndependencies = [\r\n \"lazy_static\",\r\n]\r\n\r\n[[package]]\r\nname = \"time\"\r\nversion = \"0.1.44\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"6db9e6914ab8b1ae1c260a4ae7a49b6c5611b40328a735b21862567685e73255\"\r\ndependencies = [\r\n \"libc\",\r\n \"wasi 0.10.0+wasi-snapshot-preview1\",\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"tinytemplate\"\r\nversion = \"1.1.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"6d3dc76004a03cec1c5932bca4cdc2e39aaa798e3f82363dd94f9adf6098c12f\"\r\ndependencies = [\r\n \"serde\",\r\n \"serde_json\",\r\n]\r\n\r\n[[package]]\r\nname = \"tinyvec\"\r\nversion = \"0.3.4\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"238ce071d267c5710f9d31451efec16c5ee22de34df17cc05e56cbc92e967117\"\r\n\r\n[[package]]\r\nname = \"tokio\"\r\nversion = \"0.2.22\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"5d34ca54d84bf2b5b4d7d31e901a8464f7b60ac145a284fba25ceb801f2ddccd\"\r\ndependencies = [\r\n \"bytes 0.5.6\",\r\n \"fnv\",\r\n \"futures-core\",\r\n \"iovec\",\r\n \"lazy_static\",\r\n \"libc\",\r\n \"memchr\",\r\n \"mio 0.6.22\",\r\n \"mio-uds\",\r\n \"pin-project-lite 0.1.10\",\r\n \"slab\",\r\n \"tokio-macros 0.2.5\",\r\n]\r\n\r\n[[package]]\r\nname = \"tokio\"\r\nversion = \"0.3.4\"\r\ndependencies = [\r\n \"autocfg\",\r\n \"bytes 0.6.0\",\r\n \"futures-core\",\r\n \"lazy_static\",\r\n \"libc\",\r\n \"memchr\",\r\n \"mio 0.7.6\",\r\n \"num_cpus\",\r\n \"parking_lot 0.11.0\",\r\n \"pin-project-lite 0.2.0\",\r\n \"signal-hook-registry\",\r\n \"slab\",\r\n \"tokio-macros 0.3.1\",\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"tokio-macros\"\r\nversion = \"0.2.5\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"f0c3acc6aa564495a0f2e1d59fab677cd7f81a19994cfc7f3ad0e64301560389\"\r\ndependencies = [\r\n \"proc-macro2 1.0.24\",\r\n \"quote 1.0.7\",\r\n \"syn 1.0.53\",\r\n]\r\n\r\n[[package]]\r\nname = \"tokio-macros\"\r\nversion = \"0.3.1\"\r\ndependencies = [\r\n \"proc-macro2 1.0.24\",\r\n \"quote 1.0.7\",\r\n \"syn 1.0.53\",\r\n]\r\n\r\n[[package]]\r\nname = \"tokio-tls\"\r\nversion = \"0.3.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"9a70f4fcd7b3b24fb194f837560168208f669ca8cb70d0c4b862944452396343\"\r\ndependencies = [\r\n \"native-tls\",\r\n \"tokio 0.2.22\",\r\n]\r\n\r\n[[package]]\r\nname = \"tokio-util\"\r\nversion = \"0.3.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"be8242891f2b6cbef26a2d7e8605133c2c554cd35b3e4948ea892d6d68436499\"\r\ndependencies = [\r\n \"bytes 0.5.6\",\r\n \"futures-core\",\r\n \"futures-sink\",\r\n \"log 0.4.11\",\r\n \"pin-project-lite 0.1.10\",\r\n \"tokio 0.2.22\",\r\n]\r\n\r\n[[package]]\r\nname = \"tokio-util\"\r\nversion = \"0.5.0\"\r\ndependencies = [\r\n \"bytes 0.6.0\",\r\n \"futures-core\",\r\n \"futures-sink\",\r\n \"log 0.4.11\",\r\n \"pin-project-lite 0.2.0\",\r\n \"slab\",\r\n \"tokio 0.3.4\",\r\n]\r\n\r\n[[package]]\r\nname = \"tokio_agnostic_uds\"\r\nversion = \"0.1.0\"\r\ndependencies = [\r\n \"bytes 0.5.6\",\r\n \"futures\",\r\n \"iovec\",\r\n \"log 0.4.11\",\r\n \"mio 0.6.22\",\r\n \"mio-uds-windows\",\r\n \"pin-project 0.4.25\",\r\n \"tempfile\",\r\n \"tokio 0.2.22\",\r\n \"tokio-util 0.3.1\",\r\n]\r\n\r\n[[package]]\r\nname = \"tower-service\"\r\nversion = \"0.3.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"e987b6bf443f4b5b3b6f38704195592cca41c5bb7aedd3c3693c7081f8289860\"\r\n\r\n[[package]]\r\nname = \"tracing\"\r\nversion = \"0.1.19\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"6d79ca061b032d6ce30c660fded31189ca0b9922bf483cd70759f13a2d86786c\"\r\ndependencies = [\r\n \"cfg-if 0.1.10\",\r\n \"log 0.4.11\",\r\n \"tracing-core\",\r\n]\r\n\r\n[[package]]\r\nname = \"tracing-core\"\r\nversion = \"0.1.15\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"4f0e00789804e99b20f12bc7003ca416309d28a6f495d6af58d1e2c2842461b5\"\r\ndependencies = [\r\n \"lazy_static\",\r\n]\r\n\r\n[[package]]\r\nname = \"try-lock\"\r\nversion = \"0.2.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"59547bce71d9c38b83d9c0e92b6066c4253371f15005def0c30d9657f50c7642\"\r\n\r\n[[package]]\r\nname = \"typenum\"\r\nversion = \"1.12.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"373c8a200f9e67a0c95e62a4f52fbf80c23b4381c05a17845531982fa99e6b33\"\r\n\r\n[[package]]\r\nname = \"udt\"\r\nversion = \"0.2.1\"\r\ndependencies = [\r\n \"bitflags 0.7.0\",\r\n \"libc\",\r\n \"libudt4-sys\",\r\n \"log 0.3.9\",\r\n \"winapi 0.2.8\",\r\n]\r\n\r\n[[package]]\r\nname = \"unicase\"\r\nversion = \"2.6.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"50f37be617794602aabbeee0be4f259dc1778fabe05e2d67ee8f79326d5cb4f6\"\r\ndependencies = [\r\n \"version_check\",\r\n]\r\n\r\n[[package]]\r\nname = \"unicode-bidi\"\r\nversion = \"0.3.4\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5\"\r\ndependencies = [\r\n \"matches\",\r\n]\r\n\r\n[[package]]\r\nname = \"unicode-normalization\"\r\nversion = \"0.1.13\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"6fb19cf769fa8c6a80a162df694621ebeb4dafb606470b2b2fce0be40a98a977\"\r\ndependencies = [\r\n \"tinyvec\",\r\n]\r\n\r\n[[package]]\r\nname = \"unicode-width\"\r\nversion = \"0.1.8\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"9337591893a19b88d8d87f2cec1e73fad5cdfd10e5a6f349f498ad6ea2ffb1e3\"\r\n\r\n[[package]]\r\nname = \"unicode-xid\"\r\nversion = \"0.1.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc\"\r\n\r\n[[package]]\r\nname = \"unicode-xid\"\r\nversion = \"0.2.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"f7fe0bb3479651439c9112f72b6c505038574c9fbb575ed1bf3b797fa39dd564\"\r\n\r\n[[package]]\r\nname = \"universal-hash\"\r\nversion = \"0.4.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"8326b2c654932e3e4f9196e69d08fdf7cfd718e1dc6f66b347e6024a0c961402\"\r\ndependencies = [\r\n \"generic-array 0.14.4\",\r\n \"subtle\",\r\n]\r\n\r\n[[package]]\r\nname = \"url\"\r\nversion = \"2.1.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"829d4a8476c35c9bf0bbce5a3b23f4106f79728039b726d292bb93bc106787cb\"\r\ndependencies = [\r\n \"idna\",\r\n \"matches\",\r\n \"percent-encoding\",\r\n]\r\n\r\n[[package]]\r\nname = \"vcpkg\"\r\nversion = \"0.2.10\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"6454029bf181f092ad1b853286f23e2c507d8e8194d01d92da4a55c274a5508c\"\r\n\r\n[[package]]\r\nname = \"vec_map\"\r\nversion = \"0.8.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"f1bddf1187be692e79c5ffeab891132dfb0f236ed36a43c7ed39f1165ee20191\"\r\n\r\n[[package]]\r\nname = \"version_check\"\r\nversion = \"0.9.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"b5a972e5669d67ba988ce3dc826706fb0a8b01471c088cb0b6110b805cc36aed\"\r\n\r\n[[package]]\r\nname = \"void\"\r\nversion = \"1.0.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d\"\r\n\r\n[[package]]\r\nname = \"walkdir\"\r\nversion = \"2.3.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"777182bc735b6424e1a57516d35ed72cb8019d85c8c9bf536dccb3445c1a2f7d\"\r\ndependencies = [\r\n \"same-file\",\r\n \"winapi 0.3.9\",\r\n \"winapi-util\",\r\n]\r\n\r\n[[package]]\r\nname = \"want\"\r\nversion = \"0.3.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"1ce8a968cb1cd110d136ff8b819a556d6fb6d919363c61534f6860c7eb172ba0\"\r\ndependencies = [\r\n \"log 0.4.11\",\r\n \"try-lock\",\r\n]\r\n\r\n[[package]]\r\nname = \"wasi\"\r\nversion = \"0.9.0+wasi-snapshot-preview1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\r\n\r\n[[package]]\r\nname = \"wasi\"\r\nversion = \"0.10.0+wasi-snapshot-preview1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"1a143597ca7c7793eff794def352d41792a93c481eb1042423ff7ff72ba2c31f\"\r\n\r\n[[package]]\r\nname = \"wasm-bindgen\"\r\nversion = \"0.2.67\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"f0563a9a4b071746dd5aedbc3a28c6fe9be4586fb3fbadb67c400d4f53c6b16c\"\r\ndependencies = [\r\n \"cfg-if 0.1.10\",\r\n \"serde\",\r\n \"serde_json\",\r\n \"wasm-bindgen-macro\",\r\n]\r\n\r\n[[package]]\r\nname = \"wasm-bindgen-backend\"\r\nversion = \"0.2.67\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"bc71e4c5efa60fb9e74160e89b93353bc24059999c0ae0fb03affc39770310b0\"\r\ndependencies = [\r\n \"bumpalo\",\r\n \"lazy_static\",\r\n \"log 0.4.11\",\r\n \"proc-macro2 1.0.24\",\r\n \"quote 1.0.7\",\r\n \"syn 1.0.53\",\r\n \"wasm-bindgen-shared\",\r\n]\r\n\r\n[[package]]\r\nname = \"wasm-bindgen-futures\"\r\nversion = \"0.4.17\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"95f8d235a77f880bcef268d379810ea6c0af2eacfa90b1ad5af731776e0c4699\"\r\ndependencies = [\r\n \"cfg-if 0.1.10\",\r\n \"js-sys\",\r\n \"wasm-bindgen\",\r\n \"web-sys\",\r\n]\r\n\r\n[[package]]\r\nname = \"wasm-bindgen-macro\"\r\nversion = \"0.2.67\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"97c57cefa5fa80e2ba15641578b44d36e7a64279bc5ed43c6dbaf329457a2ed2\"\r\ndependencies = [\r\n \"quote 1.0.7\",\r\n \"wasm-bindgen-macro-support\",\r\n]\r\n\r\n[[package]]\r\nname = \"wasm-bindgen-macro-support\"\r\nversion = \"0.2.67\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"841a6d1c35c6f596ccea1f82504a192a60378f64b3bb0261904ad8f2f5657556\"\r\ndependencies = [\r\n \"proc-macro2 1.0.24\",\r\n \"quote 1.0.7\",\r\n \"syn 1.0.53\",\r\n \"wasm-bindgen-backend\",\r\n \"wasm-bindgen-shared\",\r\n]\r\n\r\n[[package]]\r\nname = \"wasm-bindgen-shared\"\r\nversion = \"0.2.67\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"93b162580e34310e5931c4b792560108b10fd14d64915d7fff8ff00180e70092\"\r\n\r\n[[package]]\r\nname = \"web-sys\"\r\nversion = \"0.3.44\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"dda38f4e5ca63eda02c059d243aa25b5f35ab98451e518c51612cd0f1bd19a47\"\r\ndependencies = [\r\n \"js-sys\",\r\n \"wasm-bindgen\",\r\n]\r\n\r\n[[package]]\r\nname = \"whoami\"\r\nversion = \"0.9.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"7884773ab69074615cb8f8425d0e53f11710786158704fca70f53e71b0e05504\"\r\n\r\n[[package]]\r\nname = \"winapi\"\r\nversion = \"0.2.8\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\r\n\r\n[[package]]\r\nname = \"winapi\"\r\nversion = \"0.3.9\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\r\ndependencies = [\r\n \"winapi-i686-pc-windows-gnu\",\r\n \"winapi-x86_64-pc-windows-gnu\",\r\n]\r\n\r\n[[package]]\r\nname = \"winapi-build\"\r\nversion = \"0.1.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\"\r\n\r\n[[package]]\r\nname = \"winapi-i686-pc-windows-gnu\"\r\nversion = \"0.4.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\r\n\r\n[[package]]\r\nname = \"winapi-util\"\r\nversion = \"0.1.5\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178\"\r\ndependencies = [\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"winapi-x86_64-pc-windows-gnu\"\r\nversion = \"0.4.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\r\n\r\n[[package]]\r\nname = \"winreg\"\r\nversion = \"0.7.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"0120db82e8a1e0b9fb3345a539c478767c0048d842860994d96113d5b667bd69\"\r\ndependencies = [\r\n \"winapi 0.3.9\",\r\n]\r\n\r\n[[package]]\r\nname = \"ws2_32-sys\"\r\nversion = \"0.2.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"d59cefebd0c892fa2dd6de581e937301d8552cb44489cdff035c6187cb63fa5e\"\r\ndependencies = [\r\n \"winapi 0.2.8\",\r\n \"winapi-build\",\r\n]\r\n\r\n[[package]]\r\nname = \"xml-rs\"\r\nversion = \"0.8.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"b07db065a5cf61a7e4ba64f29e67db906fb1787316516c4e6e5ff0fea1efcd8a\"\r\n\r\n[[package]]\r\nname = \"xmltree\"\r\nversion = \"0.10.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"f76badaccb0313f1f0cb6582c2973f2dd0620f9652eb7a5ff6ced0cc3ac922b3\"\r\ndependencies = [\r\n \"xml-rs\",\r\n]\r\n\r\n[[package]]\r\nname = \"zerocopy\"\r\nversion = \"0.2.8\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"992b9b31f80fd4a167f903f879b8ca43d6716cc368ea01df90538baa2dd34056\"\r\ndependencies = [\r\n \"byteorder\",\r\n \"zerocopy-derive 0.1.4\",\r\n]\r\n\r\n[[package]]\r\nname = \"zerocopy\"\r\nversion = \"0.3.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"6580539ad917b7c026220c4b3f2c08d52ce54d6ce0dc491e66002e35388fab46\"\r\ndependencies = [\r\n \"byteorder\",\r\n \"zerocopy-derive 0.2.0\",\r\n]\r\n\r\n[[package]]\r\nname = \"zerocopy-derive\"\r\nversion = \"0.1.4\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"b090467ecd0624026e8a6405d343ac7382592530d54881330b3fc8e400280fa5\"\r\ndependencies = [\r\n \"proc-macro2 0.4.30\",\r\n \"syn 0.15.44\",\r\n \"synstructure 0.10.2\",\r\n]\r\n\r\n[[package]]\r\nname = \"zerocopy-derive\"\r\nversion = \"0.2.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"d498dbd1fd7beb83c86709ae1c33ca50942889473473d287d56ce4770a18edfb\"\r\ndependencies = [\r\n \"proc-macro2 1.0.24\",\r\n \"syn 1.0.53\",\r\n \"synstructure 0.12.4\",\r\n]\r\n\r\n[[package]]\r\nname = \"zeroize\"\r\nversion = \"1.1.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\nchecksum = \"05f33972566adbd2d3588b0491eb94b98b43695c4ef897903470ede4f3f5a28a\"\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Cargo.lock b/Cargo.lock
--- a/Cargo.lock	(revision bc150d7311557fd666684082d183891298012257)
+++ b/Cargo.lock	(date 1607206659480)
@@ -2,9 +2,9 @@
 # It is not intended for manual editing.
 [[package]]
 name = "addr2line"
-version = "0.13.0"
+version = "0.14.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1b6a2d3371669ab3ca9797670853d61402b03d0b4b9ebf33d677dfa720203072"
+checksum = "7c0929d69e78dd9bf5408269919fcbcaeb2e35e5d43e5815517cdc6a8e11a423"
 dependencies = [
  "gimli",
 ]
@@ -33,7 +33,7 @@
 dependencies = [
  "aes-soft",
  "aesni",
- "block-cipher 0.7.1",
+ "block-cipher",
 ]
 
 [[package]]
@@ -44,7 +44,7 @@
 dependencies = [
  "aead",
  "aes",
- "block-cipher 0.7.1",
+ "block-cipher",
  "polyval",
  "subtle",
  "zeroize",
@@ -56,7 +56,7 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "4925647ee64e5056cf231608957ce7c81e12d6d6e316b9ce1404778cc1d35fa7"
 dependencies = [
- "block-cipher 0.7.1",
+ "block-cipher",
  "byteorder",
  "opaque-debug",
 ]
@@ -67,15 +67,15 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "d050d39b0b7688b3a3254394c3e30a9d66c41dcf9b05b0e2dbdc623f6505d264"
 dependencies = [
- "block-cipher 0.7.1",
+ "block-cipher",
  "opaque-debug",
 ]
 
 [[package]]
 name = "aho-corasick"
-version = "0.7.13"
+version = "0.7.15"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "043164d8ba5c4c3035fec9bbee8647c0261d788f3474306f93bb65901cae0e86"
+checksum = "7404febffaa47dac81aa44dba71523c9d069b1bdc50a77db41195149e17f68e5"
 dependencies = [
  "memchr",
 ]
@@ -88,9 +88,9 @@
 
 [[package]]
 name = "android_logger"
-version = "0.9.0"
+version = "0.9.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5027a747b8132dc36dc894415a300aab31d6489ee788e9ba07bc99558b1278ca"
+checksum = "7e93c367fbabdddb4126bf56402ccb62a676c6817941490961a421d10ae46c2f"
 dependencies = [
  "android_log-sys",
  "env_logger",
@@ -140,26 +140,27 @@
 
 [[package]]
 name = "arrayvec"
-version = "0.5.1"
+version = "0.5.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cff77d8686867eceff3105329d4698d96c2391c176d5d03adc90c7389162b5b8"
+checksum = "23b62fc65de8e4e7f52534fb52b0f3ed04746ae267519eef2a83941e8085068b"
 
 [[package]]
 name = "as-slice"
-version = "0.1.3"
+version = "0.1.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "37dfb65bc03b2bc85ee827004f14a6817e04160e3b1a28931986a666a9290e70"
+checksum = "bb4d1c23475b74e3672afa8c2be22040b8b7783ad9b461021144ed10a46bb0e6"
 dependencies = [
  "generic-array 0.12.3",
  "generic-array 0.13.2",
+ "generic-array 0.14.4",
  "stable_deref_trait",
 ]
 
 [[package]]
 name = "async-trait"
-version = "0.1.38"
+version = "0.1.42"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6e1a4a2f97ce50c9d0282c1468816208588441492b40d813b2e0419c22c05e7f"
+checksum = "8d3a45e77e34375a7923b1e8febb049bb011f064714a8e17a1a616fef01da13d"
 dependencies = [
  "proc-macro2 1.0.24",
  "quote 1.0.7",
@@ -171,14 +172,14 @@
 version = "0.1.0"
 dependencies = [
  "reqwest",
- "tokio 0.2.22",
+ "tokio 0.2.23",
 ]
 
 [[package]]
 name = "async_udt"
 version = "0.1.0"
 dependencies = [
- "tokio 0.2.22",
+ "tokio 0.2.23",
  "udt",
 ]
 
@@ -221,24 +222,18 @@
 
 [[package]]
 name = "backtrace"
-version = "0.3.50"
+version = "0.3.55"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "46254cf2fdcdf1badb5934448c1bcbe046a56537b3987d96c51a7afc5d03f293"
+checksum = "ef5140344c85b01f9bbb4d4b7288a8aa4b3287ccef913a14bcc78a1063623598"
 dependencies = [
  "addr2line",
- "cfg-if 0.1.10",
+ "cfg-if 1.0.0",
  "libc",
  "miniz_oxide",
  "object",
  "rustc-demangle",
 ]
 
-[[package]]
-name = "base64"
-version = "0.12.3"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3441f0f7b02788e948e47f457ca01f1d7e6d92c693bc132c22b087d3141c03ff"
-
 [[package]]
 name = "base64"
 version = "0.13.0"
@@ -251,7 +246,7 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "cc403c26e6b03005522e6e8053384c4e881dfe5b2bf041c0c2c49be33d64a539"
 dependencies = [
- "num-bigint 0.3.0",
+ "num-bigint 0.3.1",
  "num-integer",
  "num-traits",
 ]
@@ -300,12 +295,12 @@
 
 [[package]]
 name = "blake2b_simd"
-version = "0.5.10"
+version = "0.5.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d8fb2d74254a3a0b5cac33ac9f8ed0e44aa50378d9dbb2e5d83bd21ed1dc2c8a"
+checksum = "afa748e348ad3be8263be728124b24a24f268266f6f5d58af9d75f6a40b5c587"
 dependencies = [
  "arrayref",
- "arrayvec 0.5.1",
+ "arrayvec 0.5.2",
  "constant_time_eq",
 ]
 
@@ -318,20 +313,11 @@
  "generic-array 0.14.4",
 ]
 
-[[package]]
-name = "block-cipher"
-version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f337a3e6da609650eb74e02bc9fac7b735049f7623ab12f2e4c719316fcc7e80"
-dependencies = [
- "generic-array 0.14.4",
-]
-
 [[package]]
 name = "bstr"
-version = "0.2.13"
+version = "0.2.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "31accafdb70df7871592c058eca3985b71104e15ac32f64706022c58867da931"
+checksum = "473fc6b38233f9af7baa94fb5852dca389e3d95b8e21c8e3719301462c5d9faf"
 dependencies = [
  "lazy_static",
  "memchr",
@@ -374,9 +360,9 @@
 
 [[package]]
 name = "cc"
-version = "1.0.59"
+version = "1.0.66"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "66120af515773fb005778dc07c261bd201ec8ce50bd6e7144c927753fe013381"
+checksum = "4c0496836a84f8d0495758516b8621a622beb77c0fed418570e50764093ced48"
 dependencies = [
  "jobserver",
 ]
@@ -401,36 +387,47 @@
 
 [[package]]
 name = "chacha20"
-version = "0.5.0"
+version = "0.6.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "244fbce0d47e97e8ef2f63b81d5e05882cb518c68531eb33194990d7b7e85845"
+checksum = "ed8738f14471a99f0e316c327e68fc82a3611cc2895fcb604b89eedaf8f39d95"
 dependencies = [
- "stream-cipher",
+ "cipher",
  "zeroize",
 ]
 
 [[package]]
 name = "chacha20poly1305"
-version = "0.6.0"
+version = "0.7.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9bf18d374d66df0c05cdddd528a7db98f78c28e2519b120855c4f84c5027b1f5"
+checksum = "af1fc18e6d90c40164bf6c317476f2a98f04661e310e79830366b7e914c58a8e"
 dependencies = [
  "aead",
  "chacha20",
+ "cipher",
  "poly1305",
- "stream-cipher",
  "zeroize",
 ]
 
 [[package]]
 name = "chrono"
-version = "0.4.15"
+version = "0.4.19"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "942f72db697d8767c22d46a598e01f2d3b475501ea43d0db4f16d90259182d0b"
+checksum = "670ad68c9088c2a963aaa298cb369688cf3f9465ce5e2d4ca10e6e0098a1ce73"
 dependencies = [
+ "libc",
  "num-integer",
  "num-traits",
  "time",
+ "winapi 0.3.9",
+]
+
+[[package]]
+name = "cipher"
+version = "0.2.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "12f8e7987cbd042a63249497f41aed09f8e65add917ea6566effbc56578d6801"
+dependencies = [
+ "generic-array 0.14.4",
 ]
 
 [[package]]
@@ -465,15 +462,6 @@
 dependencies = [
  "bitflags 1.2.1",
 ]
-
-[[package]]
-name = "cloudabi"
-version = "0.1.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4344512281c643ae7638bbabc3af17a11307803ec8f0fcad9fae512a8bf36467"
-dependencies = [
- "bitflags 1.2.1",
-]
 
 [[package]]
 name = "colour"
@@ -486,15 +474,31 @@
 
 [[package]]
 name = "combine"
-version = "4.3.1"
+version = "4.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8aa333852c744df9b867733c71889e5120b55117b25ddc8a2d88dc5d9df5edea"
+checksum = "b9417a0c314565e2abffaece67e95a8cb51f9238cd39f3764d9dfdf09e72b20c"
 dependencies = [
  "bytes 0.5.6",
  "memchr",
- "pin-project-lite 0.1.10",
+ "pin-project-lite 0.1.11",
 ]
 
+[[package]]
+name = "console_error_panic_hook"
+version = "0.1.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b8d976903543e0c48546a91908f21588a680a8c8f984df9a5d69feccb2b2a211"
+dependencies = [
+ "cfg-if 0.1.10",
+ "wasm-bindgen",
+]
+
+[[package]]
+name = "const_fn"
+version = "0.4.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c478836e029dcef17fb47c89023448c64f781a046e0300e257ad8225ae59afab"
+
 [[package]]
 name = "constant_time_eq"
 version = "0.1.5"
@@ -503,9 +507,9 @@
 
 [[package]]
 name = "core-foundation"
-version = "0.7.0"
+version = "0.9.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "57d24c7a13c43e870e37c1556b74555437870a04514f7685f5b354e090567171"
+checksum = "0a89e2ae426ea83155dccf10c0fa6b1463ef6d5fcb44cee0b224a408fa640a62"
 dependencies = [
  "core-foundation-sys",
  "libc",
@@ -513,9 +517,9 @@
 
 [[package]]
 name = "core-foundation-sys"
-version = "0.7.0"
+version = "0.8.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b3a71ab494c0b5b860bdc8407ae08978052417070c2ced38573a9157ad75b8ac"
+checksum = "ea221b5284a47e40033bf9b66f35f984ec0ea2931eb03505246cd27a963f981b"
 
 [[package]]
 name = "criterion"
@@ -555,36 +559,35 @@
 
 [[package]]
 name = "crossbeam-channel"
-version = "0.4.3"
+version = "0.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "09ee0cc8804d5393478d743b035099520087a5186f3b93fa58cec08fa62407b6"
+checksum = "dca26ee1f8d361640700bde38b2c37d8c22b3ce2d360e1fc1c74ea4b0aa7d775"
 dependencies = [
- "cfg-if 0.1.10",
- "crossbeam-utils 0.7.2",
+ "cfg-if 1.0.0",
+ "crossbeam-utils 0.8.1",
 ]
 
 [[package]]
 name = "crossbeam-deque"
-version = "0.7.3"
+version = "0.8.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9f02af974daeee82218205558e51ec8768b48cf524bd01d550abe5573a608285"
+checksum = "94af6efb46fef72616855b036a624cf27ba656ffc9be1b9a3c931cfc7749a9a9"
 dependencies = [
+ "cfg-if 1.0.0",
  "crossbeam-epoch",
- "crossbeam-utils 0.7.2",
- "maybe-uninit",
+ "crossbeam-utils 0.8.1",
 ]
 
 [[package]]
 name = "crossbeam-epoch"
-version = "0.8.2"
+version = "0.9.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "058ed274caafc1f60c4997b5fc07bf7dc7cca454af7c6e81edffe5f33f70dace"
+checksum = "a1aaa739f95311c2c7887a76863f500026092fb1dce0161dab577e559ef3569d"
 dependencies = [
- "autocfg",
- "cfg-if 0.1.10",
- "crossbeam-utils 0.7.2",
+ "cfg-if 1.0.0",
+ "const_fn",
+ "crossbeam-utils 0.8.1",
  "lazy_static",
- "maybe-uninit",
  "memoffset",
  "scopeguard",
 ]
@@ -621,7 +624,7 @@
  "crossterm_winapi",
  "lazy_static",
  "libc",
- "mio 0.6.22",
+ "mio 0.6.23",
  "parking_lot 0.10.2",
  "signal-hook",
  "winapi 0.3.9",
@@ -629,34 +632,34 @@
 
 [[package]]
 name = "crossterm"
-version = "0.18.0"
+version = "0.18.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c2fcdc3c9cf8ee446222e8ee8691a6d21b563b8fe1a64b1873080db7b5b23cf0"
+checksum = "4e86d73f2a0b407b5768d10a8c720cf5d2df49a9efc10ca09176d201ead4b7fb"
 dependencies = [
  "bitflags 1.2.1",
  "crossterm_winapi",
  "lazy_static",
  "libc",
  "mio 0.7.6",
- "parking_lot 0.11.0",
+ "parking_lot 0.11.1",
  "signal-hook",
  "winapi 0.3.9",
 ]
 
 [[package]]
 name = "crossterm_winapi"
-version = "0.6.1"
+version = "0.6.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "057b7146d02fb50175fd7dbe5158f6097f33d02831f43b4ee8ae4ddf67b68f5c"
+checksum = "c2265c3f8e080075d9b6417aa72293fc71662f34b4af2612d8d1b074d29510db"
 dependencies = [
  "winapi 0.3.9",
 ]
 
 [[package]]
 name = "csv"
-version = "1.1.3"
+version = "1.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "00affe7f6ab566df61b4be3ce8cf16bc2576bca0963ceb0955e45d514bf9a279"
+checksum = "f9d58633299b24b515ac72a3f869f8b91306a3cec616a602843a383acd6f9e97"
 dependencies = [
  "bstr",
  "csv-core",
@@ -676,9 +679,9 @@
 
 [[package]]
 name = "ctrlc"
-version = "3.1.6"
+version = "3.1.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d0b676fa23f995faf587496dcd1c80fead847ed58d2da52ac1caca9a72790dd2"
+checksum = "b57a92e9749e10f25a171adcebfafe72991d45e7ec2dcb853e8f83d9dafaeb08"
 dependencies = [
  "nix",
  "winapi 0.3.9",
@@ -736,17 +739,11 @@
  "winapi 0.3.9",
 ]
 
-[[package]]
-name = "dtoa"
-version = "0.4.6"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "134951f4028bdadb9b84baf4232681efbf277da25144b9b0ad65df75946c422b"
-
 [[package]]
 name = "either"
-version = "1.6.0"
+version = "1.6.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cd56b59865bce947ac5958779cfa508f6c3b9497cc762b7e24a12d11ccde2c4f"
+checksum = "e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457"
 
 [[package]]
 name = "encode_unicode"
@@ -756,11 +753,11 @@
 
 [[package]]
 name = "encoding_rs"
-version = "0.8.24"
+version = "0.8.26"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a51b8cf747471cb9499b6d59e59b0444f4c90eba8968c4e44874e92b5b64ace2"
+checksum = "801bbab217d7f79c0062f4f7205b5d4427c6d1a7bd7aafdd1475f7c59d62b283"
 dependencies = [
- "cfg-if 0.1.10",
+ "cfg-if 1.0.0",
 ]
 
 [[package]]
@@ -794,7 +791,7 @@
  "chacha20poly1305",
  "circular-queue",
  "nanoserde",
- "parking_lot 0.11.0",
+ "parking_lot 0.11.1",
  "pqcrypto",
  "rand 0.7.3",
 ]
@@ -842,6 +839,16 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b"
 
+[[package]]
+name = "form_urlencoded"
+version = "1.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ece68d15c92e84fa4f19d3780f1294e5ca82a78a6d515f1efaabcc144688be00"
+dependencies = [
+ "matches",
+ "percent-encoding",
+]
+
 [[package]]
 name = "fuchsia-cprng"
 version = "0.1.1"
@@ -989,9 +996,9 @@
 
 [[package]]
 name = "getrandom"
-version = "0.1.14"
+version = "0.1.15"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7abc8dd8451921606d809ba32e95b6111925cd2906060d2dcc29c070220503eb"
+checksum = "fc587bc0ec293155d5bfa6b9891ec18a1e330c234f896ea47fbada4cadbe47e6"
 dependencies = [
  "cfg-if 0.1.10",
  "libc",
@@ -1000,9 +1007,9 @@
 
 [[package]]
 name = "gimli"
-version = "0.22.0"
+version = "0.23.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "aaf91faf136cb47367fa430cd46e37a788775e7fa104f8b4bcb3861dc389b724"
+checksum = "f6503fe142514ca4799d4c26297c4248239fe8838d827db6bd6065c6ed29a6ce"
 
 [[package]]
 name = "glob"
@@ -1012,9 +1019,9 @@
 
 [[package]]
 name = "h2"
-version = "0.2.6"
+version = "0.2.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "993f9e0baeed60001cf565546b0d3dbe6a6ad23f2bd31644a133c641eccf6d53"
+checksum = "5e4728fd124914ad25e99e3d15a9361a879f6620f63cb56bbb08f95abb97a535"
 dependencies = [
  "bytes 0.5.6",
  "fnv",
@@ -1024,9 +1031,10 @@
  "http",
  "indexmap",
  "slab",
- "tokio 0.2.22",
+ "tokio 0.2.23",
  "tokio-util 0.3.1",
  "tracing",
+ "tracing-futures",
 ]
 
 [[package]]
@@ -1046,18 +1054,15 @@
 
 [[package]]
 name = "hashbrown"
-version = "0.8.2"
+version = "0.9.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e91b62f79061a0bc2e046024cb7ba44b08419ed238ecbd9adbd787434b9e8c25"
-dependencies = [
- "autocfg",
-]
+checksum = "d7afe4a420e3fe79967a00898cc1f4db7c8a49a9333a29f8a4bd76a253d5cd04"
 
 [[package]]
 name = "heapless"
-version = "0.5.5"
+version = "0.5.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "73a8a2391a3bc70b31f60e7a90daa5755a360559c0b6b9c5cfc0fee482362dc0"
+checksum = "74911a68a1658cfcfb61bc0ccfbd536e3b6e906f8c2f7883ee50157e3e2184f1"
 dependencies = [
  "as-slice",
  "generic-array 0.13.2",
@@ -1067,9 +1072,9 @@
 
 [[package]]
 name = "hermit-abi"
-version = "0.1.15"
+version = "0.1.17"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3deed196b6e7f9e44a2ae8d94225d80302d81208b1bb673fd21fe634645c85a9"
+checksum = "5aca5565f760fb5b220e499d72710ed156fdb74e631659e99377d9ebfbd13ae8"
 dependencies = [
  "libc",
 ]
@@ -1101,6 +1106,12 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "cd179ae861f0c2e53da70d892f5f3029f9594be0c41dc5269cd371691b1dc2f9"
 
+[[package]]
+name = "httpdate"
+version = "0.3.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "494b4d60369511e7dea41cf646832512a94e542f68bb9c49e54518e0f468eb47"
+
 [[package]]
 name = "humantime"
 version = "1.3.0"
@@ -1112,9 +1123,9 @@
 
 [[package]]
 name = "hyper"
-version = "0.13.7"
+version = "0.13.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3e68a8dd9716185d9e64ea473ea6ef63529252e3e27623295a0378a19665d5eb"
+checksum = "f6ad767baac13b44d4529fcf58ba2cd0995e36e7b435bc5b039de6f47e880dbf"
 dependencies = [
  "bytes 0.5.6",
  "futures-channel",
@@ -1124,11 +1135,11 @@
  "http",
  "http-body",
  "httparse",
+ "httpdate",
  "itoa",
- "pin-project 0.4.25",
+ "pin-project 1.0.2",
  "socket2",
- "time",
- "tokio 0.2.22",
+ "tokio 0.2.23",
  "tower-service",
  "tracing",
  "want",
@@ -1143,7 +1154,7 @@
  "bytes 0.5.6",
  "hyper",
  "native-tls",
- "tokio 0.2.22",
+ "tokio 0.2.23",
  "tokio-tls",
 ]
 
@@ -1153,7 +1164,7 @@
 dependencies = [
  "env_logger",
  "log 0.4.11",
- "tokio 0.2.22",
+ "tokio 0.2.23",
 ]
 
 [[package]]
@@ -1175,7 +1186,7 @@
  "libc",
  "log 0.4.11",
  "num-integer",
- "parking_lot 0.11.0",
+ "parking_lot 0.11.1",
  "rand 0.7.3",
  "rayon",
  "secstr",
@@ -1200,12 +1211,12 @@
  "hyxe_crypt",
  "lazy_static",
  "log 0.4.11",
- "num 0.3.0",
- "num-bigint 0.3.0",
- "pin-project 0.4.25",
+ "num 0.3.1",
+ "num-bigint 0.3.1",
+ "pin-project 0.4.27",
  "rand 0.7.3",
  "serde",
- "tokio 0.3.4",
+ "tokio 0.3.5",
  "zerocopy 0.2.8",
 ]
 
@@ -1223,7 +1234,7 @@
  "log 0.4.11",
  "net2",
  "rsntp",
- "tokio 0.3.4",
+ "tokio 0.3.5",
  "whoami",
 ]
 
@@ -1249,12 +1260,12 @@
  "net2",
  "num 0.2.1",
  "num_cpus",
- "parking_lot 0.11.0",
+ "parking_lot 0.11.1",
  "rand 0.7.3",
  "rust-argon2",
  "secstr",
- "tokio 0.3.4",
- "tokio-util 0.5.0",
+ "tokio 0.3.5",
+ "tokio-util 0.5.1",
  "zerocopy 0.3.0",
 ]
 
@@ -1274,7 +1285,7 @@
  "random",
  "secstr",
  "serde",
- "tokio 0.3.4",
+ "tokio 0.3.5",
 ]
 
 [[package]]
@@ -1285,7 +1296,7 @@
  "bytes 0.6.0",
  "clap",
  "colour",
- "crossterm 0.18.0",
+ "crossterm 0.18.2",
  "ctrlc",
  "dirs 3.0.1",
  "env_logger",
@@ -1295,13 +1306,13 @@
  "hyxe_user",
  "lazy_static",
  "log 0.4.11",
- "parking_lot 0.11.0",
+ "parking_lot 0.11.1",
  "prettytable-rs",
  "serde",
  "serde_json",
  "termion",
- "tokio 0.3.4",
- "tokio-util 0.5.0",
+ "tokio 0.3.5",
+ "tokio-util 0.5.1",
 ]
 
 [[package]]
@@ -1327,16 +1338,16 @@
  "log 0.4.11",
  "rand 0.7.3",
  "simplelog",
- "tokio 0.3.4",
+ "tokio 0.3.5",
  "url",
  "xmltree",
 ]
 
 [[package]]
 name = "indexmap"
-version = "1.5.1"
+version = "1.6.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "86b45e59b16c76b11bf9738fd5d38879d3bd28ad292d7b313608becb17ae2df9"
+checksum = "55e2e4c765aa53a0424761bf9f41aa7a6ac1efa87238f59560640e27fca028f2"
 dependencies = [
  "autocfg",
  "hashbrown",
@@ -1344,9 +1355,12 @@
 
 [[package]]
 name = "instant"
-version = "0.1.6"
+version = "0.1.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5b141fdc7836c525d4d594027d318c84161ca17aaf8113ab1f81ab93ae897485"
+checksum = "61124eeebbd69b8190558df225adf7e4caafce0d743919e5d6b19652314ec5ec"
+dependencies = [
+ "cfg-if 1.0.0",
+]
 
 [[package]]
 name = "iovec"
@@ -1409,9 +1423,9 @@
 
 [[package]]
 name = "js-sys"
-version = "0.3.44"
+version = "0.3.46"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "85a7e2c92a4804dd459b86c339278d0fe87cf93757fae222c3fa3ae75458bc73"
+checksum = "cf3d7383929f7c9c7c2d0fa596f325832df98c3704f2c60553080f7127a58175"
 dependencies = [
  "wasm-bindgen",
 ]
@@ -1464,9 +1478,9 @@
 
 [[package]]
 name = "lock_api"
-version = "0.4.1"
+version = "0.4.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "28247cc5a5be2f05fbcd76dd0cf2c7d3b5400cb978a28042abcd4fa0b3f8261c"
+checksum = "dd96ffd135b2fd7b973ac026d28085defbe8983df057ced3eb4f2130b0831312"
 dependencies = [
  "scopeguard",
 ]
@@ -1507,23 +1521,17 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08"
 
-[[package]]
-name = "maybe-uninit"
-version = "2.0.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "60302e4db3a61da70c0cb7991976248362f30319e88850c487b9b95bbf059e00"
-
 [[package]]
 name = "memchr"
-version = "2.3.3"
+version = "2.3.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3728d817d99e5ac407411fa471ff9800a778d88a24685968b36824eaf4bee400"
+checksum = "0ee1c47aaa256ecabcaea351eae4a9b01ef39ed810004e298d2511ed284b1525"
 
 [[package]]
 name = "memoffset"
-version = "0.5.5"
+version = "0.6.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c198b026e1bbf08a937e94c6c60f9ec4a2267f5b0d2eec9c1b21b061ce2be55f"
+checksum = "157b4208e3059a8f9e78d559edc658e13df41410cb3ae03979c83130067fdd87"
 dependencies = [
  "autocfg",
 ]
@@ -1546,18 +1554,19 @@
 
 [[package]]
 name = "miniz_oxide"
-version = "0.4.1"
+version = "0.4.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4d7559a8a40d0f97e1edea3220f698f78b1c5ab67532e49f68fde3910323b722"
+checksum = "0f2d26ec3309788e423cfbf68ad1800f061638098d76a83681af979dc4eda19d"
 dependencies = [
  "adler",
+ "autocfg",
 ]
 
 [[package]]
 name = "mio"
-version = "0.6.22"
+version = "0.6.23"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fce347092656428bc8eaf6201042cb551b8d67855af7374542a92a0fbfcac430"
+checksum = "4afd66f5b91bf2a3bc13fad0e21caedac168ca4c707504e75585648ae80e4cc4"
 dependencies = [
  "cfg-if 0.1.10",
  "fuchsia-zircon",
@@ -1566,7 +1575,7 @@
  "kernel32-sys",
  "libc",
  "log 0.4.11",
- "miow 0.2.1",
+ "miow 0.2.2",
  "net2",
  "slab",
  "winapi 0.2.8",
@@ -1593,7 +1602,7 @@
 dependencies = [
  "iovec",
  "libc",
- "mio 0.6.22",
+ "mio 0.6.23",
 ]
 
 [[package]]
@@ -1605,17 +1614,17 @@
  "kernel32-sys",
  "lazycell",
  "log 0.4.11",
- "mio 0.6.22",
- "miow 0.2.1",
+ "mio 0.6.23",
+ "miow 0.2.2",
  "winapi 0.2.8",
  "ws2_32-sys",
 ]
 
 [[package]]
 name = "miow"
-version = "0.2.1"
+version = "0.2.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8c1f2f3b1cf331de6896aabf6e9d55dca90356cc9960cca7eaaf408a355ae919"
+checksum = "ebd808424166322d4a38da87083bfddd3ac4c131334ed55856112eb06d46944d"
 dependencies = [
  "kernel32-sys",
  "net2",
@@ -1644,24 +1653,24 @@
 
 [[package]]
 name = "nanoserde"
-version = "0.1.19"
+version = "0.1.21"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8f28fd3beeb39ed991b142c94dbaff19d194041cdc9db715af2c72b22b00d25c"
+checksum = "b6fcd4f145a3908af453e43543a3f45847c8e095bb3ca818729c1d1c14055e62"
 dependencies = [
  "nanoserde-derive",
 ]
 
 [[package]]
 name = "nanoserde-derive"
-version = "0.1.12"
+version = "0.1.13"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0e0d42774fb555d1dc23a985b52975fb39b4f1b53f26389389a926c49001c3b1"
+checksum = "cb64d3bcd1ce4f535e5804e21cc33f7e97bece37776557ff13d0b97a23a7194b"
 
 [[package]]
 name = "native-tls"
-version = "0.2.4"
+version = "0.2.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2b0d88c06fe90d5ee94048ba40409ef1d9315d86f6f38c2efdaad4fb50c58b2d"
+checksum = "6fcc7939b5edc4e4f86b1b4a04bb1498afaaf871b1a6691838ed06fcb48d3a3f"
 dependencies = [
  "lazy_static",
  "libc",
@@ -1677,9 +1686,9 @@
 
 [[package]]
 name = "net2"
-version = "0.2.34"
+version = "0.2.36"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2ba7c918ac76704fb42afcbbb43891e72731f3dcca3bef2a19786297baf14af7"
+checksum = "d7cf75f38f16cb05ea017784dc6dbfd354f76c223dba37701734c4f5a9337d02"
 dependencies = [
  "cfg-if 0.1.10",
  "libc",
@@ -1688,15 +1697,14 @@
 
 [[package]]
 name = "nix"
-version = "0.17.0"
+version = "0.18.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "50e4785f2c3b7589a0d0c1dd60285e1188adac4006e8abd6dd578e1567027363"
+checksum = "83450fe6a6142ddd95fb064b746083fc4ef1705fe81f64a64e1d4b39f54a1055"
 dependencies = [
  "bitflags 1.2.1",
  "cc",
  "cfg-if 0.1.10",
  "libc",
- "void",
 ]
 
 [[package]]
@@ -1707,9 +1715,9 @@
 
 [[package]]
 name = "ntapi"
-version = "0.3.4"
+version = "0.3.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7a31937dea023539c72ddae0e3571deadc1414b300483fa7aaec176168cfa9d2"
+checksum = "3f6bb902e437b6d86e03cce10a7e2af662292c5dfef23b65899ea3ac9354ad44"
 dependencies = [
  "winapi 0.3.9",
 ]
@@ -1730,15 +1738,15 @@
 
 [[package]]
 name = "num"
-version = "0.3.0"
+version = "0.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ab3e176191bc4faad357e3122c4747aa098ac880e88b168f106386128736cf4a"
+checksum = "8b7a8e9be5e039e2ff869df49155f1c06bd01ade2117ec783e56ab0932b67a8f"
 dependencies = [
- "num-bigint 0.3.0",
- "num-complex 0.3.0",
+ "num-bigint 0.3.1",
+ "num-complex 0.3.1",
  "num-integer",
  "num-iter",
- "num-rational 0.3.0",
+ "num-rational 0.3.2",
  "num-traits",
 ]
 
@@ -1755,9 +1763,9 @@
 
 [[package]]
 name = "num-bigint"
-version = "0.3.0"
+version = "0.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b7f3fc75e3697059fb1bc465e3d8cca6cf92f56854f201158b3f9c77d5a3cfa0"
+checksum = "5e9a41747ae4633fce5adffb4d2e81ffc5e89593cb19917f8fb2cc5ff76507bf"
 dependencies = [
  "autocfg",
  "num-integer",
@@ -1776,18 +1784,18 @@
 
 [[package]]
 name = "num-complex"
-version = "0.3.0"
+version = "0.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b05ad05bd8977050b171b3f6b48175fea6e0565b7981059b486075e1026a9fb5"
+checksum = "747d632c0c558b87dbabbe6a82f3b4ae03720d0646ac5b7b4dae89394be5f2c5"
 dependencies = [
  "num-traits",
 ]
 
 [[package]]
 name = "num-integer"
-version = "0.1.43"
+version = "0.1.44"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8d59457e662d541ba17869cf51cf177c0b5f0cbf476c66bdc90bf1edac4f875b"
+checksum = "d2cc698a63b549a70bc047073d2949cce27cd1c7b0a4a862d08a8031bc2801db"
 dependencies = [
  "autocfg",
  "num-traits",
@@ -1795,9 +1803,9 @@
 
 [[package]]
 name = "num-iter"
-version = "0.1.41"
+version = "0.1.42"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7a6e6b7c748f995c4c29c5f5ae0248536e04a5739927c74ec0fa564805094b9f"
+checksum = "b2021c8337a54d21aca0d59a92577a029af9431cb59b909b03252b9c164fad59"
 dependencies = [
  "autocfg",
  "num-integer",
@@ -1818,21 +1826,21 @@
 
 [[package]]
 name = "num-rational"
-version = "0.3.0"
+version = "0.3.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a5b4d7360f362cfb50dde8143501e6940b22f644be75a4cc90b2d81968908138"
+checksum = "12ac428b1cb17fce6f731001d307d351ec70a6d202fc2e60f7d4c5e42d8f4f07"
 dependencies = [
  "autocfg",
- "num-bigint 0.3.0",
+ "num-bigint 0.3.1",
  "num-integer",
  "num-traits",
 ]
 
 [[package]]
 name = "num-traits"
-version = "0.2.12"
+version = "0.2.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ac267bcc07f48ee5f8935ab0d24f316fb722d7a1292e2913f0cc196b29ffd611"
+checksum = "9a64b1ec5cda2586e284722486d802acf1f7dbdc623e2bfc57e65ca1cd099290"
 dependencies = [
  "autocfg",
 ]
@@ -1855,21 +1863,21 @@
 
 [[package]]
 name = "object"
-version = "0.20.0"
+version = "0.22.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1ab52be62400ca80aa00285d25253d7f7c437b7375c4de678f5405d3afe82ca5"
+checksum = "8d3b63360ec3cb337817c2dbd47ab4a0f170d285d8e5a2064600f3def1402397"
 
 [[package]]
 name = "once_cell"
-version = "1.4.1"
+version = "1.5.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "260e51e7efe62b592207e9e13a68e43692a7a279171d6ba57abd208bf23645ad"
+checksum = "13bd41f508810a131401606d54ac32a467c97172d74ba7662562ebba5ad07fa0"
 
 [[package]]
 name = "oorandom"
-version = "11.1.2"
+version = "11.1.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a170cebd8021a008ea92e4db85a72f80b35df514ec664b296fdcbb654eac0b2c"
+checksum = "0ab1bc2a289d34bd04a330323ac98a1b4bc82c9d9fcb1e66b63caa84da26b575"
 
 [[package]]
 name = "opaque-debug"
@@ -1922,13 +1930,13 @@
 
 [[package]]
 name = "parking_lot"
-version = "0.11.0"
+version = "0.11.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a4893845fa2ca272e647da5d0e46660a314ead9c2fdd9a883aabc32e481a8733"
+checksum = "6d7744ac029df22dca6284efe4e898991d28e3085c706c972bcd7da4a27a15eb"
 dependencies = [
  "instant",
- "lock_api 0.4.1",
- "parking_lot_core 0.8.0",
+ "lock_api 0.4.2",
+ "parking_lot_core 0.8.1",
 ]
 
 [[package]]
@@ -1938,7 +1946,7 @@
 checksum = "d58c7c768d4ba344e3e8d72518ac13e259d7c7ade24167003b8488e10b6740a3"
 dependencies = [
  "cfg-if 0.1.10",
- "cloudabi 0.0.3",
+ "cloudabi",
  "libc",
  "redox_syscall",
  "smallvec",
@@ -1947,12 +1955,11 @@
 
 [[package]]
 name = "parking_lot_core"
-version = "0.8.0"
+version = "0.8.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c361aa727dd08437f2f1447be8b59a33b0edd15e0fcee698f935613d9efbca9b"
+checksum = "d7c6d9b8427445284a09c55be860a15855ab580a417ccad9da88f5a06787ced0"
 dependencies = [
- "cfg-if 0.1.10",
- "cloudabi 0.1.0",
+ "cfg-if 1.0.0",
  "instant",
  "libc",
  "redox_syscall",
@@ -1968,11 +1975,11 @@
 
 [[package]]
 name = "pin-project"
-version = "0.4.25"
+version = "0.4.27"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2b9e280448854bd91559252582173b3bd1f8e094a0e644791c0628ca9b1f144f"
+checksum = "2ffbc8e94b38ea3d2d8ba92aea2983b503cd75d0888d75b86bb37970b5698e15"
 dependencies = [
- "pin-project-internal 0.4.25",
+ "pin-project-internal 0.4.27",
 ]
 
 [[package]]
@@ -1986,9 +1993,9 @@
 
 [[package]]
 name = "pin-project-internal"
-version = "0.4.25"
+version = "0.4.27"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c8c8b352676bc6a4c3d71970560b913cea444a7a921cc2e2d920225e4b91edaa"
+checksum = "65ad2ae56b6abe3a1ee25f15ee605bacadb9a764edaba9c2bf4103800d4a1895"
 dependencies = [
  "proc-macro2 1.0.24",
  "quote 1.0.7",
@@ -2008,9 +2015,9 @@
 
 [[package]]
 name = "pin-project-lite"
-version = "0.1.10"
+version = "0.1.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e555d9e657502182ac97b539fb3dae8b79cda19e3e4f8ffb5e8de4f18df93c95"
+checksum = "c917123afa01924fc84bb20c4c03f004d9c38e5127e3c039bbf7f4b9c76a2f6b"
 
 [[package]]
 name = "pin-project-lite"
@@ -2026,9 +2033,9 @@
 
 [[package]]
 name = "pkg-config"
-version = "0.3.18"
+version = "0.3.19"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d36492546b6af1463394d46f0c834346f31548646f6ba10849802c9c9a27ac33"
+checksum = "3831453b3449ceb48b6d9c7ad7c96d5ea673e9b470a1dc578c2ce6521230884c"
 
 [[package]]
 name = "plotters"
@@ -2053,19 +2060,19 @@
 
 [[package]]
 name = "polyval"
-version = "0.4.1"
+version = "0.4.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a5884790f1ce3553ad55fec37b5aaac5882e0e845a2612df744d6c85c9bf046c"
+checksum = "b3fd900a291ceb8b99799cc8cd3d1d3403a51721e015bc533528b2ceafcc443c"
 dependencies = [
- "cfg-if 0.1.10",
+ "cfg-if 1.0.0",
  "universal-hash",
 ]
 
 [[package]]
 name = "ppv-lite86"
-version = "0.2.9"
+version = "0.2.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c36fa947111f5c62a733b652544dd0016a43ce89619538a8ef92724a6f501a20"
+checksum = "ac74c624d6b2d21f425f752262f42188365d7b8ff1aff74c82e45136510a4857"
 
 [[package]]
 name = "pqcrypto"
@@ -2240,9 +2247,9 @@
 
 [[package]]
 name = "rayon"
-version = "1.4.0"
+version = "1.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cfd016f0c045ad38b5251be2c9c0ab806917f82da4d36b2a327e5166adad9270"
+checksum = "8b0d8e0819fadc20c74ea8373106ead0600e3a67ef1fe8da56e39b9ae7275674"
 dependencies = [
  "autocfg",
  "crossbeam-deque",
@@ -2252,13 +2259,13 @@
 
 [[package]]
 name = "rayon-core"
-version = "1.8.0"
+version = "1.9.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "91739a34c4355b5434ce54c9086c5895604a9c278586d1f1aa95e04f66b525a0"
+checksum = "9ab346ac5921dc62ffa9f89b7a773907511cdfa5490c572ae9be1be33e8afa4a"
 dependencies = [
  "crossbeam-channel",
  "crossbeam-deque",
- "crossbeam-utils 0.7.2",
+ "crossbeam-utils 0.8.1",
  "lazy_static",
  "num_cpus",
 ]
@@ -2312,9 +2319,9 @@
 
 [[package]]
 name = "regex"
-version = "1.3.9"
+version = "1.4.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9c3780fcf44b193bc4d09f36d2a3c87b251da4a046c87795a0d35f4f927ad8e6"
+checksum = "38cf2c13ed4745de91a5eb834e11c00bcc3709e773173b2ce4c56c9fbde04b9c"
 dependencies = [
  "aho-corasick",
  "memchr",
@@ -2333,9 +2340,9 @@
 
 [[package]]
 name = "regex-syntax"
-version = "0.6.18"
+version = "0.6.21"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "26412eb97c6b088a6997e05f69403a802a92d520de2f8e63c2b65f9e0f47c4e8"
+checksum = "3b181ba2dcf07aaccad5448e8ead58db5b742cf85dfe035e2227f137a539a189"
 
 [[package]]
 name = "remove_dir_all"
@@ -2348,11 +2355,11 @@
 
 [[package]]
 name = "reqwest"
-version = "0.10.8"
+version = "0.10.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e9eaa17ac5d7b838b7503d118fa16ad88f440498bf9ffe5424e621f93190d61e"
+checksum = "fb15d6255c792356a0f578d8a645c677904dc02e862bebe2ecc18e0c01b9a0ce"
 dependencies = [
- "base64 0.12.3",
+ "base64",
  "bytes 0.5.6",
  "encoding_rs",
  "futures-core",
@@ -2369,14 +2376,15 @@
  "mime_guess",
  "native-tls",
  "percent-encoding",
- "pin-project-lite 0.1.10",
+ "pin-project-lite 0.2.0",
  "serde",
  "serde_urlencoded",
- "tokio 0.2.22",
+ "tokio 0.2.23",
  "tokio-tls",
  "url",
  "wasm-bindgen",
  "wasm-bindgen-futures",
+ "wasm-bindgen-test",
  "web-sys",
  "winreg",
 ]
@@ -2386,7 +2394,7 @@
 version = "4.0.5"
 dependencies = [
  "libc",
- "tokio 0.2.22",
+ "tokio 0.2.23",
  "winapi 0.3.9",
 ]
 
@@ -2395,7 +2403,7 @@
 version = "1.0.1"
 dependencies = [
  "chrono",
- "tokio 0.3.4",
+ "tokio 0.3.5",
 ]
 
 [[package]]
@@ -2404,7 +2412,7 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "4b18820d944b33caa75a71378964ac46f58517c92b6ae5f762636247c09e78fb"
 dependencies = [
- "base64 0.13.0",
+ "base64",
  "blake2b_simd",
  "constant_time_eq",
  "crossbeam-utils 0.8.1",
@@ -2412,9 +2420,9 @@
 
 [[package]]
 name = "rustc-demangle"
-version = "0.1.16"
+version = "0.1.18"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4c691c0e608126e00913e33f0ccf3727d5fc84573623b8d65b2df340b5201783"
+checksum = "6e3bad0ee36814ca07d7968269dd4b7ec89ec2da10c4bb613928d3077083c232"
 
 [[package]]
 name = "rustc_version"
@@ -2450,6 +2458,12 @@
  "winapi 0.3.9",
 ]
 
+[[package]]
+name = "scoped-tls"
+version = "1.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ea6a9290e3c9cf0f18145ef7ffa62d68ee0bf5fcd651017e586dc7fd5da448c2"
+
 [[package]]
 name = "scoped_threadpool"
 version = "0.1.9"
@@ -2473,9 +2487,9 @@
 
 [[package]]
 name = "security-framework"
-version = "0.4.4"
+version = "2.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "64808902d7d99f78eaddd2b4e2509713babc3dc3c85ad6f4c447680f3c01e535"
+checksum = "c1759c2e3c8580017a484a7ac56d3abc5a6c1feadf88db2f3633f12ae4268c69"
 dependencies = [
  "bitflags 1.2.1",
  "core-foundation",
@@ -2486,9 +2500,9 @@
 
 [[package]]
 name = "security-framework-sys"
-version = "0.4.3"
+version = "2.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "17bf11d99252f512695eb468de5516e5cf75455521e69dfe343f3b74e4748405"
+checksum = "f99b9d5e26d2a71633cc4f2ebae7cc9f874044e0c351a27e17892d76dce5678b"
 dependencies = [
  "core-foundation-sys",
  "libc",
@@ -2511,9 +2525,9 @@
 
 [[package]]
 name = "serde"
-version = "1.0.115"
+version = "1.0.118"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e54c9a88f2da7238af84b5101443f0c0d0a3bbdc455e34a5c9497b1903ed55d5"
+checksum = "06c64263859d87aa2eb554587e2d23183398d617427327cf2b3d0ed8c69e4800"
 dependencies = [
  "serde_derive",
 ]
@@ -2530,9 +2544,9 @@
 
 [[package]]
 name = "serde_derive"
-version = "1.0.115"
+version = "1.0.118"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "609feed1d0a73cc36a0182a840a9b37b4a82f0b1150369f0536a9e3f2a31dc48"
+checksum = "c84d3526699cd55261af4b941e4e725444df67aa4f9e6a3564f18030d12672df"
 dependencies = [
  "proc-macro2 1.0.24",
  "quote 1.0.7",
@@ -2541,9 +2555,9 @@
 
 [[package]]
 name = "serde_json"
-version = "1.0.57"
+version = "1.0.60"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "164eacbdb13512ec2745fb09d51fd5b22b0d65ed294a1dcf7285a360c80a675c"
+checksum = "1500e84d27fe482ed1dc791a56eddc2f230046a040fa908c08bda1d9fb615779"
 dependencies = [
  "itoa",
  "ryu",
@@ -2552,14 +2566,14 @@
 
 [[package]]
 name = "serde_urlencoded"
-version = "0.6.1"
+version = "0.7.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9ec5d77e2d4c73717816afac02670d5c4f534ea95ed430442cad02e7a6e32c97"
+checksum = "edfa57a7f8d9c1d260a549e7224100f6c43d43f9103e06dd8b4095a9b2b43ce9"
 dependencies = [
- "dtoa",
+ "form_urlencoded",
  "itoa",
+ "ryu",
  "serde",
- "url",
 ]
 
 [[package]]
@@ -2569,18 +2583,17 @@
 checksum = "604508c1418b99dfe1925ca9224829bb2a8a9a04dda655cc01fcad46f4ab05ed"
 dependencies = [
  "libc",
- "mio 0.6.22",
+ "mio 0.6.23",
  "mio 0.7.6",
  "signal-hook-registry",
 ]
 
 [[package]]
 name = "signal-hook-registry"
-version = "1.2.1"
+version = "1.2.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a3e12110bc539e657a646068aaf5eb5b63af9d0c1f7b29c97113fad80e15f035"
+checksum = "ce32ea0c6c56d5eacaeb814fbed9960547021d3edd010ded1425f180536b20ab"
 dependencies = [
- "arc-swap",
  "libc",
 ]
 
@@ -2603,9 +2616,9 @@
 
 [[package]]
 name = "smallvec"
-version = "1.4.2"
+version = "1.5.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fbee7696b84bbf3d89a1c2eccff0850e3047ed46bfcd2e92c29a2d074d57e252"
+checksum = "ae524f056d7d770e174287294f562e95044c68e88dec909a00d2094805db9d75"
 
 [[package]]
 name = "socket2"
@@ -2625,16 +2638,6 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3"
 
-[[package]]
-name = "stream-cipher"
-version = "0.7.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c80e15f898d8d8f25db24c253ea615cc14acf418ff307822995814e7d42cfa89"
-dependencies = [
- "block-cipher 0.8.0",
- "generic-array 0.14.4",
-]
-
 [[package]]
 name = "strsim"
 version = "0.8.0"
@@ -2643,9 +2646,9 @@
 
 [[package]]
 name = "subtle"
-version = "2.2.3"
+version = "2.3.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "502d53007c02d7605a05df1c1a73ee436952781653da5d0bf57ad608f66932c1"
+checksum = "343f3f510c2915908f155e94f17220b19ccfacf2a64a2a5d8004f2c3e311e7fd"
 
 [[package]]
 name = "syn"
@@ -2730,9 +2733,9 @@
 
 [[package]]
 name = "termcolor"
-version = "1.1.0"
+version = "1.1.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bb6bfa289a4d7c5766392812c0a1f4c1ba45afa1ad47803c11e1f407d846d75f"
+checksum = "2dfed899f0eb03f32ee8c6a0aabdb8a7949659e3466561fc0adf54e26d88c5f4"
 dependencies = [
  "winapi-util",
 ]
@@ -2790,15 +2793,24 @@
 
 [[package]]
 name = "tinyvec"
-version = "0.3.4"
+version = "1.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ccf8dbc19eb42fba10e8feaaec282fb50e2c14b2726d6301dbfeed0f73306a6f"
+dependencies = [
+ "tinyvec_macros",
+]
+
+[[package]]
+name = "tinyvec_macros"
+version = "0.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "238ce071d267c5710f9d31451efec16c5ee22de34df17cc05e56cbc92e967117"
+checksum = "cda74da7e1a664f795bb1f8a87ec406fb89a02522cf6e50620d016add6dbbf5c"
 
 [[package]]
 name = "tokio"
-version = "0.2.22"
+version = "0.2.23"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5d34ca54d84bf2b5b4d7d31e901a8464f7b60ac145a284fba25ceb801f2ddccd"
+checksum = "a6d7ad61edd59bfcc7e80dababf0f4aed2e6d5e0ba1659356ae889752dfc12ff"
 dependencies = [
  "bytes 0.5.6",
  "fnv",
@@ -2807,26 +2819,26 @@
  "lazy_static",
  "libc",
  "memchr",
- "mio 0.6.22",
+ "mio 0.6.23",
  "mio-uds",
- "pin-project-lite 0.1.10",
+ "pin-project-lite 0.1.11",
  "slab",
- "tokio-macros 0.2.5",
+ "tokio-macros 0.2.6",
 ]
 
 [[package]]
 name = "tokio"
-version = "0.3.4"
+version = "0.3.5"
 dependencies = [
  "autocfg",
  "bytes 0.6.0",
  "futures-core",
- "lazy_static",
  "libc",
  "memchr",
  "mio 0.7.6",
  "num_cpus",
- "parking_lot 0.11.0",
+ "once_cell",
+ "parking_lot 0.11.1",
  "pin-project-lite 0.2.0",
  "signal-hook-registry",
  "slab",
@@ -2836,9 +2848,9 @@
 
 [[package]]
 name = "tokio-macros"
-version = "0.2.5"
+version = "0.2.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f0c3acc6aa564495a0f2e1d59fab677cd7f81a19994cfc7f3ad0e64301560389"
+checksum = "e44da00bfc73a25f814cd8d7e57a68a5c31b74b3152a0a1d1f590c97ed06265a"
 dependencies = [
  "proc-macro2 1.0.24",
  "quote 1.0.7",
@@ -2861,7 +2873,7 @@
 checksum = "9a70f4fcd7b3b24fb194f837560168208f669ca8cb70d0c4b862944452396343"
 dependencies = [
  "native-tls",
- "tokio 0.2.22",
+ "tokio 0.2.23",
 ]
 
 [[package]]
@@ -2874,13 +2886,13 @@
  "futures-core",
  "futures-sink",
  "log 0.4.11",
- "pin-project-lite 0.1.10",
- "tokio 0.2.22",
+ "pin-project-lite 0.1.11",
+ "tokio 0.2.23",
 ]
 
 [[package]]
 name = "tokio-util"
-version = "0.5.0"
+version = "0.5.1"
 dependencies = [
  "bytes 0.6.0",
  "futures-core",
@@ -2888,7 +2900,7 @@
  "log 0.4.11",
  "pin-project-lite 0.2.0",
  "slab",
- "tokio 0.3.4",
+ "tokio 0.3.5",
 ]
 
 [[package]]
@@ -2899,11 +2911,11 @@
  "futures",
  "iovec",
  "log 0.4.11",
- "mio 0.6.22",
+ "mio 0.6.23",
  "mio-uds-windows",
- "pin-project 0.4.25",
+ "pin-project 0.4.27",
  "tempfile",
- "tokio 0.2.22",
+ "tokio 0.2.23",
  "tokio-util 0.3.1",
 ]
 
@@ -2915,24 +2927,35 @@
 
 [[package]]
 name = "tracing"
-version = "0.1.19"
+version = "0.1.22"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6d79ca061b032d6ce30c660fded31189ca0b9922bf483cd70759f13a2d86786c"
+checksum = "9f47026cdc4080c07e49b37087de021820269d996f581aac150ef9e5583eefe3"
 dependencies = [
- "cfg-if 0.1.10",
+ "cfg-if 1.0.0",
  "log 0.4.11",
+ "pin-project-lite 0.2.0",
  "tracing-core",
 ]
 
 [[package]]
 name = "tracing-core"
-version = "0.1.15"
+version = "0.1.17"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4f0e00789804e99b20f12bc7003ca416309d28a6f495d6af58d1e2c2842461b5"
+checksum = "f50de3927f93d202783f4513cda820ab47ef17f624b03c096e86ef00c67e6b5f"
 dependencies = [
  "lazy_static",
 ]
 
+[[package]]
+name = "tracing-futures"
+version = "0.2.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ab7bb6f14721aa00656086e9335d363c5c8747bae02ebe32ea2c7dece5689b4c"
+dependencies = [
+ "pin-project 0.4.27",
+ "tracing",
+]
+
 [[package]]
 name = "try-lock"
 version = "0.2.3"
@@ -2976,9 +2999,9 @@
 
 [[package]]
 name = "unicode-normalization"
-version = "0.1.13"
+version = "0.1.16"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6fb19cf769fa8c6a80a162df694621ebeb4dafb606470b2b2fce0be40a98a977"
+checksum = "a13e63ab62dbe32aeee58d1c5408d35c36c392bba5d9d3142287219721afe606"
 dependencies = [
  "tinyvec",
 ]
@@ -3013,10 +3036,11 @@
 
 [[package]]
 name = "url"
-version = "2.1.1"
+version = "2.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "829d4a8476c35c9bf0bbce5a3b23f4106f79728039b726d292bb93bc106787cb"
+checksum = "5909f2b0817350449ed73e8bcd81c8c3c8d9a7a5d8acba4b27db277f1868976e"
 dependencies = [
+ "form_urlencoded",
  "idna",
  "matches",
  "percent-encoding",
@@ -3040,12 +3064,6 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "b5a972e5669d67ba988ce3dc826706fb0a8b01471c088cb0b6110b805cc36aed"
 
-[[package]]
-name = "void"
-version = "1.0.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d"
-
 [[package]]
 name = "walkdir"
 version = "2.3.1"
@@ -3081,11 +3099,11 @@
 
 [[package]]
 name = "wasm-bindgen"
-version = "0.2.67"
+version = "0.2.69"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f0563a9a4b071746dd5aedbc3a28c6fe9be4586fb3fbadb67c400d4f53c6b16c"
+checksum = "3cd364751395ca0f68cafb17666eee36b63077fb5ecd972bbcd74c90c4bf736e"
 dependencies = [
- "cfg-if 0.1.10",
+ "cfg-if 1.0.0",
  "serde",
  "serde_json",
  "wasm-bindgen-macro",
@@ -3093,9 +3111,9 @@
 
 [[package]]
 name = "wasm-bindgen-backend"
-version = "0.2.67"
+version = "0.2.69"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bc71e4c5efa60fb9e74160e89b93353bc24059999c0ae0fb03affc39770310b0"
+checksum = "1114f89ab1f4106e5b55e688b828c0ab0ea593a1ea7c094b141b14cbaaec2d62"
 dependencies = [
  "bumpalo",
  "lazy_static",
@@ -3108,11 +3126,11 @@
 
 [[package]]
 name = "wasm-bindgen-futures"
-version = "0.4.17"
+version = "0.4.19"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "95f8d235a77f880bcef268d379810ea6c0af2eacfa90b1ad5af731776e0c4699"
+checksum = "1fe9756085a84584ee9457a002b7cdfe0bfff169f45d2591d8be1345a6780e35"
 dependencies = [
- "cfg-if 0.1.10",
+ "cfg-if 1.0.0",
  "js-sys",
  "wasm-bindgen",
  "web-sys",
@@ -3120,9 +3138,9 @@
 
 [[package]]
 name = "wasm-bindgen-macro"
-version = "0.2.67"
+version = "0.2.69"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "97c57cefa5fa80e2ba15641578b44d36e7a64279bc5ed43c6dbaf329457a2ed2"
+checksum = "7a6ac8995ead1f084a8dea1e65f194d0973800c7f571f6edd70adf06ecf77084"
 dependencies = [
  "quote 1.0.7",
  "wasm-bindgen-macro-support",
@@ -3130,9 +3148,9 @@
 
 [[package]]
 name = "wasm-bindgen-macro-support"
-version = "0.2.67"
+version = "0.2.69"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "841a6d1c35c6f596ccea1f82504a192a60378f64b3bb0261904ad8f2f5657556"
+checksum = "b5a48c72f299d80557c7c62e37e7225369ecc0c963964059509fbafe917c7549"
 dependencies = [
  "proc-macro2 1.0.24",
  "quote 1.0.7",
@@ -3143,15 +3161,39 @@
 
 [[package]]
 name = "wasm-bindgen-shared"
-version = "0.2.67"
+version = "0.2.69"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "93b162580e34310e5931c4b792560108b10fd14d64915d7fff8ff00180e70092"
+checksum = "7e7811dd7f9398f14cc76efd356f98f03aa30419dea46aa810d71e819fc97158"
+
+[[package]]
+name = "wasm-bindgen-test"
+version = "0.3.19"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0355fa0c1f9b792a09b6dcb6a8be24d51e71e6d74972f9eb4a44c4c004d24a25"
+dependencies = [
+ "console_error_panic_hook",
+ "js-sys",
+ "scoped-tls",
+ "wasm-bindgen",
+ "wasm-bindgen-futures",
+ "wasm-bindgen-test-macro",
+]
+
+[[package]]
+name = "wasm-bindgen-test-macro"
+version = "0.3.19"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "27e07b46b98024c2ba2f9e83a10c2ef0515f057f2da299c1762a2017de80438b"
+dependencies = [
+ "proc-macro2 1.0.24",
+ "quote 1.0.7",
+]
 
 [[package]]
 name = "web-sys"
-version = "0.3.44"
+version = "0.3.46"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "dda38f4e5ca63eda02c059d243aa25b5f35ab98451e518c51612cd0f1bd19a47"
+checksum = "222b1ef9334f92a21d3fb53dc3fd80f30836959a90f9274a626d7e06315ba3c3"
 dependencies = [
  "js-sys",
  "wasm-bindgen",
@@ -3233,9 +3275,9 @@
 
 [[package]]
 name = "xmltree"
-version = "0.10.1"
+version = "0.10.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f76badaccb0313f1f0cb6582c2973f2dd0620f9652eb7a5ff6ced0cc3ac922b3"
+checksum = "d046fd42d4137234742eae0d05b4fb6fbdda9aed7c78e523ae890fd87c7e11dd"
 dependencies = [
  "xml-rs",
 ]
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"BranchesTreeState\">\r\n    <expand>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"LOCAL_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"GROUP_NODE:origin\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n    </expand>\r\n    <select />\r\n  </component>\r\n  <component name=\"CMakeRunConfigurationManager\" shouldGenerate=\"true\" shouldDeleteObsolete=\"true\">\r\n    <generated />\r\n  </component>\r\n  <component name=\"CMakeSettings\">\r\n    <configurations>\r\n      <configuration PROFILE_NAME=\"Debug\" CONFIG_NAME=\"Debug\" />\r\n    </configurations>\r\n  </component>\r\n  <component name=\"CargoProjects\">\r\n    <cargoProject FILE=\"$PROJECT_DIR$/Cargo.toml\" />\r\n    <cargoProject FILE=\"$PROJECT_DIR$/hyxe_user/Cargo.toml\" />\r\n    <cargoProject FILE=\"$PROJECT_DIR$/hyxe_fs/Cargo.toml\" />\r\n    <cargoProject FILE=\"$PROJECT_DIR$/hyxe_config/Cargo.toml\" />\r\n    <cargoProject FILE=\"$PROJECT_DIR$/hyxe_net/Cargo.toml\" />\r\n    <cargoProject FILE=\"$PROJECT_DIR$/hyxe_nat/Cargo.toml\" />\r\n    <cargoProject FILE=\"$PROJECT_DIR$/async_udt/Cargo.toml\" />\r\n    <cargoProject FILE=\"$PROJECT_DIR$/async_udt/udt-rs/Cargo.toml\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"9ba86fcb-f55c-4698-a5ca-e0aac968b922\" name=\"local history tokio0.3.5\" comment=\"local history tokio0.3.5&#10;This has some subtle bugs that need to be addressed (connection does not work; suspect problem with tokio03. For now, we won't use this version\">\r\n      <change afterPath=\"$PROJECT_DIR$/launcher/.idea/libraries/commons_configuration2_2_7.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/launcher/.idea/libraries/commons_configuration_1_10.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/codeStyles/Project.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Cargo.lock\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Cargo.lock\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/ez_pqcrypto/src/replay_attack_container.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/ez_pqcrypto/src/replay_attack_container.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_crypt/Cargo.toml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_crypt/Cargo.toml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_crypt/src/net/crypt_splitter.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_crypt/src/net/crypt_splitter.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_crypt/src/sec_bytes.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_crypt/src/sec_bytes.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_fs/Cargo.toml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_fs/Cargo.toml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_fs/src/file_crypt_scrambler.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_fs/src/file_crypt_scrambler.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_nat/Cargo.toml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_nat/Cargo.toml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_nat/rust-igd/Cargo.toml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_nat/rust-igd/Cargo.toml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_nat/rust-igd/src/errors.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_nat/rust-igd/src/errors.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_nat/src/udp_traversal/linear/method3.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_nat/src/udp_traversal/linear/method3.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/Cargo.toml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/Cargo.toml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/constants.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/constants.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_crafter.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_crafter.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/deregister_packet.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/deregister_packet.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/disconnect_packet.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/disconnect_packet.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/mod.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/mod.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/peer/group_broadcast.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/peer/group_broadcast.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/peer_cmd_packet.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/peer_cmd_packet.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/preconnect_packet.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/preconnect_packet.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/primary_group_packet.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/primary_group_packet.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/raw_primary_packet.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/raw_primary_packet.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/wave_group_packet.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/wave_group_packet.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_server.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_server.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_session.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_session.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_session_manager.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/hdp_session_manager.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/mod.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/mod.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/nat_handler.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/nat_handler.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/outbound_sender.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/outbound_sender.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/peer/channel.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/peer/channel.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/peer/peer_crypt.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/peer/peer_crypt.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/peer/peer_layer.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/peer/peer_layer.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/session_queue_handler.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/session_queue_handler.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/state_container.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/state_container.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/udp_framed.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/udp_framed.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/hdp/validation.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/hdp/validation.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/inner_arg.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/inner_arg.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/kernel/kernel_executor.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/kernel/kernel_executor.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_net/src/lib.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_net/src/lib.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_user/Cargo.toml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_user/Cargo.toml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxe_user/src/network_account.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxe_user/src/network_account.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxewave/Cargo.toml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxewave/Cargo.toml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxewave/src/command_handlers/connect.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxewave/src/command_handlers/connect.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxewave/src/command_handlers/group.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxewave/src/command_handlers/group.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxewave/src/command_handlers/peer.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxewave/src/command_handlers/peer.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxewave/src/command_handlers/register.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxewave/src/command_handlers/register.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxewave/src/command_handlers/send.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxewave/src/command_handlers/send.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxewave/src/console/console_context.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxewave/src/console/console_context.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxewave/src/ffi/command_handler.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxewave/src/ffi/command_handler.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxewave/src/hdp_initiator.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxewave/src/hdp_initiator.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxewave/src/kernel.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxewave/src/kernel.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxewave/src/lib.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxewave/src/lib.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxewave/src/primary_terminal.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxewave/src/primary_terminal.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/hyxewave/src/ticket_event.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hyxewave/src/ticket_event.rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/launcher/src/com/satori/Execute.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/launcher/src/com/satori/Execute.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/local_history.patch\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/local_history.patch\" afterDir=\"false\" />\r\n    </list>\r\n    <list id=\"0501a0c8-9cbe-42c6-af13-f5bb287722a6\" name=\"Default Changelist\" comment=\"Progress on hyxe networking\">\r\n      <change beforePath=\"$PROJECT_DIR$/async_udt/udt-rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/async_udt/udt-rs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/base64-codec\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/base64-codec\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/rsntp\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/rsntp\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/shrust\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/shrust\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ClangdSettings\">\r\n    <option name=\"formatViaClangd\" value=\"false\" />\r\n  </component>\r\n  <component name=\"CoverageViewManager\">\r\n    <option name=\"myElementSize\" value=\"258\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Rust File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"tokio02\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"ROOT_SYNC\" value=\"DONT_SYNC\" />\r\n  </component>\r\n  <component name=\"GitToolBoxStore\">\r\n    <option name=\"projectConfigVersion\" value=\"2\" />\r\n    <option name=\"recentBranches\">\r\n      <RecentBranches>\r\n        <option name=\"branchesForRepo\">\r\n          <list>\r\n            <RecentBranchesForRepo>\r\n              <option name=\"branches\">\r\n                <list>\r\n                  <RecentBranch>\r\n                    <option name=\"branchName\" value=\"tokio03\" />\r\n                    <option name=\"lastUsedInstant\" value=\"1607083991\" />\r\n                  </RecentBranch>\r\n                  <RecentBranch>\r\n                    <option name=\"branchName\" value=\"tokio02\" />\r\n                    <option name=\"lastUsedInstant\" value=\"1607083990\" />\r\n                  </RecentBranch>\r\n                </list>\r\n              </option>\r\n              <option name=\"repositoryRootUrl\" value=\"file://$PROJECT_DIR$\" />\r\n            </RecentBranchesForRepo>\r\n          </list>\r\n        </option>\r\n      </RecentBranches>\r\n    </option>\r\n  </component>\r\n  <component name=\"KotlinMultiplatform\">\r\n    <allAvailableExecutables />\r\n  </component>\r\n  <component name=\"MacroExpansionManager\">\r\n    <option name=\"directoryName\" value=\"CdSiLkPI\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1PYdLUIz3Och3xVYwGRcp62FiWt\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"add_unversioned_files\" value=\"true\" />\r\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\r\n    <property name=\"cf.first.check.clang-format\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/local_history_tokio0.3.5.patch\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\r\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"nodejs_interpreter_path.stuck_in_default_project\" value=\"undefined stuck path\" />\r\n    <property name=\"nodejs_npm_path_reset_for_default_project\" value=\"true\" />\r\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\r\n    <property name=\"org.rust.cargo.project.model.PROJECT_DISCOVERY\" value=\"true\" />\r\n    <property name=\"org.rust.hideDetachedFileNotificationsC:/hyxe_wave/HyperBuf/hyperbuf/src/util.rs\" value=\"true\" />\r\n    <property name=\"org.rust.hideDetachedFileNotificationsC:/hyxe_wave/base64-codec/src/lib.rs\" value=\"true\" />\r\n    <property name=\"org.rust.hideDetachedFileNotificationsC:/hyxe_wave/hyxe_crypt/src/encrypt.rs\" value=\"true\" />\r\n    <property name=\"org.rust.hideDetachedFileNotificationsC:/hyxe_wave/hyxe_crypt/src/encrypted_memory_artifact.rs\" value=\"true\" />\r\n    <property name=\"org.rust.hideDetachedFileNotificationsC:/hyxe_wave/hyxe_crypt/src/lib.rs\" value=\"true\" />\r\n    <property name=\"org.rust.hideDetachedFileNotificationsC:/hyxe_wave/hyxe_fs/src/hyxe_file.rs\" value=\"true\" />\r\n    <property name=\"org.rust.hideDetachedFileNotificationsC:/hyxe_wave/hyxe_user/src/client_account.rs\" value=\"true\" />\r\n    <property name=\"org.rust.hideDetachedFileNotificationsC:/hyxe_wave/hyxe_user/src/network_account.rs\" value=\"true\" />\r\n    <property name=\"org.rust.hideDetachedFileNotificationsC:/hyxe_wave/hyxe_user/src/network_map.rs\" value=\"true\" />\r\n    <property name=\"org.rust.hideDetachedFileNotificationsC:/hyxe_wave/hyxe_user/src/server_config_handler.rs\" value=\"true\" />\r\n    <property name=\"org.rust.hideDetachedFileNotificationsC:/hyxe_wave/hyxe_user/src/shutdown_hooks.rs\" value=\"true\" />\r\n    <property name=\"org.rust.hideDetachedFileNotificationsC:/hyxe_wave/hyxewave_net/src/connection/network_map.rs\" value=\"true\" />\r\n    <property name=\"org.rust.hideDetachedFileNotificationsC:/hyxe_wave/rustai/src/lib.rs\" value=\"true\" />\r\n    <property name=\"project.structure.last.edited\" value=\"Global Libraries\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.0\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.2\" />\r\n    <property name=\"restartRequiresConfirmation\" value=\"false\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.pluginManager\" />\r\n  </component>\r\n  <component name=\"ReadonlyStatusHandler\">\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\hyxe_wave\\hyxe_net\\backup\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\satori.net\\ez_pqcrypto\" />\r\n      <recent name=\"C:\\hyxe_wave\\hyxe_net\\src\\hdp\\peer\" />\r\n      <recent name=\"C:\\hyxe_wave\\hyxe_nat\\src\\udp_traversal\\linear\" />\r\n      <recent name=\"C:\\hyxe_wave\\src\\console\" />\r\n      <recent name=\"C:\\hyxe_wave\\hyxe_user\\src\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunAnythingCache\">\r\n    <option name=\"myCommands\">\r\n      <command value=\"cargo install --force --git https://github.com/kbknapp/cargo-outdated\" />\r\n      <command value=\"cargo-outdated\" />\r\n      <command value=\"cargo clean\" />\r\n    </option>\r\n  </component>\r\n  <component name=\"RunDashboard\">\r\n    <option name=\"excludedTypes\">\r\n      <set>\r\n        <option value=\"#com.intellij.j2ee.web.jsr45.JSR45ConfigurationFactory\" />\r\n        <option value=\"#com.intellij.j2ee.web.tomcat.TomcatRunConfigurationFactory\" />\r\n        <option value=\"GeronimoConfiguration\" />\r\n        <option value=\"GlassfishConfiguration\" />\r\n        <option value=\"GoogleAppEngineDevServer\" />\r\n        <option value=\"JBossConfiguration\" />\r\n        <option value=\"JettyConfiguration\" />\r\n        <option value=\"ResinConfigurationType\" />\r\n        <option value=\"TomeeConfiguration\" />\r\n        <option value=\"WebLogic Instance\" />\r\n        <option value=\"WebSphereRunConfigurationType\" />\r\n        <option value=\"com.intellij.dmserver.run.DMServerRunConfigurationType:id\" />\r\n      </set>\r\n    </option>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Cargo.Expand hyxe_crypt::sec_bytes [udt]\">\r\n    <configuration default=\"true\" type=\"GradleAppRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" PASS_PARENT_ENVS_2=\"true\">\r\n      <method v=\"2\">\r\n        <option name=\"com.jetbrains.cidr.cpp.gradle.execution.GradleNativeBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"ArquillianJUnit\" factoryName=\"\" nameIsGenerated=\"true\">\r\n      <option name=\"arquillianRunConfiguration\">\r\n        <value>\r\n          <option name=\"containerStateName\" value=\"\" />\r\n        </value>\r\n      </option>\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Build HyxeWave\" type=\"CargoCommandRunConfiguration\" factoryName=\"Cargo Command\">\r\n      <option name=\"channel\" value=\"NIGHTLY\" />\r\n      <option name=\"command\" value=\"build --package hyxewave --bin hyxewave\" />\r\n      <option name=\"allFeatures\" value=\"true\" />\r\n      <option name=\"emulateTerminal\" value=\"false\" />\r\n      <option name=\"backtrace\" value=\"FULL\" />\r\n      <option name=\"workingDirectory\" value=\"file://$PROJECT_DIR$\" />\r\n      <envs />\r\n      <method v=\"2\">\r\n        <option name=\"CARGO.BUILD_TASK_PROVIDER\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Expand hyxe_crypt::sec_bytes [udt]\" type=\"CargoCommandRunConfiguration\" factoryName=\"Cargo Command\" temporary=\"true\">\r\n      <option name=\"channel\" value=\"DEFAULT\" />\r\n      <option name=\"command\" value=\"expand --lib --color=always --theme=GitHub --tests sec_bytes\" />\r\n      <option name=\"allFeatures\" value=\"false\" />\r\n      <option name=\"emulateTerminal\" value=\"false\" />\r\n      <option name=\"backtrace\" value=\"SHORT\" />\r\n      <option name=\"workingDirectory\" value=\"file://$PROJECT_DIR$/hyxe_crypt\" />\r\n      <envs />\r\n      <method v=\"2\">\r\n        <option name=\"CARGO.BUILD_TASK_PROVIDER\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Expand hyxe_crypt::sec_string [udt]\" type=\"CargoCommandRunConfiguration\" factoryName=\"Cargo Command\" temporary=\"true\">\r\n      <option name=\"channel\" value=\"DEFAULT\" />\r\n      <option name=\"command\" value=\"expand --lib --color=always --theme=GitHub --tests sec_string\" />\r\n      <option name=\"allFeatures\" value=\"false\" />\r\n      <option name=\"emulateTerminal\" value=\"false\" />\r\n      <option name=\"backtrace\" value=\"SHORT\" />\r\n      <option name=\"workingDirectory\" value=\"file://$PROJECT_DIR$/hyxe_crypt\" />\r\n      <envs />\r\n      <method v=\"2\">\r\n        <option name=\"CARGO.BUILD_TASK_PROVIDER\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Run hyxewave 127.0.0.2\" type=\"CargoCommandRunConfiguration\" factoryName=\"Cargo Command\">\r\n      <option name=\"channel\" value=\"NIGHTLY\" />\r\n      <option name=\"command\" value=\"run --package hyxewave --bin hyxewave -- --type pure_server --bind 127.0.0.2\" />\r\n      <option name=\"allFeatures\" value=\"true\" />\r\n      <option name=\"emulateTerminal\" value=\"false\" />\r\n      <option name=\"backtrace\" value=\"FULL\" />\r\n      <option name=\"workingDirectory\" value=\"file://$PROJECT_DIR$\" />\r\n      <envs />\r\n      <method v=\"2\">\r\n        <option name=\"CARGO.BUILD_TASK_PROVIDER\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Run server_sym2\" type=\"CargoCommandRunConfiguration\" factoryName=\"Cargo Command\" temporary=\"true\">\r\n      <option name=\"channel\" value=\"NIGHTLY\" />\r\n      <option name=\"command\" value=\"run --package hyxe_nat --example server_sym2\" />\r\n      <option name=\"allFeatures\" value=\"true\" />\r\n      <option name=\"emulateTerminal\" value=\"false\" />\r\n      <option name=\"backtrace\" value=\"FULL\" />\r\n      <option name=\"workingDirectory\" value=\"file://$PROJECT_DIR$/async_udt/udt-rs\" />\r\n      <envs />\r\n      <method v=\"2\">\r\n        <option name=\"CARGO.BUILD_TASK_PROVIDER\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Test tests::encrypt_decrypt_test (1)\" type=\"CargoCommandRunConfiguration\" factoryName=\"Cargo Command\" temporary=\"true\">\r\n      <option name=\"channel\" value=\"NIGHTLY\" />\r\n      <option name=\"command\" value=\"test --package hyxe_fs --test primary tests::encrypt_decrypt_test -- --exact\" />\r\n      <option name=\"allFeatures\" value=\"true\" />\r\n      <option name=\"emulateTerminal\" value=\"false\" />\r\n      <option name=\"backtrace\" value=\"FULL\" />\r\n      <option name=\"workingDirectory\" value=\"file://$PROJECT_DIR$/async_udt/udt-rs\" />\r\n      <envs />\r\n      <method v=\"2\">\r\n        <option name=\"CARGO.BUILD_TASK_PROVIDER\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Test tests::secstring\" type=\"CargoCommandRunConfiguration\" factoryName=\"Cargo Command\" temporary=\"true\">\r\n      <option name=\"channel\" value=\"NIGHTLY\" />\r\n      <option name=\"command\" value=\"test --package hyxe_crypt --test primary tests::secstring -- --exact -- --nocapture\" />\r\n      <option name=\"allFeatures\" value=\"true\" />\r\n      <option name=\"emulateTerminal\" value=\"false\" />\r\n      <option name=\"backtrace\" value=\"FULL\" />\r\n      <option name=\"workingDirectory\" value=\"file://$PROJECT_DIR$\" />\r\n      <envs />\r\n      <method v=\"2\">\r\n        <option name=\"CARGO.BUILD_TASK_PROVIDER\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"CargoCommandRunConfiguration\" factoryName=\"Cargo Command\">\r\n      <option name=\"channel\" value=\"NIGHTLY\" />\r\n      <option name=\"command\" value=\"run\" />\r\n      <option name=\"allFeatures\" value=\"true\" />\r\n      <option name=\"emulateTerminal\" value=\"false\" />\r\n      <option name=\"backtrace\" value=\"FULL\" />\r\n      <option name=\"workingDirectory\" value=\"file://$PROJECT_DIR$\" />\r\n      <envs />\r\n      <method v=\"2\">\r\n        <option name=\"CARGO.BUILD_TASK_PROVIDER\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Cargo.Build HyxeWave\" />\r\n      <item itemvalue=\"Cargo.Run hyxewave 127.0.0.2\" />\r\n      <item itemvalue=\"Cargo.Expand hyxe_crypt::sec_string [udt]\" />\r\n      <item itemvalue=\"Cargo.Run server_sym2\" />\r\n      <item itemvalue=\"Cargo.Test tests::encrypt_decrypt_test (1)\" />\r\n      <item itemvalue=\"Cargo.Test tests::secstring\" />\r\n      <item itemvalue=\"Cargo.Expand hyxe_crypt::sec_bytes [udt]\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Cargo.Expand hyxe_crypt::sec_bytes [udt]\" />\r\n        <item itemvalue=\"Cargo.Test tests::secstring\" />\r\n        <item itemvalue=\"Cargo.Test tests::encrypt_decrypt_test (1)\" />\r\n        <item itemvalue=\"Cargo.Run server_sym2\" />\r\n        <item itemvalue=\"Cargo.Expand hyxe_crypt::sec_string [udt]\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"RustProjectSettings\">\r\n    <option name=\"compileAllTargets\" value=\"false\" />\r\n    <option name=\"externalLinter\" value=\"Clippy\" />\r\n    <option name=\"toolchainHomeDirectory\" value=\"$USER_HOME$/.cargo/bin\" />\r\n    <option name=\"version\" value=\"2\" />\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"project-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration>C:\\Users\\tbrau\\AppData\\Roaming\\Subversion</configuration>\r\n    <option name=\"sshConnectionType\" value=\"PRIVATE_KEY\" />\r\n    <option name=\"sshPort\" value=\"44444\" />\r\n    <option name=\"sshPrivateKeyPath\" value=\"C:\\ssh\\def.txt\" />\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"0501a0c8-9cbe-42c6-af13-f5bb287722a6\" name=\"Default Changelist\" comment=\"\" />\r\n      <changelist id=\"9ba86fcb-f55c-4698-a5ca-e0aac968b922\" name=\"local history tokio0.3.5\" comment=\"\" />\r\n      <created>1566054907722</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1566054907722</updated>\r\n      <workItem from=\"1566054910120\" duration=\"734000\" />\r\n      <workItem from=\"1566056241528\" duration=\"117508000\" />\r\n      <workItem from=\"1566312154136\" duration=\"1215000\" />\r\n      <workItem from=\"1566313454905\" duration=\"36732000\" />\r\n      <workItem from=\"1566406544390\" duration=\"562000\" />\r\n      <workItem from=\"1566407121979\" duration=\"105000\" />\r\n      <workItem from=\"1566407335001\" duration=\"108934000\" />\r\n      <workItem from=\"1566674956182\" duration=\"46269000\" />\r\n      <workItem from=\"1566752338466\" duration=\"62465000\" />\r\n      <workItem from=\"1566925608027\" duration=\"83037000\" />\r\n      <workItem from=\"1567100428916\" duration=\"40812000\" />\r\n      <workItem from=\"1567186945072\" duration=\"19840000\" />\r\n      <workItem from=\"1567223514695\" duration=\"18093000\" />\r\n      <workItem from=\"1567273732420\" duration=\"30019000\" />\r\n      <workItem from=\"1567363195915\" duration=\"42425000\" />\r\n      <workItem from=\"1567448042947\" duration=\"26559000\" />\r\n      <workItem from=\"1567532105054\" duration=\"523000\" />\r\n      <workItem from=\"1567532903412\" duration=\"6574000\" />\r\n      <workItem from=\"1567554435003\" duration=\"3870000\" />\r\n      <workItem from=\"1567558332783\" duration=\"6007000\" />\r\n      <workItem from=\"1567608140993\" duration=\"9272000\" />\r\n      <workItem from=\"1567622824494\" duration=\"190076000\" />\r\n      <workItem from=\"1568047605781\" duration=\"45983000\" />\r\n      <workItem from=\"1568146583170\" duration=\"95900000\" />\r\n      <workItem from=\"1568407547531\" duration=\"78000\" />\r\n      <workItem from=\"1568407640760\" duration=\"96913000\" />\r\n      <workItem from=\"1568667132996\" duration=\"39971000\" />\r\n      <workItem from=\"1568745741194\" duration=\"18060000\" />\r\n      <workItem from=\"1568811513186\" duration=\"16718000\" />\r\n      <workItem from=\"1568834366138\" duration=\"331000\" />\r\n      <workItem from=\"1568834716495\" duration=\"79838000\" />\r\n      <workItem from=\"1569019382393\" duration=\"26475000\" />\r\n      <workItem from=\"1569107847368\" duration=\"44607000\" />\r\n      <workItem from=\"1569239076920\" duration=\"38032000\" />\r\n      <workItem from=\"1569506012119\" duration=\"36049000\" />\r\n      <workItem from=\"1569589133135\" duration=\"2113000\" />\r\n      <workItem from=\"1569592219061\" duration=\"536000\" />\r\n      <workItem from=\"1569597186452\" duration=\"47601000\" />\r\n      <workItem from=\"1569765033714\" duration=\"34851000\" />\r\n      <workItem from=\"1569852165146\" duration=\"33805000\" />\r\n      <workItem from=\"1569933831071\" duration=\"1652000\" />\r\n      <workItem from=\"1569944284020\" duration=\"34298000\" />\r\n      <workItem from=\"1570054078088\" duration=\"34956000\" />\r\n      <workItem from=\"1570162238353\" duration=\"37886000\" />\r\n      <workItem from=\"1570249569375\" duration=\"52767000\" />\r\n      <workItem from=\"1570462967711\" duration=\"1596000\" />\r\n      <workItem from=\"1570465998199\" duration=\"30037000\" />\r\n      <workItem from=\"1570549567587\" duration=\"32698000\" />\r\n      <workItem from=\"1570660824098\" duration=\"21000\" />\r\n      <workItem from=\"1570660857240\" duration=\"47781000\" />\r\n      <workItem from=\"1570894058119\" duration=\"32316000\" />\r\n      <workItem from=\"1571005935172\" duration=\"11994000\" />\r\n      <workItem from=\"1571092838829\" duration=\"1654000\" />\r\n      <workItem from=\"1571095379847\" duration=\"7008000\" />\r\n      <workItem from=\"1571139008733\" duration=\"37543000\" />\r\n      <workItem from=\"1571191558471\" duration=\"4491000\" />\r\n      <workItem from=\"1571235940836\" duration=\"213000\" />\r\n      <workItem from=\"1571236279729\" duration=\"6194000\" />\r\n      <workItem from=\"1571249369570\" duration=\"144000\" />\r\n      <workItem from=\"1571249531809\" duration=\"88963000\" />\r\n      <workItem from=\"1571575774081\" duration=\"24000\" />\r\n      <workItem from=\"1571575814011\" duration=\"14879000\" />\r\n      <workItem from=\"1571665450411\" duration=\"86565000\" />\r\n      <workItem from=\"1572026672154\" duration=\"7697000\" />\r\n      <workItem from=\"1572099267258\" duration=\"463000\" />\r\n      <workItem from=\"1572099754628\" duration=\"30553000\" />\r\n      <workItem from=\"1572216342872\" duration=\"4333000\" />\r\n      <workItem from=\"1573357777962\" duration=\"180000\" />\r\n      <workItem from=\"1573358071563\" duration=\"743000\" />\r\n      <workItem from=\"1573930793634\" duration=\"100000\" />\r\n      <workItem from=\"1573930911584\" duration=\"619000\" />\r\n      <workItem from=\"1575505510271\" duration=\"75000\" />\r\n      <workItem from=\"1575505664897\" duration=\"1551000\" />\r\n      <workItem from=\"1578152613217\" duration=\"562000\" />\r\n      <workItem from=\"1578153234602\" duration=\"3605000\" />\r\n      <workItem from=\"1578672843475\" duration=\"25000\" />\r\n      <workItem from=\"1578672894026\" duration=\"35378000\" />\r\n      <workItem from=\"1578842364744\" duration=\"41478000\" />\r\n      <workItem from=\"1579093192377\" duration=\"10397000\" />\r\n      <workItem from=\"1579137290886\" duration=\"23057000\" />\r\n      <workItem from=\"1579465239198\" duration=\"44018000\" />\r\n      <workItem from=\"1579822050254\" duration=\"21000\" />\r\n      <workItem from=\"1579822083641\" duration=\"2595000\" />\r\n      <workItem from=\"1579824696716\" duration=\"30245000\" />\r\n      <workItem from=\"1579969439718\" duration=\"30000\" />\r\n      <workItem from=\"1579969493586\" duration=\"45367000\" />\r\n      <workItem from=\"1580222598801\" duration=\"1004000\" />\r\n      <workItem from=\"1580226129126\" duration=\"565000\" />\r\n      <workItem from=\"1580226709458\" duration=\"659000\" />\r\n      <workItem from=\"1580227609017\" duration=\"7000\" />\r\n      <workItem from=\"1580406603818\" duration=\"71000\" />\r\n      <workItem from=\"1580406691802\" duration=\"33262000\" />\r\n      <workItem from=\"1580534092894\" duration=\"56000\" />\r\n      <workItem from=\"1580534156477\" duration=\"26778000\" />\r\n      <workItem from=\"1580685383578\" duration=\"10944000\" />\r\n      <workItem from=\"1580819601886\" duration=\"594000\" />\r\n      <workItem from=\"1580820614081\" duration=\"295000\" />\r\n      <workItem from=\"1580820923123\" duration=\"82535000\" />\r\n      <workItem from=\"1581255061366\" duration=\"68975000\" />\r\n      <workItem from=\"1581607459862\" duration=\"2718000\" />\r\n      <workItem from=\"1581613482744\" duration=\"13000\" />\r\n      <workItem from=\"1581614093431\" duration=\"18286000\" />\r\n      <workItem from=\"1581689103593\" duration=\"66232000\" />\r\n      <workItem from=\"1582074362924\" duration=\"43910000\" />\r\n      <workItem from=\"1582380945429\" duration=\"124000\" />\r\n      <workItem from=\"1582381085109\" duration=\"31000\" />\r\n      <workItem from=\"1582381169484\" duration=\"32387000\" />\r\n      <workItem from=\"1582467288297\" duration=\"8603000\" />\r\n      <workItem from=\"1582513781960\" duration=\"7441000\" />\r\n      <workItem from=\"1582644772791\" duration=\"12392000\" />\r\n      <workItem from=\"1582838525823\" duration=\"1429000\" />\r\n      <workItem from=\"1593041969490\" duration=\"61000\" />\r\n      <workItem from=\"1594326395096\" duration=\"55036000\" />\r\n      <workItem from=\"1594471102608\" duration=\"117743000\" />\r\n      <workItem from=\"1594735606083\" duration=\"55033000\" />\r\n      <workItem from=\"1594902531151\" duration=\"66415000\" />\r\n      <workItem from=\"1595026310000\" duration=\"38961000\" />\r\n      <workItem from=\"1595123258548\" duration=\"225600000\" />\r\n      <workItem from=\"1595873202470\" duration=\"175100000\" />\r\n      <workItem from=\"1596305934953\" duration=\"172728000\" />\r\n      <workItem from=\"1596644033851\" duration=\"267020000\" />\r\n      <workItem from=\"1597129060608\" duration=\"110133000\" />\r\n      <workItem from=\"1597404175075\" duration=\"136079000\" />\r\n      <workItem from=\"1597861666562\" duration=\"44000\" />\r\n      <workItem from=\"1597861734055\" duration=\"83000\" />\r\n      <workItem from=\"1597861846717\" duration=\"19968000\" />\r\n      <workItem from=\"1599693790563\" duration=\"91894000\" />\r\n      <workItem from=\"1600532070980\" duration=\"117237000\" />\r\n      <workItem from=\"1600946594665\" duration=\"10864000\" />\r\n      <workItem from=\"1600980280233\" duration=\"54625000\" />\r\n      <workItem from=\"1601315173138\" duration=\"10812000\" />\r\n      <workItem from=\"1601403549954\" duration=\"195393000\" />\r\n      <workItem from=\"1601927218190\" duration=\"8598000\" />\r\n      <workItem from=\"1601941914374\" duration=\"58876000\" />\r\n      <workItem from=\"1602288803140\" duration=\"4216000\" />\r\n      <workItem from=\"1603801810090\" duration=\"5096000\" />\r\n      <workItem from=\"1603845572273\" duration=\"8195000\" />\r\n      <workItem from=\"1605101301472\" duration=\"1016000\" />\r\n      <workItem from=\"1605129908586\" duration=\"6500000\" />\r\n      <workItem from=\"1605215076430\" duration=\"10483000\" />\r\n      <workItem from=\"1605988772187\" duration=\"10906000\" />\r\n      <workItem from=\"1606011534466\" duration=\"655000\" />\r\n      <workItem from=\"1606067314910\" duration=\"72000\" />\r\n      <workItem from=\"1606067409333\" duration=\"619000\" />\r\n      <workItem from=\"1606069122777\" duration=\"84000\" />\r\n      <workItem from=\"1606069487987\" duration=\"8827000\" />\r\n      <workItem from=\"1606438063783\" duration=\"124000\" />\r\n      <workItem from=\"1606438272923\" duration=\"8858000\" />\r\n      <workItem from=\"1606505541873\" duration=\"589000\" />\r\n      <workItem from=\"1606510793997\" duration=\"67620000\" />\r\n      <workItem from=\"1606756377281\" duration=\"36168000\" />\r\n      <workItem from=\"1607002112859\" duration=\"34549000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Progress on hyxe_user\">\r\n      <created>1566433001738</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1566433001738</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Progress on hyxe_user\">\r\n      <created>1566433494437</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1566433494437</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Progress on hyxe_user\">\r\n      <created>1566433610790</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1566433610790</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Progress on hyxe_user\">\r\n      <created>1566438230391</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1566438230391</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Progress on hyxe_user\">\r\n      <created>1566438611176</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1566438611176</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Progress on hyxe_user\">\r\n      <created>1566442142949</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1566442142949</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Progress on hyxe_user, hyxe_crypt\">\r\n      <created>1566619184966</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1566619184966</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Progress on hyxe networking\">\r\n      <created>1579186439733</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1579186439733</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Progress on hyxe networking\">\r\n      <created>1580222633251</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1580222633251</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Progress on hyxe networking\">\r\n      <created>1580222906744</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1580222906744</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Progress on hyxe networking\">\r\n      <created>1580222979791</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1580222979791</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"12\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"UpdateCopyrightCheckinHandler\">\r\n    <option name=\"UPDATE_COPYRIGHT\" value=\"true\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"BRANCHES_LOG\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"CHECK_CODE_CLEANUP_BEFORE_PROJECT_COMMIT\" value=\"true\" />\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <ignored-roots>\r\n      <path value=\"$PROJECT_DIR$/dashmap/ccl\" />\r\n      <path value=\"$PROJECT_DIR$/dashmap/rs-hm-bench\" />\r\n      <path value=\"$PROJECT_DIR$/dashmap\" />\r\n      <path value=\"$PROJECT_DIR$/sidh-rs\" />\r\n      <path value=\"$PROJECT_DIR$/quinn\" />\r\n      <path value=\"$PROJECT_DIR$/async_ip\" />\r\n      <path value=\"$PROJECT_DIR$/base64-codec\" />\r\n      <path value=\"$PROJECT_DIR$/ez_pqcrypto\" />\r\n      <path value=\"$PROJECT_DIR$/net2-rs\" />\r\n      <path value=\"$PROJECT_DIR$/pqcrypto\" />\r\n      <path value=\"$PROJECT_DIR$/pqcrypto/pqclean\" />\r\n      <path value=\"$PROJECT_DIR$/pqcrypto/pqclean/test/pycparser\" />\r\n      <path value=\"$PROJECT_DIR$/quantum_random\" />\r\n      <path value=\"$PROJECT_DIR$/shrust\" />\r\n    </ignored-roots>\r\n    <MESSAGE value=\"Progress on hyxe_user\" />\r\n    <MESSAGE value=\"Progress on hyxe_user, hyxe_crypt\" />\r\n    <MESSAGE value=\"Progress on hyxe networking\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Progress on hyxe networking\" />\r\n    <option name=\"MAKE_NEW_CHANGELIST_ACTIVE\" value=\"true\" />\r\n    <option name=\"OPTIMIZE_IMPORTS_BEFORE_PROJECT_COMMIT\" value=\"true\" />\r\n    <option name=\"REFORMAT_BEFORE_PROJECT_COMMIT\" value=\"true\" />\r\n    <option name=\"REARRANGE_BEFORE_PROJECT_COMMIT\" value=\"true\" />\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision bc150d7311557fd666684082d183891298012257)
+++ b/.idea/workspace.xml	(date 1607207942058)
@@ -41,70 +41,17 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="9ba86fcb-f55c-4698-a5ca-e0aac968b922" name="local history tokio0.3.5" comment="local history tokio0.3.5&#10;This has some subtle bugs that need to be addressed (connection does not work; suspect problem with tokio03. For now, we won't use this version">
-      <change afterPath="$PROJECT_DIR$/launcher/.idea/libraries/commons_configuration2_2_7.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/launcher/.idea/libraries/commons_configuration_1_10.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/codeStyles/Project.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Cargo.lock" beforeDir="false" afterPath="$PROJECT_DIR$/Cargo.lock" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/ez_pqcrypto/src/replay_attack_container.rs" beforeDir="false" afterPath="$PROJECT_DIR$/ez_pqcrypto/src/replay_attack_container.rs" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/hyxe_crypt/Cargo.toml" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_crypt/Cargo.toml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_crypt/src/net/crypt_splitter.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_crypt/src/net/crypt_splitter.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_crypt/src/sec_bytes.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_crypt/src/sec_bytes.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_fs/Cargo.toml" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_fs/Cargo.toml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_fs/src/file_crypt_scrambler.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_fs/src/file_crypt_scrambler.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_nat/Cargo.toml" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_nat/Cargo.toml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_nat/rust-igd/Cargo.toml" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_nat/rust-igd/Cargo.toml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_nat/rust-igd/src/errors.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_nat/rust-igd/src/errors.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_nat/src/udp_traversal/linear/method3.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_nat/src/udp_traversal/linear/method3.rs" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/hyxe_net/Cargo.toml" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/Cargo.toml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/hyxe_net/src/constants.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/constants.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_crafter.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_crafter.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/deregister_packet.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/deregister_packet.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/disconnect_packet.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/disconnect_packet.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/mod.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/mod.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/peer/group_broadcast.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/peer/group_broadcast.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/peer_cmd_packet.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/peer_cmd_packet.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/preconnect_packet.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/preconnect_packet.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/primary_group_packet.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/primary_group_packet.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/raw_primary_packet.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/raw_primary_packet.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/wave_group_packet.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_packet_processor/wave_group_packet.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_server.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_server.rs" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_session.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_session.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_session_manager.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_session_manager.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/mod.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/mod.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/nat_handler.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/nat_handler.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/outbound_sender.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/outbound_sender.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/peer/channel.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/peer/channel.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/peer/peer_crypt.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/peer/peer_crypt.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/peer/peer_layer.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/peer/peer_layer.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/session_queue_handler.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/session_queue_handler.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/state_container.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/state_container.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/udp_framed.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/udp_framed.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/validation.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/validation.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/inner_arg.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/inner_arg.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/kernel/kernel_executor.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/kernel/kernel_executor.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_net/src/lib.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/lib.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_user/Cargo.toml" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_user/Cargo.toml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxe_user/src/network_account.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_user/src/network_account.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxewave/Cargo.toml" beforeDir="false" afterPath="$PROJECT_DIR$/hyxewave/Cargo.toml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxewave/src/command_handlers/connect.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxewave/src/command_handlers/connect.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxewave/src/command_handlers/group.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxewave/src/command_handlers/group.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxewave/src/command_handlers/peer.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxewave/src/command_handlers/peer.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxewave/src/command_handlers/register.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxewave/src/command_handlers/register.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxewave/src/command_handlers/send.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxewave/src/command_handlers/send.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxewave/src/console/console_context.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxewave/src/console/console_context.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxewave/src/ffi/command_handler.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxewave/src/ffi/command_handler.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxewave/src/hdp_initiator.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxewave/src/hdp_initiator.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxewave/src/kernel.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxewave/src/kernel.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxewave/src/lib.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxewave/src/lib.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxewave/src/primary_terminal.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxewave/src/primary_terminal.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/hyxewave/src/ticket_event.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxewave/src/ticket_event.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/launcher/src/com/satori/Execute.java" beforeDir="false" afterPath="$PROJECT_DIR$/launcher/src/com/satori/Execute.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/local_history.patch" beforeDir="false" afterPath="$PROJECT_DIR$/local_history.patch" afterDir="false" />
     </list>
     <list id="0501a0c8-9cbe-42c6-af13-f5bb287722a6" name="Default Changelist" comment="Progress on hyxe networking">
       <change beforePath="$PROJECT_DIR$/async_udt/udt-rs" beforeDir="false" afterPath="$PROJECT_DIR$/async_udt/udt-rs" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/base64-codec" beforeDir="false" afterPath="$PROJECT_DIR$/base64-codec" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_session.rs" beforeDir="false" afterPath="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_session.rs" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/rsntp" beforeDir="false" afterPath="$PROJECT_DIR$/rsntp" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/shrust" beforeDir="false" afterPath="$PROJECT_DIR$/shrust" afterDir="false" />
     </list>
@@ -164,6 +111,17 @@
   <component name="KotlinMultiplatform">
     <allAvailableExecutables />
   </component>
+  <component name="LineStatusTrackerManager">
+    <file path="$PROJECT_DIR$/hyxe_net/src/hdp/hdp_session.rs">
+      <ranges>
+        <range start1="386" end1="387" start2="386" end2="392" changelist="9ba86fcb-f55c-4698-a5ca-e0aac968b922" />
+        <range start1="389" end1="390" start2="394" end2="395" changelist="9ba86fcb-f55c-4698-a5ca-e0aac968b922" />
+        <range start1="408" end1="408" start2="413" end2="414" changelist="9ba86fcb-f55c-4698-a5ca-e0aac968b922" />
+        <range start1="411" end1="411" start2="417" end2="418" changelist="0501a0c8-9cbe-42c6-af13-f5bb287722a6" />
+        <range start1="417" end1="418" start2="424" end2="448" changelist="9ba86fcb-f55c-4698-a5ca-e0aac968b922" />
+      </ranges>
+    </file>
+  </component>
   <component name="MacroExpansionManager">
     <option name="directoryName" value="CdSiLkPI" />
   </component>
@@ -389,6 +347,7 @@
   <component name="RustProjectSettings">
     <option name="compileAllTargets" value="false" />
     <option name="externalLinter" value="Clippy" />
+    <option name="newResolveEnabled" value="true" />
     <option name="toolchainHomeDirectory" value="$USER_HOME$/.cargo/bin" />
     <option name="version" value="2" />
   </component>
